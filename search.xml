<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[megacli在线磁盘raid]]></title>
    <url>%2Funcategorized%2F2604242901.html</url>
    <content type="text"><![CDATA[测试机：idrac：10.10.10.199 calvin@Dell 测试机：10.10.10.208 查看下物理磁盘信息（可以查看到物理磁盘及raid适配器的信息，及磁盘容量大小）/opt/MegaRAID/MegaCli/MegaCli64 -PDList -aALL 查看重要数据Adapter #0Enclosure Device ID: 32Slot Number: 0PD Type: SAS 查看适配器信息/opt/MegaRAID/MegaCli/MegaCli64 -AdpAllInfo -aAll 查看Raid初始化情况/opt/MegaRAID/MegaCli/MegaCli64 -LDBI -ShowProg -LALL -aALL 扫描外来盘的个数/opt/MegaRAID/MegaCli/MegaCli64 -cfgforeign -scan -a0 清除外来盘配置/opt/MegaRAID/MegaCli/MegaCli64 -cfgforeign -clear -a0 查看JBOD是否启用/opt/MegaRAID/MegaCli/MegaCli64 -AdpGetProp -enablejbod -aALLAdapter 0: JBOD: Enabled 禁用JBOD模式/opt/MegaRAID/MegaCli/MegaCli64 -AdpSetProp -EnableJBOD -0 -a0 Adapter 0: Set JBOD to Disable success.val - 0=Disable JBOD mode.1= Enable JBOD mode 创建Raid/opt/MegaRAID/MegaCli/MegaCli64 -CfgLdAdd -r1 [32:2,32:3] WB Direct -a0/opt/MegaRAID/MegaCli/MegaCli64 -CfgLdAdd -r5 [32:2,32:3,32:4] WB Direct -a0 -r1 raid1 [32:2] 磁盘IDEnclosure Device ID: 32Slot Number: 2 [32:3] 磁盘IDEnclosure Device ID: 32Slot Number: 3WB ：磁盘缓存策略 write back-a0 :阵列卡序号 -a0:即adpter0，RAID卡0，如果有更多RAID卡，请确认当前要操作的适配器，可用下面命令查看/opt/MegaRAID/MegaCli/MegaCli64 -AdpAllInfo -aAll 查看阵列后台初始化进度/opt/MegaRAID/MegaCli/MegaCli64 -LDBI -ShowProg -LALL -aALL 快速初始化和完全初始化# 快速初始化/opt/MegaRAID/MegaCli/MegaCli64 -LDInit -start –L0 -a0 # 完全初始化/opt/MegaRAID/MegaCli/MegaCli64 -LDInit -start -full –L0 -a0 # 显示初始化的进度/opt/MegaRAID/MegaCli/MegaCli64 -LDInit -progdsply -L0 -a0 # 结束完全初始化/opt/MegaRAID/MegaCli/MegaCli64 -LDInit -abort -L0 -a0]]></content>
  </entry>
  <entry>
    <title><![CDATA[php编译安装]]></title>
    <url>%2Fphp%2F1814833900.html</url>
    <content type="text"><![CDATA[源码编译安装官网 官网：http://php.net/ 官网下载：http://php.net/downloads.php 了解与准备Apache(httpd) nginx 与 php 连接方式：httpd与php： php 作为 httpd 模块 fastcgi(php-fpm) cgi(此处不讲解) nginx与php： fastcgi(php-fpm) PHP安装与依赖：yum -y install gcc gcc-c++ libxml2 libxml2-devel bzip2 bzip2-devel libmcrypt libmcrypt-devel openssl openssl-devel libcurl-devel libjpeg-devel libpng-devel freetype-devel readline readline-devel libxslt-devel perl perl-devel psmisc.x86_64 recode recode-devel libtidy libtidy-devel 上面的依赖基本解决所需要的依赖。 编译安装完成后可以增减所支持的php模块，此处所编译的模块已经非常完备。 需要编译单个模块，查看php模块编译方式：php模块编译 下面编译安装的配置选项： –prefix=/usr/local/php7 主程序文件路径 –sysconfdir=/etc/php7 配置文件路径 –with-config-file-path=/etc/php7 php.ini 文件路径 –with-apxs2=/usr/local/httpd/bin/apxs 以 httpd 模块编译时需要指定 httpd 的 apxs 文件路径。 其他的配置可以按自己需求指定，这几个选项也可以使用默认配置。 php7移除了 mysql 扩展，php7仅能是用 mysqli 和 pdo_mysql。php5可以使用。 php5编译时加入选项：–with-mysql 。详情查看下面的 PHP与MariaDB（mysql）连接 此处以 CentOs7 编译 php7 为示例，配合讲解php5安装的要点。 php.ini 文件是在包目录下的 php.ini-development（开发）， php.ini-production（生产） 编译完成后选择自己需要的 php.ini 文件 复制到 –with-config-file-path 指定的目录。 如果编译时为指定此选项，编译完成配置并启动nginx和php查看 phpinfo() 函数所指定的 php.ini 文件路径：Configuration File (php.ini) Path默认为php目录下的 lib 目录。 PHP安装与依赖中 psmisc.x86_64 是 killall 命令的包名，以便最小化安装时终止进程。 php编译与配置httpd 模块 注意事项需要事先存在httpd ，编译指定 apxs 文件位置。此处以–with-apxs2=/usr/local/httpd/bin/apxs 作为演示。 php5.6php7./configure –prefix=/usr/local/php5 –sysconfdir=/etc/php5 –with-config-file-path=/etc/php5 –with-apxs2=/usr/local/httpd/bin/apxs –with-mysql=mysqlnd –with-mysqli=mysqlnd –with-pdo-mysql=mysqlnd –with-mhash –with-openssl –with-zlib –with-bz2 –with-curl –with-libxml-dir –with-gd –with-jpeg-dir –with-png-dir –with-zlib –enable-mbstring –with-mcrypt –enable-sockets –with-iconv-dir –with-xsl –enable-zip –with-pcre-dir –with-pear –enable-session –enable-gd-native-ttf –enable-xml –with-freetype-dir –enable-gd-jis-conv –enable-inline-optimization –enable-shared –enable-bcmath –enable-sysvmsg –enable-sysvsem –enable-sysvshm –enable-mbregex –enable-pcntl –with-xmlrpc –with-gettext –enable-exif –with-readline –with-recode –with-tidy 仅增加了选项--with-mysql=mysqlnd ./configure –prefix=/usr/local/php7 –sysconfdir=/etc/php7 –with-config-file-path=/etc/php7 –with-apxs2=/usr/local/httpd/bin/apxs –with-mysqli=mysqlnd –with-pdo-mysql=mysqlnd –with-mhash –with-openssl –with-zlib –with-bz2 –with-curl –with-libxml-dir –with-gd –with-jpeg-dir –with-png-dir –with-zlib –enable-mbstring –with-mcrypt –enable-sockets –with-iconv-dir –with-xsl –enable-zip –with-pcre-dir –with-pear –enable-session –enable-gd-native-ttf –enable-xml –with-freetype-dir –enable-gd-jis-conv –enable-inline-optimization –enable-shared –enable-bcmath –enable-sysvmsg –enable-sysvsem –enable-sysvshm –enable-mbregex –enable-pcntl –with-xmlrpc –with-gettext –enable-exif –with-readline –with-recode –with-tidy fastcgi php-fpm 模式php5.6php7./configure –prefix=/usr/local/php5 –sysconfdir=/etc/php5 –with-config-file-path=/etc/php5 –enable-fpm –with-mysql=mysqlnd –with-mysqli=mysqlnd –with-pdo-mysql=mysqlnd –with-mhash –with-openssl –with-zlib –with-bz2 –with-curl –with-libxml-dir –with-gd –with-jpeg-dir –with-png-dir –with-zlib –enable-mbstring –with-mcrypt –enable-sockets –with-iconv-dir –with-xsl –enable-zip –with-pcre-dir –with-pear –enable-session –enable-gd-native-ttf –enable-xml –with-freetype-dir –enable-gd-jis-conv –enable-inline-optimization –enable-shared –enable-bcmath –enable-sysvmsg –enable-sysvsem –enable-sysvshm –enable-mbregex –enable-pcntl –with-xmlrpc –with-gettext –enable-exif –with-readline –with-recode –with-tidy 仅增加了选项 --with-mysql=mysqlnd ./configure –prefix=/usr/local/php7 –sysconfdir=/etc/php7 –with-config-file-path=/etc/php7 –enable-fpm –with-mysqli=mysqlnd –with-pdo-mysql=mysqlnd –with-mhash –with-openssl –with-zlib –with-bz2 –with-curl –with-libxml-dir –with-gd –with-jpeg-dir –with-png-dir –with-zlib –enable-mbstring –with-mcrypt –enable-sockets –with-iconv-dir –with-xsl –enable-zip –with-pcre-dir –with-pear –enable-session –enable-gd-native-ttf –enable-xml –with-freetype-dir –enable-gd-jis-conv –enable-inline-optimization –enable-shared –enable-bcmath –enable-sysvmsg –enable-sysvsem –enable-sysvshm –enable-mbregex –enable-pcntl –with-xmlrpc –with-gettext –enable-exif –with-readline –with-recode –with-tidy 整合httpd和fastcgi php-fpm模式--with-apxs2(需要apxs程序)yum -y install httpd-devel ./configure --prefix=/opt/laohulab/php5.6.31 --sysconfdir=/opt/laohulab/php5.6.31/etc --with-config-file-path=/opt/laohulab/php5.6.31/etc --with-config-file-scan-dir=/opt/laohulab/php5.6.31/etc.d --with-apxs2 --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-mhash --with-openssl --with-zlib --with-bz2 --with-curl --with-libxml-dir --with-gd --with-jpeg-dir --with-png-dir --with-zlib --enable-mbstring --with-mcrypt --enable-sockets --with-iconv-dir --with-xsl --enable-zip --with-pcre-dir --with-pear --enable-session --enable-gd-native-ttf --enable-xml --with-freetype-dir --enable-gd-jis-conv --enable-inline-optimization --enable-shared --enable-bcmath --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-mbregex --enable-pcntl --with-xmlrpc --with-gettext --enable-exif --with-readline --with-recode --with-tidy php.ini 配置文件（在源码包目录下）[root@nginx-10-20 php-5.6.31]# pwd/root/php/php-5.6.31[root@nginx-10-20 php-5.6.31]# cp php.ini-production /opt/laohulab/php5.6.31/etc/php.ini php 作为 httpd 模块不需要修改 php 配置 fastcgi php-fpmcp /etc/php7/php-fpm.conf.default /etc/php7/php-fpm.conf cp /etc/php7/php-fpm.d/www.conf.default /etc/php7/php-fpm.d/www.conf # 默认即可是本机 127.0.0.1 不必修改。 vim /etc/php7/php-fpm.d/www.conf # 监听地址 listen = 127.0.0.1:9000 # 允许的客户端 listen.allowed_clients = 127.0.0.1 备注：php5 需要复制 php-fpm.conf.default 为 php-fpm.conf 即可。查看 php-fpm.conf 监听地址和允许的客户端。 启动与停止httpd模块： 重新加载 httpd 。 fastcgi： vim /etc/php7/php-fpm.conf 打开注释：（不打开注释仅能使用 killall php-fpm 关闭 php） pid = run/php-fpm.pid 启动： /usr/local/php7/sbin/php-fpm 立刻终止 kill -INT `cat /usr/local/php7/var/run/php-fpm.pid` kill -TERM `cat /usr/local/php7/var/run/php-fpm.pid` killall php-fpm 平滑终止 kill -QUIT `cat /usr/local/php7/var/run/php-fpm.pid` 平滑重启 kill -USR2 `cat /usr/local/php7/var/run/php-fpm.pid` 加入环境变量PHP=/opt/laohulab/phpexport PATH=$PATH:$PHP/bin:$PHP/sbin CentOS 系统服务（/etc/php7/php-fpm.conf 文件 pid = run/php-fpm.pid 注释需要打开：2.6 ）centos6centos7 vi /etc/rc.d/init.d/php-fpm chmod +x /etc/rc.d/init.d/php-fpm #! /bin/sh # chkconfig: - 84 16 # description: PHP FastCGI Process Manager # Source function library. . /etc/init.d/functions # Check that networking is up. . /etc/sysconfig/network # Additional environment file if [ -f /etc/sysconfig/php-fpm ]; then . /etc/sysconfig/php-fpm fi if [ “$NETWORKING“ = “no” ] then exit 0 fi RETVAL=0 prog=“php-fpm” # 可根据版本不同修改 phpfpm pidfile lockfile变量。其他地方不用修改。 phpfpm=“/usr/local/php7/sbin/php-fpm” pidfile=$&#123;PIDFILE-/usr/local/php7/var/run/php-fpm.pid&#125; lockfile=$&#123;LOCKFILE-/usr/local/php7/var/run/php-fpm.lock&#125; start () &#123; echo -n $“Starting $prog: “ dir=$(dirname $&#123;pidfile&#125;) [ -d $dir ] || mkdir $dir daemon –pidfile $&#123;pidfile&#125; $&#123;phpfpm&#125; RETVAL=$? echo [ $RETVAL -eq 0 ] &amp;&amp; touch $&#123;lockfile&#125; &#125; stop () &#123; echo -n $“Stopping $prog: “ killproc -p $&#123;pidfile&#125; php-fpm RETVAL=$? echo if [ $RETVAL -eq 0 ] ; then rm -f $&#123;lockfile&#125; $&#123;pidfile&#125; fi &#125; restart () &#123; stop start &#125; reload () &#123; echo -n $“Reloading $prog: “ if ! $&#123;phpfpm&#125; –test ; then RETVAL=6 echo $“not reloading due to configuration syntax error” failure $“not reloading $prog due to configuration syntax error” else killproc -p $&#123;pidfile&#125; php-fpm -USR2 RETVAL=$? fi echo &#125; # See how we were called. case “$1“ in start) start ;; stop) stop ;; status) status -p $&#123;pidfile&#125; php-fpm RETVAL=$? ;; restart) restart ;; reload|force-reload) reload ;; configtest) $&#123;phpfpm&#125; –test RETVAL=$? ;; condrestart|try-restart) [ -f $&#123;lockfile&#125; ] &amp;&amp; restart || : ;; *) echo $“Usage: $0 &#123;start|stop|status|restart|reload|force-reload|condrestart|try-restart|configtest&#125;” RETVAL=2 ;; esac exit $RETVAL service php-fpm &#123;start|stop|status|restart|reload|force-reload|condrestart|try-restart|configtest&#125; cp -p sapi/fpm/init.d.php-fpm /etc/init.d/php-fpmchmod 755 /etc/init.d/php-fpmvim /usr/lib/systemd/system/php-fpm.service [Unit] Description=php-fpm After=syslog.target network.target [Service] Type=forking PIDFile=/usr/local/php7/var/run/php-fpm.pid ExecStart=/usr/local/php7/sbin/php-fpm ExecReload=/bin/kill -USR2 $MAINPID PrivateTmp=true [Install] WantedBy=multi-user.target systemctl （start | restart | reload | stop | enable | disable | status） php-fpm.service 系统启动服务CentOS 6CentOS 7 chkconfig –add php-fpm chkconfig –level 345 php-fpm on chkconfig php-fpm off chkconfig –list php-fpm systemctl enable php-fpm.service systemctl disable php-fpm.service 加入 man 文档CentOS 6CentOS 7vim /etc/man.config MANPATH /usr/local/php7/php/man vi /etc/man_db.conf MANPATH /usr/local/php7/php/man 然后就可以使用 man 命令查看 httpd nginx 与 php 连接httpd 模块 php要点： 1：httpd开启模块： LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so 2：php编译指定 httpd apxs 路径（成为 httpd 模块） --with-apxs2=/usr/local/httpd24/bin/apxs 连接： ~]# vi /etc/httpd/httpd.conf 1：添加：（编译时这个默认已经添加） LoadModule php7_module modules/libphp7.so #LoadModule php5_module modules/libphp5.so 2：添加 index.php： &lt;IfModule dir_module&gt; DirectoryIndex index.php index.html &lt;/IfModule&gt; 3：文件最后添加： &lt;FilesMatch \.php$&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt; 备注：vhost 也可以应用 httpd（fastcgi）与 php-fpm要点： 1：httpd开启模块： LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so 2：php编译开启模块： --enable-fpm 连接方式1： ~]# vi /etc/httpd/httpd.conf 最后添加： # On：正向代理（默认） Off：反向代理（此处建议使用） ProxyRequests Off &lt;FilesMatch \.php$&gt; SetHandler proxy:fcgi://127.0.0.1:9000 &lt;/FilesMatch&gt; 连接方式2： ~]# vi /etc/httpd/httpd.conf 最后添加： # On：正向代理（默认） Off：反向代理（此处建议使用） ProxyRequests Off &lt;LocationMatch ^(.*\.php)$&gt; ProxyPass fcgi://127.0.0.1:9000/var/www/html/ &lt;/LocationMatch&gt; 连接方式3：类型2的改变 ~]# vi /etc/httpd/httpd.conf 最后添加： # On：正向代理（默认） Off：反向代理（此处建议使用） ProxyRequests Off ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/html/$1 连接方式设置完后再添加 index.php： &lt;IfModule dir_module&gt; DirectoryIndex index.php index.html &lt;/IfModule&gt; 备注：连接方式1 更方便在本地使用，2和3一般会使用远程 php 服务器上。 Nginx与php连接要点： 1：Nginx 默认支持 fastcgi 2：php编译开启模块： --enable-fpm 连接： server &#123; listen 80; server_name localhost; root /var/www/html; index index.php index.html; ....... # nginx 连接方式 location ~ \.php$ &#123; # root /：可以在这里单独设置php的根，$document_root 变量是上面 root 定义的网站根路径。 fastcgi_pass 127.0.0.1:9000; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; &#125; PHP与MariaDB(mysql)连接4.1：使用 MariaDB 编译（相对于mysql安装的目录） --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-pdo-mysql=/usr/local/mysql 4.2：使用 PHP 的 mysqlnd 编译（推荐使用） --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd 4.3：php版本区别要点： 1：php7移除了 mysql 扩展，php7仅能是用 mysqli 和 pdo_mysql 2：mysqlnd 要求 php版本 &gt;= 5.3 4：mysqlnd和php内部机制结合更紧密，是优化过的mysql驱动，建议使用 测试1.1：添加文件与内容 vim /var/www/html/index.php &lt;?php phpinfo(); ?&gt; php多版本安装注意事项6.1：httpd与php httpd 模块：可以编译多个版本，但同时只能运行一个，另外一个需要注释。 LoadModule php7_module modules/libphp7.so #LoadModule php5_module modules/libphp5.so httpd fastcgi： 在 vhost 虚拟机中指定不同的监听地址。 例如： &lt;VirtualHost *:80&gt; DocumentRoot "/web/a" ServerName www.a.com &lt;FilesMatch \.php$&gt; SetHandler proxy:fcgi://127.0.0.1:9000 &lt;/FilesMatch&gt; # 或者 ProxyRequests Off ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/html/$1 &lt;/VirtualHost&gt; 6.2：nginx与php 指定不同的监听地址 location ~ \.php$ &#123; fastcgi_pass 127.0.0.1:9000; &#125; 参考 http://php.net/manual/zh/install.php(官网安装帮助文档) http://cnzhx.net/blog/apache-httpd-mod_proxy_fcgi-php-fpm/ http://blog.csdn.net/u010861514/article/details/51926575]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx编译安装]]></title>
    <url>%2Fnginx%2F347607591.html</url>
    <content type="text"><![CDATA[Nginx编译安装下载相关软件包wget http://nginx.org/download/nginx-1.10.2.tar.gzwget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz wget http://zlib.net/zlib-1.2.11.tar.gzwget https://www.openssl.org/source/openssl-1.0.2l.tar.gz 编译安装./configure --prefix=/opt/laohulab/nginx --user=www --group=www --with-openssl=../openssl-1.0.2l --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.11 --with-http_realip_module --with-http_ssl_module --with-http_stub_status_module make &amp;&amp; make install 查看安装版本[root@dokuwiki-10-26 ~]# /opt/laohulab/nginx/sbin/nginx -Vnginx version: nginx/1.10.2built by gcc 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC) built with OpenSSL 1.0.2l 25 May 2017TLS SNI support enabledconfigure arguments: --prefix=/opt/laohulab/nginx --user=www --group=www --with-openssl=../openssl-1.0.2l --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.11 --with-http_realip_module --with-http_ssl_module --with-http_stub_status_module 参考案例nginx version: nginx/1.10.2built by gcc 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) built with OpenSSL 1.0.2j 26 Sep 2016TLS SNI support enabledconfigure arguments: --prefix=/opt/tuniu/nginx --user=www --group=www --with-ld-opt=-Wl,-rpath,/usr/local/luajit/lib --with-openssl=../openssl-1.0.2j --with-pcre=../pcre-8.39/ --with-zlib=../zlib-1.2.8/ --with-http_realip_module --with-http_ssl_module --with-http_stub_status_module --add-module=../ngx_devel_kit-0.3.0 --add-module=../lua-nginx-module-0.10.7 --add-module=../ngx_cache_purge-2.3 --add-module=../nginx-http-concat --add-module=../ngx_http_sticky_module --add-module=../nginx-upsync-module]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql5.7编译安装]]></title>
    <url>%2FMysql%2F1435796682.html</url>
    <content type="text"><![CDATA[编译安装yum remove mariadbyum -y install gcc gcc-c++ ncurses ncurses-devel cmake wget http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gzwget http://files.directadmin.com/services/all/mysql/5.7/5.7.20/mysql-5.7.20.tar.gzuseradd -M -s /sbin/nologin mysqltar zxvf boost_1_59_0.tar.gz tar zxvf mysql-5.7.20.tar.gz mkdir -p /opt/laohulab/mysql-5.7.20/datacd mysql-5.7.20/cmake . -DCMAKE_INSTALL_PREFIX="/opt/laohulab/mysql-5.7.20" -DMYSQL_DATADIR="/opt/laohulab/mysql-5.7.20/data" -DDOWNLOAD_BOOST=1 -DWITH_BOOST=../boost_1_59_0 -DSYSCONFDIR=/opt/laohulab/mysql-5.7.20 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DENABLED_LOCAL_INFILE=1 -DENABLE_DTRACE=0 -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_EMBEDDED_SERVER=0 配置系统服务cp /opt/laohulab/mysql-5.7.20/support-files/mysql.server /etc/init.d/mysqldchmod +x /etc/init.d/mysqldchkconfig --add mysqldchkconfig mysqld onchkconfig --list mysqld 启动服务/opt/laohulab/mysql-5.7.20/bin/mysqld --initialize-insecure --user=mysql --basedir=/opt/laohulab/mysql-5.7.20 --datadir=/opt/laohulab/mysql-5.7.20/datatouch /opt/laohulab/mysql-5.7.20/mysql-error.logchown -R mysql.mysql /opt/laohulab/mysql-5.7.20//opt/laohulab/mysql-5.7.20/bin/mysqld_safe --defaults-file="/opt/laohulab/mysql-5.7.20/my.cnf" &amp; 创建数据库CREATE DATABASE `tonnydb` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; 权限grant all privileges on tonnydb.* to 'tonny'@'%' identified by Welcome2018@';flush privileges; 修改密码/opt/laohulab/mysql-5.7.20/bin/mysql -uroot -p select host,user,authentication_string from user;UPDATE user SET authentication_string=PASSWORD('newpassword') WHERE user='root';flush privileges; 参考http://www.360doc.com/content/15/0629/17/14900341_481504365.shtml centos7]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自签名ssl证书]]></title>
    <url>%2FSSL%2F1808019060.html</url>
    <content type="text"><![CDATA[定制个人签名证书生成私钥文件openssl genrsa -des3 -out www.laohulab.com.key 2048 移除私钥密码openssl rsa -in www.laohulab.com.key -out www.laohulab.com.key 生成自签名证书openssl req -new -sha256 \ -x509 \ -days 10000 \ -key www.laohulab.com.key \ -subj "/C=CN/ST=BeiJing/L=Beijing/O=QUNAR/OU=FE/CN=www.laohulab.com" \ -extensions SAN \ -config &lt;(cat ./openssl.cnf &lt;(printf "[SAN]\nsubjectAltName=DNS.1:www:laohulab.com,DNS.2:wiki.laohulab.com,DNS.3:*.laohulab.com")) \ -out www.laohulab.com.crt 注意:由于各服务器openssl版本不同，当前服务器自签名的证书拷贝至其他服务器可能会出现问题，最好在需要使用服务器上使用openssl重新生成使用到本机openssl.cnf文件 生成genewiz证书示例openssl genrsa -des3 -out gwharbor03.local.genewiz.com.key 2048openssl rsa -in gwharbor03.local.genewiz.com.key -out gwharbor03.local.genewiz.com.key openssl req -new -sha256 \ -x509 \ -days 10000 \ -key gwharbor03.local.genewiz.com.key \ -subj "/C=CN/ST=Jiangsu/L=Suzhou/O=ITSA/OU=ITSA/CN=*.local.genewiz.com" \ -extensions SAN \ -config &lt;(cat ./openssl.cnf &lt;(printf "[SAN]\nsubjectAltName=DNS.1:gwharbor03.local.genewiz.com,DNS.2:*.local.genewiz.com")) \ -out gwharbor03.local.genewiz.com.crt 生成laohulab.com自签名证书openssl genrsa -des3 -out laohulab.com.key 2048 openssl rsa -in laohulab.com.key -out laohulab.com.key [root@nginx-10-20 ~]# openssl req -new -sha256 \&gt; -x509 \&gt; -days 10000 \&gt; -key laohulab.com.key \&gt; -subj "/C=CN/ST=JiangSu/L=Nanjing/O=IT/OU=IT/CN=laohulab.com" \&gt; -extensions SAN \&gt; -config &lt;(cat ./openssl.cnf &lt;(printf "[SAN]\nsubjectAltName=DNS.1:laohulab.com,DNS.2:www.laohulab.com,DNS.3:*.laohulab.com")) \&gt; -out laohulab.com.crt 6.测试证书 由于自签名证书并未被各大主流浏览器根证书信任，所以访问时会提示证书信任警告，将自签名的laohulab.com.crt导入浏览器即可[root@nginx-10-20 ~]# mv laohulab.com.* /opt/laohulab/nginx/certs/[root@nginx-10-20 ~]# cd /opt/laohulab/nginx/certs/ 重启Nginx，进行测试！ IE测试，由于自签名证书并未被各大主流浏览器根证书信任，所以访问时会提示证书信任警告，将自签名的laohulab.com.crt导入浏览器即可]]></content>
      <categories>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dns主从配置]]></title>
    <url>%2FDNS%2F681391827.html</url>
    <content type="text"><![CDATA[安装bind软件yum -y install bind 配置Master DNS//// named.conf//// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS// server as a caching only nameserver (as a localhost DNS resolver only).//// See /usr/share/doc/bind*/sample/ for example named configuration files.//options &#123; listen-on port 53 &#123; 192.168.10.249; &#125;; //listen-on-v6 port 53 &#123; ::1; &#125;; directory "/var/named"; dump-file "/var/named/data/cache_dump.db"; statistics-file "/var/named/data/named_stats.txt"; memstatistics-file "/var/named/data/named_mem_stats.txt"; allow-query &#123; any; &#125;; recursion yes; forwarders &#123; 218.2.135.1; 114.114.114.114; &#125;; dnssec-enable no; //dnssec-validation yes; //dnssec-lookaside auto; /* Path to ISC DLV key */ //bindkeys-file "/etc/named.iscdlv.key"; //managed-keys-directory "/var/named/dynamic";&#125;;logging &#123; channel default_debug &#123; file "data/named.run"; severity dynamic; &#125;;&#125;;zone "." IN &#123; type hint; file "named.ca";&#125;;include "/etc/named.rfc1912.zones";include "/etc/named.laohulab.zones";//include "/etc/named.root.key"; zone "laohulab.com" IN &#123; type master; file "laohulab.com.zone"; allow-transfer &#123; 192.168.10.250; &#125;; notify yes; also-notify &#123; 192.168.10.250; &#125;;&#125;;zone"1.168.192.in-addr.arpa" IN &#123; type master; file "192.168.1.zone"; allow-transfer &#123; 192.168.10.250; &#125;; notify yes; also-notify &#123; 192.168.10.250; &#125;;&#125;; 配置Slave DNS//// named.conf//// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS// server as a caching only nameserver (as a localhost DNS resolver only).//// See /usr/share/doc/bind*/sample/ for example named configuration files.//options &#123; listen-on port 53 &#123; 192.168.10.250; &#125;; //listen-on-v6 port 53 &#123; ::1; &#125;; directory "/var/named"; dump-file "/var/named/data/cache_dump.db"; statistics-file "/var/named/data/named_stats.txt"; memstatistics-file "/var/named/data/named_mem_stats.txt"; allow-query &#123; any; &#125;;//// named.conf//// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS// server as a caching only nameserver (as a localhost DNS resolver only).//// See /usr/share/doc/bind*/sample/ for example named configuration files.//options &#123; listen-on port 53 &#123; 192.168.10.250; &#125;; //listen-on-v6 port 53 &#123; ::1; &#125;; directory "/var/named"; dump-file "/var/named/data/cache_dump.db"; statistics-file "/var/named/data/named_stats.txt"; memstatistics-file "/var/named/data/named_mem_stats.txt"; allow-query &#123; any; &#125;; recursion yes; forwarders &#123; 218.2.135.1; 114.114.114.114; &#125;; dnssec-enable no; //dnssec-validation yes; //dnssec-lookaside auto; /* Path to ISC DLV key */ //bindkeys-file "/etc/named.iscdlv.key"; //managed-keys-directory "/var/named/dynamic";&#125;;logging &#123; channel default_debug &#123; file "data/named.run"; severity dynamic; &#125;;&#125;;zone "." IN &#123; type hint; file "named.ca";&#125;;include "/etc/named.rfc1912.zones";include "/etc/named.laohulab.zones";//include "/etc/named.root.key"; 启动服务及设置开机启动[root@sdns-10-250 ~]# chkconfig named on &amp;&amp; chkconfig --list namednamed 0:off 1:off 2:on 3:on 4:on 5:on 6:off [root@mdns-10-250 ~]# service named startStarting named: [ OK ] 检查/var/log/message 主从同步信息Jul 7 09:02:24 mdns-10-249 named[1422]: zone laohulab.com/IN: loaded serial 2016122622Jul 7 09:02:24 mdns-10-249 named[1422]: zone laohulab.com/IN: sending notifies (serial 2016122622)Jul 7 09:02:24 mdns-10-249 named[1422]: client 192.168.10.250#42323: transfer of 'laohulab.com/IN': AXFR-style IXFR startedJul 7 09:02:24 mdns-10-249 named[1422]: client 192.168.10.250#42323: transfer of 'laohulab.com/IN': AXFR-style IXFR ended 注意事项修改Master DNS记录，务必修改序列号，同步才能生效!]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[django_setting相关配置]]></title>
    <url>%2FDjango%2F354208569.html</url>
    <content type="text"><![CDATA[常规参数配置设置时区TIME_ZONE = 'Asia/Shanghai' 设置中文LANGUAGE_CODE = 'zh-hans' 运行并未写入数据库python manage.py makemigrations 写入数据库python manage.py migrate 创建管理员用户python manage.py createsuperuser 把模型注册至admin才能使用admin.site.register(model) 配置静态资源目录STATIC_URL = '/static/'STATICFILES_DIRS = (os.path.join(BASE_DIR,'statics'),) 配置MYSQl数据库连接DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'csvt', 'USER':'root', 'PASSWORD':'123456', 'HOST':'', 'PORT':'', &#125;&#125; 设置模版文件夹TEMPLATES = [ &#123; 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR,'templates')], 'APP_DIRS': True, 'OPTIONS': &#123; 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], 'builtins': [ # Add this section "debugtools.templatetags.debugtools_tags", # Add this line ], &#125;, &#125;,] 前端模版渲染获取变量值&#123;&#123; key &#125;&#125; 判断是否存在&#123;% if not key3 %&#125; &lt;h1&gt;key3 value&lt;/h1&gt;&#123;% else %&#125; &lt;h1&gt;else&lt;/h1&gt;&#123;%endif%&#125; 判断是否相等&#123;% ifequal key3 'ok' %&#125; &lt;h1&gt;ok&lt;/h1&gt;&#123;%else%&#125; &lt;h1&gt;no ok&lt;/h1&gt;&#123;%endifequal%&#125; 循环&#123;% for item in item_list %&#125; &lt;li&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;&#123;%endfor%&#125; block块&#123;% block title %&#125;&#123;% endblock %&#125; 包含标签&#123;% include 'xxx.html'%&#125;&#123;% extends 'xxx.html' %&#125; 表单相关针对于HTML FROM表单 POST请求及跨域请求伪造&#123;%csrf_token%&#125; 按照原格式显示网页&#123;% |safe%&#125;]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cobbler_ldap配置]]></title>
    <url>%2FLinux%2F3154142427.html</url>
    <content type="text"><![CDATA[修改认证模式vim /etc/cobbler/modules.conf 配置ldapvim /etc/cobbler/settings 重启cobblerd服务[root@cobbler-1-250 ~]# service cobblerd restartStopping cobbler daemon: [确定]Starting cobbler daemon:]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Cobbler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装配置vncserver]]></title>
    <url>%2FLinux%2F2477200583.html</url>
    <content type="text"><![CDATA[1.安装vncserveryum -y install tigervnc-server 2.配置VNC Servercp /lib/systemd/system/vncserver@.service /lib/systemd/system/vncserver@:1.service 备注：vncserver@:1.service代表启动第一个vncserver服务器，端口为5900+1=5901，以此类推 2.1 指定用户vim /lib/systemd/system/vncserver@:1.service 2.2 更新systemctl来确保其生效systemctl daemon-reload 2.3 设置用户vnc的密码vncpasswd root/vncpasswd 2.4 启动该服务systemctl start vncserver@:1.service 2.5 设置开机自启动systemctl enable vncserver@:1.service 2.6 centos7修改主机名（永久生效）hostnamectl set-hostname xxx 使用这种方式修改，可以永久性的修改主机名称]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vncserver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[资产管理系统(未完待续)]]></title>
    <url>%2FDjango%2F3392313719.html</url>
    <content type="text"><![CDATA[:smile: Demo 数据库表结构# -*- coding: utf-8 -*-from __future__ import unicode_literalsfrom django.db import modelsfrom datetime import datetime# Create your models here.HD_INTERFACE = ( ('SSD', 'SSD'), ('SAS', 'SAS'), ('SATA', 'SATA'),)MEM_INTERFACE = ( ('DDR3', 'DDR3'), ('DDR4', 'DDR4'), ('Unknown', 'Unknown'))STATUS = ( ('1', '使用中'), ('2', '未使用'), ('3', '故障'), ('4', '报废'), ('5', '其他'))OS_TYPE = ( ('Linux', 'Linux'), ('Windows', 'Windows'), ('Other', 'Other'),)AUTH_TYPE = ( ('PWD', '密码认证'), ('KEY', '密钥认证'))# 定义服务器认证信息class AuthInfo(models.Model): auth_type = models.CharField(max_length=10, choices=AUTH_TYPE, default='PWD', verbose_name='认证类型') user = models.CharField(max_length=128, verbose_name='认证用户') pwd = models.CharField(max_length=128, verbose_name='认证密码', null=True, blank=True) add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = '认证信息' verbose_name_plural = verbose_name def __str__(self): return self.user + '-' + self.auth_typeclass HardDiskInfo(models.Model): ''' 物理磁盘信息 ''' wwn = models.CharField(max_length=100, verbose_name='序列号', unique=True) model = models.CharField(max_length=100, verbose_name='硬盘型号') size = models.CharField(max_length=100, verbose_name='硬盘大小') slot = models.CharField(max_length=2, verbose_name='插槽位置') interface = models.CharField(max_length=10, choices=HD_INTERFACE, verbose_name='接口类型') manufacturer = models.CharField(max_length=100, verbose_name='硬盘厂商') host = models.ForeignKey('PhysicalHostInfo', verbose_name='关联主机', null=True, blank=True) class Meta: verbose_name = '硬盘信息' verbose_name_plural = verbose_name def __str__(self): return self.wwnclass MemoryInfo(models.Model): ''' 内存信息 ''' sn = models.CharField(max_length=100, verbose_name='序列号', unique=True) size = models.CharField(max_length=100, verbose_name='内存大小') slot = models.CharField(max_length=10, verbose_name='插槽位置') interface = models.CharField(max_length=20, choices=MEM_INTERFACE, verbose_name='接口类型') speed = models.CharField(max_length=100, verbose_name='内存频率') manufacturer = models.CharField(max_length=100, verbose_name='内存厂商') voltage = models.CharField(max_length=100, verbose_name='内存电压', null=True, blank=True) host = models.ForeignKey('PhysicalHostInfo', verbose_name='关联主机', null=True, blank=True) class Meta: verbose_name = '内存信息' verbose_name_plural = verbose_name def __str__(self): return self.snclass NetworkInfo(models.Model): ''' 网络信息 ''' name = models.CharField(max_length=100, verbose_name='网卡名称', null=True, blank=True) mac = models.CharField(max_length=48, verbose_name='网卡地址', null=True, blank=True) ip = models.GenericIPAddressField(verbose_name='IP地址', unique=True) mask = models.GenericIPAddressField(verbose_name='子网掩码', null=True, blank=True) gw = models.GenericIPAddressField(verbose_name='网关地址', null=True, blank=True) host = models.ForeignKey('PhysicalHostInfo', verbose_name='关联主机', null=True, blank=True) primary = models.BooleanField(default=False, verbose_name='默认地址') class Meta: verbose_name = '网络信息' verbose_name_plural = verbose_name def __str__(self): return self.host.sn + "-" + self.ipclass IdcInfo(models.Model): ''' 数据中心或机房信息 ''' name = models.CharField("机房名称", max_length=30, null=True) address = models.CharField("机房地址", max_length=100, null=True) tel = models.CharField("机房电话", max_length=30, null=True) contact = models.CharField("客户经理", max_length=30, null=True) contact_phone = models.CharField("移动电话", max_length=30, null=True) jigui = models.CharField("机柜信息", max_length=30, null=True) ip_range = models.CharField("IP范围", max_length=30, null=True) bandwidth = models.CharField("接入带宽", max_length=30, null=True) def __unicode__(self): return self.name class Meta: verbose_name = '机房管理' verbose_name_plural = '机房管理'class CabinetInfo(models.Model): ''' 机柜信息 ''' name = models.CharField(max_length=10, verbose_name='机柜名称') cab_lever = models.CharField(max_length=2, verbose_name=u'机器U数,1-10分别代表1~10层') class Meta: verbose_name = u'机柜信息表' verbose_name_plural = verbose_nameclass HostGroup(models.Model): ''' 主机组信息 ''' name = models.CharField("组名", max_length=30, unique=True) desc = models.CharField("描述", max_length=100, null=True, blank=True) class Meta: verbose_name = '属组管理' verbose_name_plural = '属组管理' def __unicode__(self): return self.nameclass PhysicalHostInfo(models.Model): ''' 物理主机信息 ''' brand = models.CharField(max_length=60, verbose_name='品牌', null=True, blank=True) model = models.CharField(max_length=60, verbose_name='型号', null=True, blank=True) sn = models.CharField(max_length=60, verbose_name='序列号', null=True, blank=True) status = models.CharField(max_length=10, choices=STATUS, verbose_name='使用状态') use_department = models.CharField(max_length=100, verbose_name='使用部门', null=True, blank=True) asset_no = models.CharField(max_length=60, verbose_name='资产编号', null=True, blank=True) idc = models.ForeignKey('IdcInfo', verbose_name='机房', null=True, blank=True) cabinet = models.ForeignKey('CabinetInfo', verbose_name='机柜', null=True, blank=True) warranty_time = models.DateField(verbose_name='质保时间', null=True, blank=True) group = models.ForeignKey('HostGroup', verbose_name='主机组', null=True, blank=True) os_type = models.CharField(max_length=10, choices=OS_TYPE, verbose_name='操作系统', null=True, blank=True) os = models.CharField(max_length=60, verbose_name='操作系统', null=True, blank=True) os_kernel = models.CharField(max_length=60, verbose_name='内核', null=True, blank=True) hostname = models.CharField(max_length=100, verbose_name='主机名', null=True, blank=True) manage_ip = models.CharField(max_length=60, verbose_name='管理IP', null=True, blank=True) raid_adp_name = models.CharField(max_length=100, verbose_name='控制器名称', null=True, blank=True) raid_adp_sn = models.CharField(max_length=100, verbose_name='控制器序列号', null=True, blank=True) raid_adp_cache_size = models.CharField(max_length=100, verbose_name='缓存大小', null=True, blank=True) cpu_no = models.CharField(max_length=10, verbose_name='数量', null=True, blank=True) cpu_brand = models.CharField(max_length=60, verbose_name='品牌', null=True, blank=True) cpu_model = models.CharField(max_length=60, verbose_name='型号', null=True, blank=True) cpu_core = models.CharField(max_length=60, verbose_name='核心数', null=True, blank=True) cpu_threads_per_core = models.CharField(max_length=60, verbose_name='线程数/核', null=True, blank=True) comment = models.TextField(verbose_name='备注信息', null=True, blank=True) auth_info = models.ForeignKey(AuthInfo, verbose_name='认证信息', null=True, blank=True) class Meta: verbose_name = u'物理服务器' verbose_name_plural = verbose_name def __unicode__(self): return self.sn def get_nets(self): return self.networkinfo_set.all() def get_default_ip(self): return self.networkinfo_set.get(primary=True).ip get_default_ip.short_description = '默认IP' # def get_cpus(self): # return self.cpuinfo_set.all().count()class VirtualHostInfo(models.Model): sn = models.CharField(max_length=60, verbose_name='序列号') status = models.CharField(max_length=10, choices=STATUS, verbose_name='使用状态') use_department = models.CharField(max_length=100, verbose_name='使用部门') group = models.ForeignKey('HostGroup', verbose_name='主机组') os_type = models.CharField(max_length=10, choices=OS_TYPE, verbose_name='操作系统') os = models.CharField(max_length=60, verbose_name='操作系统') os_kernel = models.CharField(max_length=60, verbose_name='内核') hostname = models.CharField(max_length=100, verbose_name='主机名') cpu_no = models.CharField(max_length=10, verbose_name='数量') phy = models.ForeignKey('PhysicalHostInfo', verbose_name='宿主机信息') mem = models.ForeignKey('MemoryInfo', verbose_name='内存信息') hd = models.ForeignKey('HardDiskInfo', verbose_name='硬盘信息') net = models.ForeignKey('NetworkInfo', verbose_name='网络信息') comment = models.TextField(verbose_name='备注信息') class Meta: verbose_name = u'虚拟服务器' verbose_name_plural = verbose_name def __unicode__(self): return self.hostname 获取资产信息# -*- coding:utf-8 -*-__author__ = 'jianhu.yong'__date__ = '19-4-10 下午4:48'import osfrom ansible import constantsfrom collections import namedtuplefrom ansible.parsing.dataloader import DataLoaderfrom ansible.playbook.play import Playfrom ansible.executor.task_queue_manager import TaskQueueManagerfrom ansible.executor.playbook_executor import PlaybookExecutorfrom ansible.plugins.callback import CallbackBasefrom ansible.inventory.manager import InventoryManagerfrom ansible.vars.manager import VariableManagerfrom ansible.inventory.host import Host, Groupfrom cmdb.settings import BASE_DIRfrom cmdb.settings import SSH_PRIVATE_KEY_FILE, SSH_USERfrom asset.models import PhysicalHostInfo, NetworkInfo, MemoryInfo, HardDiskInfofrom datetime import datetimeimport hashlibclass ModelResultsCollector(CallbackBase): def __init__(self, sn, *args, **kwargs): super(ModelResultsCollector, self).__init__(*args, **kwargs) self.host_ok = &#123;&#125; self.host_unreachable = &#123;&#125; self.host_failed = &#123;&#125; self.sn = sn def v2_runner_on_unreachable(self, result): self.host_unreachable[result._host.get_name()] = result def v2_runner_on_ok(self, result, *args, **kwargs): self.host_ok[result._host.get_name()] = result task_name = result.task_name if task_name == 'setup': host = result._host.name facts = result._result.get('ansible_facts') if facts: product_serial = facts.get('ansible_product_serial', 'NA') if product_serial != 'NA' and 'VMware' in product_serial: virtual_type = 'vmware' elif product_serial != 'NA': virtual_type = 'physical' else: virtual_type = facts.get('facter_virtual', 'NA') self.sn_new = product_serial obj, status = PhysicalHostInfo.objects.get_or_create(sn=product_serial) obj.brand = facts.get('ansible_system_vendor') obj.model = facts.get('ansible_product_name') # 获取操作系统信息 obj.os_type = facts.get('ansible_system') obj.os = facts.get('ansible_distribution') obj.os_kernel = facts.get('ansible_kernel') obj.hostname = facts.get('ansible_nodename') obj.save() # 获取CPU信息 cpu_no = facts.get('ansible_processor_count') cpu_model = facts.get('ansible_processor')[-1] cpu_brand = facts.get('ansible_processor')[-2] cpu_core = facts.get('ansible_processor_cores') cpu_threads_per_core = facts.get('ansible_processor_threads_per_core') obj.cpu_no = cpu_no obj.cpu_model = cpu_model obj.cpu_brand = cpu_brand obj.cpu_core = cpu_core obj.cpu_threads_per_core = cpu_threads_per_core obj.save() # 获取网络信息 interfaces_info = &#123;&#125; valid_interfaces = [] interfaces = facts.get('ansible_interfaces') if 'lo' in interfaces: interfaces.remove('lo') if 'w1g1' in interfaces: interfaces.remove('w1g1') for interface in interfaces: if not interface.startswith('vir'): valid_interfaces.append(interface) default_interface = facts.get('ansible_default_ipv4').get('interface') default_gw = facts.get('ansible_default_ipv4').get('gateway') for interface in valid_interfaces: interface_info = facts.get('ansible_&#123;&#125;'.format(interface)) if not interface_info.get('active'): continue if interface_info.has_key('ipv4'): address = interface_info.get('ipv4').get('address') netmask = interface_info.get('ipv4').get('netmask') else: address = None netmask = None macaddress = interface_info.get('macaddress') if interface == default_interface: primary = True gateway = default_gw else: primary = False gateway = None interfaces_info[interface] = dict( address=address, netmask=netmask, macaddress= macaddress, primary=primary, gateway=gateway ) ip_list = [] for k, v in interfaces_info.items(): if v.get('primary'): net_ins, status = NetworkInfo.objects.get_or_create(primary=True,ip=v.get('address')) net_ins.primary = True else: if not v.get('address'): continue net_ins, status = NetworkInfo.objects.get_or_create(primary=False, ip=v.get('address')) net_ins.primary = False ip_list.append(v.get('address')) net_ins.name = k net_ins.mac = v.get('macaddress') if v.get('address'): net_ins.ip = v.get('address') net_ins.mask = v.get('netmask') net_ins.gw = v.get('gateway', None) net_ins.host = obj net_ins.save() net_ins = NetworkInfo.objects.filter(host_id=obj.id, primary=False).exclude(ip__in=ip_list) if net_ins: net_ins.delete() """ 针对虚拟机和无法获取序列号的物理机做特殊处理 1、vmware虚拟机有序列号，但是太长，无意义 2、kvm虚拟机无序列号 3、少数物理机无法正常获取序列号，需要手工维护 """ if virtual_type == 'physical' and product_serial != 'NA': # 物理机能正常获取到序列号的情况 obj.product_serial = product_serial elif virtual_type != 'physical': # 虚拟机 obj.product_serial = "&#123;0&#125;-&#123;1&#125;".format(virtual_type, host) else: # 物理机无法正常获取产品序列号，需要手动更新 pass obj.save() elif task_name == 'mem': mem_info = [] result = result._result.get('stdout').split('\n\n') for i in result: if not i.startswith('Handle'): continue tmp = i.split('\n\t') mem_dict = &#123;&#125; for j in tmp: if ':' not in j: continue else: k,v = j.split(':') mem_dict[k.strip()] = v.strip() mem_info.append(mem_dict) if self.sn == self.sn_new: obj, status = PhysicalHostInfo.objects.get_or_create(sn=self.sn) else: obj, status = PhysicalHostInfo.objects.get_or_create(sn=self.sn_new) sn_list = [] for i in mem_info: if i.has_key('Size') and i.get('Size').endswith('MB'): size = i.get('Size', 'Unknown') slot = i.get('Locator', 'Unknown') interface = i.get('Type', 'Unknown') speed = i.get('Speed', 'Unknown') manufacturer = i.get('Manufacturer', 'Unknown') sn = i.get('Serial Number', None) if not sn or sn == 'None': h = hashlib.md5() h.update(obj.sn+slot) sn = h.hexdigest() sn_list.append(sn) voltage = i.get('Configured Voltage', 'Unknown') mem_ins, status = MemoryInfo.objects.get_or_create(sn=sn) mem_ins.sn = sn mem_ins.size = size mem_ins.slot = slot mem_ins.interface = interface mem_ins.speed = speed mem_ins.manufacturer = manufacturer mem_ins.voltage = voltage mem_ins.host = obj mem_ins.save() mem_ins = MemoryInfo.objects.filter(host_id=obj.id).exclude(sn__in=sn_list) if mem_ins: mem_ins.delete() elif task_name == 'hd': if self.sn == self.sn_new: obj, status = PhysicalHostInfo.objects.get_or_create(sn=self.sn) else: obj, status = PhysicalHostInfo.objects.get_or_create(sn=self.sn_new) result = result._result.get('stdout') import re raid_adp_name = re.search('Product Name:.+', result).group().split(':')[-1].strip() raid_adp_sn = re.search('Serial No:.+', result).group().split(':')[-1].strip() raid_adp_cache_size = re.search('Memory:.+', result).group().split(':')[-1].strip() obj.raid_adp_name = raid_adp_name obj.raid_adp_sn = raid_adp_sn obj.raid_adp_cache_size = raid_adp_cache_size obj.save() s = re.search('Physical Disk:.+alert : No', result, flags=re.DOTALL).group() hd_info = s.split('\n\n\n\n') wwn_list = [] for hd in hd_info: slot = re.search('Slot Number:.+', hd).group().split(":")[-1].strip() wwn = re.search('WWN:.+', hd).group().split(":")[-1].strip() interface = re.search('PD Type:.+', hd).group().split(":")[-1].strip() size = re.search('Raw Size:.+B', hd).group().split(":")[-1].strip() manufacturer = re.search('Inquiry Data.+', hd).group().split(":")[-1].split()[0].strip() model = re.search('Inquiry Data.+', hd).group().split(":")[-1].split()[1].strip() wwn_list.append(wwn) hd_ins, status = HardDiskInfo.objects.get_or_create(wwn=wwn) hd_ins.slot = slot hd_ins.wwn = wwn hd_ins.interface = interface hd_ins.size = size hd_ins.manufacturer = manufacturer hd_ins.model = model hd_ins.host = obj hd_ins.save() hd_ins = HardDiskInfo.objects.filter(host_id=obj.id).exclude(wwn__in=wwn_list) if hd_ins: hd_ins.delete() pass def v2_runner_on_failed(self, result, *args, **kwargs): self.host_failed[result._host.get_name()] = resultclass PlayBookResultsCollector(CallbackBase): CALLBACK_VERSION = 2.0 def __init__(self, *args, **kwargs): super(PlayBookResultsCollector, self).__init__(*args, **kwargs) self.task_ok = &#123;&#125; self.task_skipped = &#123;&#125; self.task_failed = &#123;&#125; self.task_status = &#123;&#125; self.task_unreachable = &#123;&#125; def v2_runner_on_ok(self, result, *args, **kwargs): self.task_ok[result._host.get_name()] = result def v2_runner_on_failed(self, result, *args, **kwargs): self.task_failed[result._host.get_name()] = result def v2_runner_on_unreachable(self, result): self.task_unreachable[result._host.get_name()] = result def v2_runner_on_skipped(self, result): self.task_ok[result._host.get_name()] = result def v2_playbook_on_stats(self, stats): hosts = sorted(stats.processed.keys()) for h in hosts: t = stats.summarize(h) self.task_status[h] = &#123; "ok":t['ok'], "changed" : t['changed'], "unreachable":t['unreachable'], "skipped":t['skipped'], "failed":t['failures'] &#125;class CustomInventory(object): def __init__(self, resource, auth_type): self.resource = resource self.auth_type = auth_type self.loader = DataLoader() self.inventory = InventoryManager(loader=self.loader, sources=[os.path.join(BASE_DIR, 'conf/inventory.conf')]) # self.variable_manager.set_inventory(self.inventory) self.variable_manager = VariableManager(loader=self.loader, inventory=self.inventory) self.dynamic_inventory() def dynamic_inventory(self): ''' 添加主机信息 ''' if isinstance(self.resource, list): if self.auth_type == 'pwd_login': self.add_dynamic_group(self.resource, self.auth_type) elif self.auth_type == 'key_login': self.add_dynamic_group(self.resource, self.auth_type) elif isinstance(self.resource, dict): for groupname, hosts in self.resource.iteritems(): self.add_dynamic_group(hosts, groupname) def add_dynamic_group(self, hosts, group_name, groupvars=None): """ 添加主机信息 """ if not self.inventory.groups.get(group_name, ''): self.inventory.add_group(group_name) group_ins = Group(name=group_name) # if group variables exists, add them to group if groupvars: for key, value in groupvars.iteritems(): group_ins.set_variable(key, value) # add hosts to group for host in hosts: self.inventory.add_host(host=host,group=group_name)class ANSRunner(object): """ This is a General object for parallel execute modules. """ def __init__(self, auth_type, resource, *args, **kwargs): self.loader = None self.inventory = None self.variable_manager = None self.resource = resource self.options = None self.passwords = None self.callback = None self.results_raw = &#123;&#125; self.auth_type = auth_type self.__initializeData() self.sn = kwargs.get('sn') def __initializeData(self): ''' 初始化ansible ''' self.loader = DataLoader() Options = namedtuple('Options', ['connection', 'module_path', 'forks', 'timeout', 'remote_user', 'ask_pass', 'private_key_file', 'ssh_common_args', 'ssh_extra_args', 'sftp_extra_args', 'scp_extra_args', 'become', 'become_method', 'become_user', 'ask_value_pass', 'verbosity', 'check', 'listhosts', 'listtasks', 'listtags', 'syntax','diff']) if self.auth_type == 'pwd_login': ask_pass = True ask_value_pass = True remote_user = 'root' private_key_file = None if self.auth_type == 'key_login': ask_pass = False ask_value_pass = False remote_user = SSH_USER private_key_file = SSH_PRIVATE_KEY_FILE self.options = Options(connection='smart', module_path=None, forks=2, timeout=10, remote_user=remote_user, ask_pass=ask_pass, private_key_file=private_key_file, ssh_common_args=None, ssh_extra_args=None, sftp_extra_args=None, scp_extra_args=None, become=True, become_method="sudo", become_user="root", ask_value_pass=ask_value_pass, verbosity=None, check=False, listhosts=False, listtasks=False, listtags=False, syntax=False, diff=True) self.passwords = dict( conn_pass='xxxx', becomepass='xxxx' ) ci = CustomInventory(self.resource, self.auth_type) self.inventory = ci.inventory self.variable_manager = ci.variable_manager pass def run_model(self, host_list, module_name, module_args=None): """ run module from andible ad-hoc. module_name: ansible module_name module_args: ansible module args """ if module_args: play_source = dict( name="Ansible Play", hosts=host_list, gather_facts='no', tasks=[ dict(action=dict(module='setup')), dict(action=dict(module='shell', args='/usr/sbin/dmidecode -t memory')), ] ) else: play_source = dict( name="Ansible Play", hosts=host_list, gather_facts='no', tasks=[ dict(action=dict(module='setup'), name="setup"), dict(action=dict(module='shell', args='/usr/sbin/dmidecode -t memory'), name='mem'), dict(action=dict(module='shell', args='/opt/MegaRAID/MegaCli/MegaCli64 -cfgdsply -aALL -NoLog'), name='hd') ] ) play = Play().load(play_source, variable_manager=self.variable_manager, loader=self.loader) tqm = None self.callback = ModelResultsCollector(sn=self.sn) import traceback try: tqm = TaskQueueManager( inventory=self.inventory, variable_manager=self.variable_manager, loader=self.loader, options=self.options, passwords=self.passwords, stdout_callback = "minimal", ) tqm._stdout_callback = self.callback constants.HOST_KEY_CHECKING = False #关闭第一次使用ansible连接客户端是输入命令 tqm.run(play) except Exception as err: print traceback.print_exc() # DsRedis.OpsAnsibleModel.lpush(self.redisKey,data=err) # if self.logId:AnsibleSaveResult.Model.insert(self.logId, err) finally: if tqm is not None: tqm.cleanup() def run_playbook(self, playbook_path,extra_vars=None): """ run ansible palybook """ try: # if self.redisKey:self.callback = PlayBookResultsCollectorToSave(self.redisKey,self.logId) self.callback = PlayBookResultsCollector() if extra_vars:self.variable_manager.extra_vars = extra_vars executor = PlaybookExecutor( playbooks=[playbook_path], inventory=self.inventory, variable_manager=self.variable_manager, loader=self.loader, options=self.options, passwords=self.passwords, ) executor._tqm._stdout_callback = self.callback constants.HOST_KEY_CHECKING = False #关闭第一次使用ansible连接客户端是输入命令 executor.run() except Exception as err: return False def get_model_result(self): self.results_raw = &#123;'success':&#123;&#125;, 'failed':&#123;&#125;, 'unreachable':&#123;&#125;&#125; for host, result in self.callback.host_ok.items(): hostvisiable = host.replace('.','_') self.results_raw['success'][hostvisiable] = result._result for host, result in self.callback.host_failed.items(): hostvisiable = host.replace('.','_') self.results_raw['failed'][hostvisiable] = result._result for host, result in self.callback.host_unreachable.items(): hostvisiable = host.replace('.','_') self.results_raw['unreachable'][hostvisiable]= result._result # return json.dumps(self.results_raw) return self.results_raw def get_playbook_result(self): self.results_raw = &#123;'skipped':&#123;&#125;, 'failed':&#123;&#125;, 'ok':&#123;&#125;,"status":&#123;&#125;,'unreachable':&#123;&#125;,"changed":&#123;&#125;&#125; for host, result in self.callback.task_ok.items(): self.results_raw['ok'][host] = result for host, result in self.callback.task_failed.items(): self.results_raw['failed'][host] = result for host, result in self.callback.task_status.items(): self.results_raw['status'][host] = result # for host, result in self.callback.task_changed.items(): # self.results_raw['changed'][host] = result for host, result in self.callback.task_skipped.items(): self.results_raw['skipped'][host] = result for host, result in self.callback.task_unreachable.items(): self.results_raw['unreachable'][host] = result return self.results_rawif __name__ == '__main__': # resource = [ # &#123;"hostname": "192.168.8.119"&#125;, # &#123;"hostname": "192.168.6.43"&#125;, # &#123;"hostname": "192.168.1.233"&#125;, # ] # resource = &#123; # "dynamic_host": &#123; # "hosts": [ # &#123;'username': u'root', 'password': '123456', 'ip': '192.168.1.108','hostname':'nginx01','port':'22'&#125;, # &#123;"hostname":"778da6afsdwf","ip": "192.168.1.109", "port": "22", "username": "root", "password":"123456"&#125;, # ], # "vars": &#123; # "var1":"ansible", # "var2":"saltstack" # &#125; # &#125; # &#125; resource = &#123; 'key_login': ['10.105.42.16'] &#125; rbt = ANSRunner(resource) # Ansible Adhoc rbt.run_model(host_list=resource['key_login'], module_name='setup') data = rbt.get_model_result() pass # Ansible playbook # rbt.run_playbook(playbook_path='/etc/ansible/playbook/OPUSE.yml') # print rbt.get_playbook_result() # rbt.run_model(host_list=[],module_name='yum',module_args="name=htop state=present")]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[域账号后台管理]]></title>
    <url>%2FDjango%2F3844096452.html</url>
    <content type="text"><![CDATA[开始之前部署方式注意事项 主要用于用户、共享目录，邮箱组权限等日常管理 基于pyad模块(https://github.com/zakird/pyad) 支持邮件通知及批量操作 LDAP登录(仅限CN Infrastructure Team &amp;&amp; CN Development Team登录后台,域账号登录) 后台地址：http://xx.xx.genewiz.com/admin 部署于10.105.xx.xx,应用对AD Server进行操作！ Windows下的Apache无法通过daemon模式运行多个wsgi应用，故通过Django dev模式运行，通过Apache转发！(或者单独在另外一台Windows服务器单独部署) \\GWNGFS\xx\Dev\AdminSet 用户的全局管理未收敛至统一管理，为确保用户信息的准确性，对用户进行任何变更，请先更新用户信息！ 账号管理更新账号信息更新组信息账号启用账号禁用账号禁用-离职账号解锁账号VPN启用账号VPN禁用账号密码重置账号密码重置【登录需要修改密码】初次添加 点击保存按钮后，将会自动更新用户及用户属组信息！ 已存在 如果账号已添加过，可以勾选用户，更新用户最新的用户信息，支持批量！ def update_user(self, user): “””更新用户信息””” dn = adsearch.by_san(user) user_from_ad = aduser.ADUser.from_dn(dn) guid = user_from_ad.guid_str sid = str(user_from_ad.sid).split(“:”)[-1] san = user_from_ad.get_attribute(‘SamAccountName’, False) “””if user has not email,will take AttributeError””” try: email = user_from_ad.get_attribute(‘mail’, False).lower() except AttributeError: email = None create_time = parse(user_from_ad.get_attribute(‘whenCreated’,False).Format()) “”” if user never modify password,will take ValueError!””” try: pwd_last_set_time = user_from_ad.get_password_last_set() except ValueError: pwd_last_set_time = None “”” if user never login,will take AttributeError””” try: last_login_time = user_from_ad.get_last_login() except AttributeError: last_login_time = None uac = user_from_ad.get_user_account_control_settings() is_enabled = not uac[‘ACCOUNTDISABLE’] is_locked_out = uac[‘LOCKOUT’] is_dial_in = user_from_ad.get_attribute(‘msNPAllowDialin’, False) if is_dial_in is None: is_dial_in = False userobj, status = UserProfile.objects.get_or_create(username=user) userobj.dn = dn userobj.guid = guid userobj.sid = sid userobj.san = san userobj.email = email userobj.pwd_last_set_time = pwd_last_set_time userobj.create_time = create_time userobj.last_login_time = last_login_time userobj.is_enabled = is_enabled userobj.is_locked_out = is_locked_out userobj.is_dial_in = is_dial_in userobj.save() try: groups = user_from_ad.get_memberOfs() except Exception as e: return groups_from_ad = [] groups_from_db = [] for group in groups: san = group.get_attribute(‘SamAccountName’, False) guid = group.guid_str sid = str(group.sid).split(“:”)[-1] gc = group.get_group_type() gs = group.get_group_scope() dn = group.dn create_time = parse(group.get_attribute(‘whenCreated’, False).Format()) groupobj, status = GroupProfile.objects.get_or_create(san=san) groupobj.san = san groupobj.guid = guid groupobj.sid = sid groupobj.gc = gc groupobj.gs = gs groupobj.dn = dn groupobj.create_time = create_time groupobj.save() groups_from_ad.append(san) for group in userobj.groups_of.all(): san = group.san groups_from_db.append(san) intersection = set(groups_from_ad) &amp; set(groups_from_db) if intersection: for group in list(set(groups_from_db) - intersection): userobj.groups_of.remove(GroupProfile.objects.get(san=group)) for group in list(set(groups_from_ad) - intersection): userobj.groups_of.add(GroupProfile.objects.get(san=group)) else: userobj.groups_of.clear() for group in groups_from_ad: userobj.groups_of.add(GroupProfile.objects.get(san=group))初次添加 点击保存按钮后，将会自动更新用户及用户属组信息！ 已存在 如果账号已添加过，可以勾选用户，更新用户最新的用户信息，支持批量！ def update_group(self, group): “””更新组信息””” dn = adsearch.by_san(group) group_from_ad = adgroup.ADGroup.from_dn(dn) san = group_from_ad.get_attribute(‘SamAccountName’, False) guid = group_from_ad.guid_str sid = str(group_from_ad.sid).split(“:”)[-1] gc = group_from_ad.get_group_type() gs = group_from_ad.get_group_scope() dn = group_from_ad.dn create_time = parse(group_from_ad.get_attribute(‘whenCreated’, False).Format()) groupobj, status = GroupProfile.objects.get_or_create(san=group) groupobj.san = san groupobj.guid = guid groupobj.sid = sid groupobj.gc = gc groupobj.gs = gs groupobj.dn = dn groupobj.create_time = create_time groupobj.save() def enabled_user(self, obj_list): “””启用用户””” res = &#123; ‘enabled_success’: [], ‘enabled_failer’: [] &#125; for obj in obj_list: user_from_ad = aduser.ADUser.from_dn(obj.dn) try: user_from_ad.enable() res[‘enabled_success’].append(obj) except Exception as e: res[‘enabled_failer’].append(obj) return resdef disabled_user(self, obj_list): “””禁用用户””” res = &#123; ‘disabled_success’: [], ‘disabled_failer’: [] &#125; for obj in obj_list: user_from_ad = aduser.ADUser.from_dn(obj.dn) try: user_from_ad.disable() res[‘disabled_success’].append(obj) except Exception as e: res[‘disabled_failer’].append(obj) return resdef disabled_user_lizhi(self, obj_list): “””禁用用户-离职””” res = &#123; ‘disabled_success’: [], ‘disabled_failer’: [] &#125; for obj in obj_list: user_from_ad = aduser.ADUser.from_dn(obj.dn) ou = adcontainer.ADContainer.from_dn(“OU=China,OU=DisabledAccounts,DC=local,DC=genewiz,DC=com”) try: user_from_ad.disable() “”” move操作，需要全局AD控制器，需要使用苏州域控制器 pyad.set_defaults(ldap_server=”10.105.21.20”, username=”jianhu.yong”, password=”xxx”) “”” user_from_ad.move(ou) res[‘disabled_success’].append(obj) except Exception as e: res[‘disabled_failer’].append(obj) return resdef unlock_user(self, obj_list): “”” 解锁用户 lockoutTime: 0 “”” res = &#123; ‘unlock_success’: [], ‘unlock_failer’: [] &#125; for obj in obj_list: user_from_ad = aduser.ADUser.from_dn(obj.dn) try: user_from_ad.update_attribute(‘lockoutTime’, 0) res[‘unlock_success’].append(obj) except Exception as e: res[‘unlock_failer’].append(obj) return res def enabled_vpn(self, obj_list): “”” 启用VPN Enabled: True Disabled: False Not Set: None “”” res = &#123; ‘enabled_success’: [], ‘enabled_failer’: [] &#125; for obj in obj_list: user_from_ad = aduser.ADUser.from_dn(obj.dn) try: user_from_ad.update_attribute(‘msNPAllowDialin’, True) res[‘enabled_success’].append(obj) except Exception as e: res[‘enabled_failer’].append(obj) return resdef disabled_vpn(self, obj_list): “”” 禁用VPN Enabled: True Disabled: False Not Set: None “”” res = &#123; ‘disabled_success’: [], ‘disabled_failer’: [] &#125; for obj in obj_list: user_from_ad = aduser.ADUser.from_dn(obj.dn) try: user_from_ad.update_attribute(‘msNPAllowDialin’, False) res[‘disabled_success’].append(obj) except Exception as e: res[‘disabled_failer’].append(obj) return resdef reset_password(self, obj_list, init_pwd): “”” 重置用户密码 “”” res = &#123; ‘reset_success’: [], ‘reset_failer’: [] &#125; for obj in obj_list: user_from_ad = aduser.ADUser.from_dn(obj.dn) try: user_from_ad.set_password(init_pwd) res[‘reset_success’].append(obj) except Exception as e: res[‘reset_failer’].append(obj) return res def reset_password_login_modify(self, obj_list, init_pwd): “”” 重置用户密码,如果用户密码设置了永不过期，登录修改密码将不会生效! “”” res = &#123; ‘reset_success’: [], ‘reset_failer’: [] &#125; for obj in obj_list: user_from_ad = aduser.ADUser.from_dn(obj.dn) try: user_from_ad.set_password(init_pwd) user_from_ad.force_pwd_change_on_login() res[‘reset_success’].append(obj) except Exception as e: res[‘reset_failer’].append(obj) return res 权限管理共享目录权限邮箱组权限分别新增共享目录（二级目录）只读及读写的信息！ def add_members_to_smb(self, dn, smb_folders): “””更新组成员信息””” user1 = aduser.ADUser.from_dn(dn) res = &#123; ‘user_to_group_added’: [], ‘user_to_group_new’: [] &#125; for smb_folder in smb_folders: group_object = adgroup.ADGroup.from_dn(smb_folder.group.dn) if not user1.is_member_of(group_object): group_object.add_members(user1) res[‘user_to_group_new’].append(smb_folder) else: res[‘user_to_group_added’].append(smb_folder) return res def del_members_from_smb(self, dn, smb_folders): “””更新组成员信息””” user1 = aduser.ADUser.from_dn(dn) res = &#123; ‘user_to_group_deleted’: [], ‘user_to_group_new’: [] &#125; for smb_folder in smb_folders: group_object = adgroup.ADGroup.from_dn(smb_folder.group.dn) if user1.is_member_of(group_object): group_object.remove_members(user1) res[‘user_to_group_new’].append(smb_folder) else: res[‘user_to_group_deleted’].append(smb_folder) return res def add_members_to_eg(self, dn, enabled_egs): “””更新组成员信息””” user1 = aduser.ADUser.from_dn(dn) res = &#123; ‘user_to_group_added’: [], ‘user_to_group_new’: [] &#125; for enabled_eg in enabled_egs: group_object = adgroup.ADGroup.from_dn(enabled_eg.dn) if not user1.is_member_of(group_object): group_object.add_members(user1) res[‘user_to_group_new’].append(enabled_eg) else: res[‘user_to_group_added’].append(enabled_eg) return res def del_members_from_eg(self, dn, disabled_egs): “””更新组成员信息””” user1 = aduser.ADUser.from_dn(dn) res = &#123; ‘user_to_group_deleted’: [], ‘user_to_group_new’: [] &#125; for disabled_eg in disabled_egs: group_object = adgroup.ADGroup.from_dn(disabled_eg.dn) if user1.is_member_of(group_object): group_object.remove_members(user1) res[‘user_to_group_new’].append(disabled_eg) else: res[‘user_to_group_deleted’].append(disabled_eg) return res 通讯录管理通讯录]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实验室上机CODE自动化]]></title>
    <url>%2Funcategorized%2F4043802563.html</url>
    <content type="text"><![CDATA[背景官方仅提供code脚本，需要ssh至集群登陆节点，执行该code脚本，来生成上机code,对于实验室人员操作，不是很方便！ 优化 CODEfrom django.shortcuts import render, HttpResponsefrom datetime import datetimefrom django.views.generic.base import Viewfrom .models import Company, Level, DataPath, DistributePath, Owner, Group, Device, ProjectInfofrom .forms import RegisterFormfrom utils.GenerateNumber import gene_random_numberimport jsonimport timefrom utils.ansible_api_adhoc import ANSRunnerfrom utils.email_send import SendMail# Create your views here.class LabIndexView(View): def get(self, request): current_year = datetime.now().year all_companys = Company.objects.exclude(name='root') all_levels = Level.objects.all() all_data_paths = DataPath.objects.all() all_distribute_paths = DistributePath.objects.all() all_owners = Owner.objects.all() all_groups = Group.objects.all() all_devices = Device.objects.all() return render(request, "lab-index.html", &#123; 'current_year': current_year, 'all_companys': all_companys, 'all_levels': all_levels, 'all_data_paths': all_data_paths, 'all_distribute_paths': all_distribute_paths, 'all_owners': all_owners, 'all_groups': all_groups, 'all_devices': all_devices &#125;) def post(self, request): current_year = datetime.now().year register_form = RegisterForm(request.POST) if register_form.is_valid(): if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] company = request.POST.get('company', '') level = request.POST.get('level', '') data_path = request.POST.get('data_path', '') distribute_path = request.POST.get('distribute_path', '') owner = request.POST.get('owner', '') group = request.POST.get('group', '') device = request.POST.get('device', '') code = gene_random_number() info_join = [] for i in code, company, level, distribute_path, owner, group, device, data_path: info_join.append(i) info_join = ','.join(info_join) # /YZGROUP/read/read.txt job = ANSRunner() job.run_model(host_list='20.0.0.10', module_name='shell', module_args='echo &#123;0&#125; &gt;&gt; /YZGROUP/read/.&#123;1&#125;.sortlog'.format(info_join, code)) res = job.get_model_result() if res['success']: data = &#123; 'company': company, 'level': level, 'data_path': data_path, 'distribute_path': distribute_path, 'owner': owner, 'group': group, 'device': device, 'code': code, 'email': ['sen.guo@genewiz.com.cn','fang.xiao@genewiz.com.cn','ruikai.jia@genewiz.com.cn','jianhu.yong@genewiz.com.cn'], #'email': ['zongliang.guo@geneseeq.com', '453576956@qq.com'], 'ip': ip, 'current_year': current_year &#125; if SendMail(data, send_type='lab_code'): ProjectInfo.objects.create( number=code, company=Company.objects.get(name=company), level=Level.objects.get(name=level), distribute_path=DistributePath.objects.get(path=distribute_path), owner=Owner.objects.get(name=owner), group=Group.objects.get(name=group), device=Device.objects.get(type=device), data_path=DataPath.objects.get(path=data_path) ) return render(request, 'lab-success.html', &#123; 'status': 'success', 'company': company, 'level': level, 'data_path': data_path, 'distribute_path': distribute_path, 'owner': owner, 'group': group, 'device': device, 'code': code, 'ip': ip, 'time': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), 'current_year': current_year &#125;) else: return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: return HttpResponse(json.dumps(register_form.errors, indent=4, ensure_ascii=False), content_type='application/json')]]></content>
  </entry>
  <entry>
    <title><![CDATA[集群HTTP代理]]></title>
    <url>%2FDjango%2F776286004.html</url>
    <content type="text"><![CDATA[背景目前扬子科创集群均无法访问互联网，在未联网的情况下，软件安装，维护效率低下，为了解决该问题，将部署二级代理! 登录节点明细 HOSTNAME IP njlogin01.yzgroup.local 20.0.0.10/192.168.89.214 njgate01.yzgroup.local 192.168.89.212 扬子科创集群网段经检查，集群计算机点网段分布如下： 192.168.88.0/2310.2.150.0/23 gost软件介绍https://docs.ginuerzh.xyz/gost/getting-started/ 代理部署架构 查看详情 使用# 终端下临时配置代理export http_proxy=http://192.168.89.214:8090export https_proxy=http://192.168.89.214:8090# 取消设置unset http_proxyunset https_proxy # 写入配置文件，永久生效cat &lt;&lt; EOF &gt;&gt; ~/.bash_profileexport http_proxy=http://192.168.89.214:8090export https_proxy=http://192.168.89.214:8090EOF Ansible Hosts[proxy-jumpbox]10.105.42.23 ansible_ssh_user=jianhu.yong ansible_ssh_private_key_file='/opt/keys/id_rsa_2048_jianhu.yong' ansible_become=true ansible_become_user=root ansible_become_method=sudo[proxy-yzkc]20.0.0.10 ansible_ssh_user=genewiznj ansible_ssh_private_key_file='/opt/keys/id_rsa_genewiznj' ansible_remote_tmp='/tmp/.ansible/tmp' CODEclass ProxyIndexView(View): def get(self, request): current_year = datetime.now().year proxy_ip = ['10.105.42.23','20.0.0.10'] proxy_status = &#123;&#125; for ip in proxy_ip: job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(ip), module_name='shell', module_args='netstat -anptul|grep 8090') res = job.get_model_result() if res['success']: proxy_status[ip] = 'Running' else: proxy_status[ip] = 'Stopped' return render(request, "proxy-index.html", &#123; 'current_year': current_year, 'level1': proxy_status['10.105.42.23'], 'level2': proxy_status['20.0.0.10'] &#125;) def post(self, request): proxy_ip = request.POST.get('proxy_ip','') action = request.POST.get('action','') level = int(request.POST.get('level', '')) if level == 1: if action == 'start': job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='netstat -anptul|grep 8090') res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Has Running', 'msg': '代理服务器已运行，操作无效！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='cd /opt/genewiznj/gost/ &amp;&amp; nohup ./gost -C gost.json &amp;&gt; /dev/null &amp;') res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Running', 'msg': '代理服务启动成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') elif action == 'stop': job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='netstat -anptul|grep 8090') res = job.get_model_result() if res['success']: job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args="ps -ef|grep gost|grep -v grep|awk '&#123;print $2&#125;'|xargs kill -9") res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Stopped', 'msg': '代理服务停止成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: res.update(&#123;'status': 'Has Stopped', 'msg': '代理服务已停止，操作无效！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') elif action == 'restart': job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='netstat -anptul|grep 8090') res = job.get_model_result() if res['success']: job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args="ps -ef|grep gost|grep -v grep|awk '&#123;print $2&#125;'|xargs kill -9 &amp;&amp; cd /opt/genewiznj/gost/ &amp;&amp; nohup ./gost -C gost.json &amp;&gt; /dev/null &amp;") res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Restarted', 'msg': '代理服务重启成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='cd /opt/genewiznj/gost/ &amp;&amp; nohup ./gost -C gost.json &amp;&gt; /dev/null &amp;') res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Restarted', 'msg': '代理服务重启成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='curl -I -x &#123;0&#125;:8090 http://www.baidu.com'.format(proxy_ip)) res = job.get_model_result() if res['success']: res.update(&#123;'status': 'curl-success', 'msg': '代理服务测试成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: res.update(&#123;'status': 'curl-failer', 'msg': '代理服务测试失败！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') elif level == 2: if action == 'start': job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='netstat -anptul|grep 8090') res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Has Running', 'msg': '代理服务器已运行，操作无效！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='cd /YZGROUP/genewiz/public/app/gost-2.4/ &amp;&amp; nohup ./gost -C gost.json &amp;&gt; /dev/null &amp;') res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Running', 'msg': '代理服务启动成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') elif action == 'stop': job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='netstat -anptul|grep 8090') res = job.get_model_result() if res['success']: job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args="ps -ef|grep gost|grep -v grep|awk '&#123;print $2&#125;'|xargs kill -9") res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Stopped', 'msg': '代理服务停止成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: res.update(&#123;'status': 'Has Stopped', 'msg': '代理服务已停止，操作无效！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') elif action == 'restart': job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='netstat -anptul|grep 8090') res = job.get_model_result() if res['success']: job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args="ps -ef|grep gost|grep -v grep|awk '&#123;print $2&#125;'|xargs kill -9 &amp;&amp; cd /YZGROUP/genewiz/public/app/gost-2.4/ &amp;&amp; nohup ./gost -C gost.json &amp;&gt; /dev/null &amp;") res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Restarted', 'msg': '代理服务重启成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='cd /YZGROUP/genewiz/public/app/gost-2.4/ &amp;&amp; nohup ./gost -C gost.json &amp;&gt; /dev/null &amp;') res = job.get_model_result() if res['success']: res.update(&#123;'status': 'Restarted', 'msg': '代理服务重启成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='curl -I -x &#123;0&#125;:8090 http://www.baidu.com'.format(proxy_ip)) res = job.get_model_result() if res['success']: res.update(&#123;'status': 'curl-success', 'msg': '代理服务测试成功！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: res.update(&#123;'status': 'curl-failer', 'msg': '代理服务测试失败！'&#125;) return HttpResponse(json.dumps(res, indent=4), content_type='application/json')class ProxyStatusView(View): def get(self, request): current_year = datetime.now().year proxy_ip = request.GET.get('proxy_ip','') job = ANSRunner() job.run_model(host_list='&#123;0&#125;'.format(proxy_ip), module_name='shell', module_args='netstat -anptul|grep 8090') res = job.get_model_result() return HttpResponse(json.dumps(res, indent=4), content_type='application/json') Ajax&lt;script&gt; $(function () &#123; // initHighlightingOnLoad $('pre code').each(function(i, block) &#123; $(this).parent().addClass('hljs') hljs.highlightBlock(block); &#125;); function proxy(current_elem, proxy_ip, action,level)&#123; $.ajax(&#123; cache: false, type: "POST", url:"&#123;% url 'proxy:proxy_index' %&#125;", data:&#123;'proxy_ip':proxy_ip,'action':action,'level':level&#125;, async: true, beforeSend:function(xhr, settings)&#123; xhr.setRequestHeader("X-CSRFToken", "&#123;&#123; csrf_token &#125;&#125;"); &#125;, success: function(data) &#123; if(data.status === 'Has Running')&#123; layer.alert(data['msg'],&#123; skin: 'layui-layer-lan', closeBtn: 0, icon: 5 &#125;) &#125;else if(data.status === 'Running')&#123; layer.alert(data['msg'],&#123; skin: 'layui-layer-lan', closeBtn: 0, icon: 1 &#125;); console.log(current_elem.parents('tr').children('td:eq(5)').children('span').text('Running').removeClass().addClass('label label-success')) &#125;else if(data.status === 'Has Stopped')&#123; layer.alert(data['msg'],&#123; skin: 'layui-layer-lan', closeBtn: 0, icon: 5 &#125;) &#125;else if(data.status === 'Stopped')&#123; layer.alert(data['msg'],&#123; skin: 'layui-layer-lan', closeBtn: 0, icon: 1 &#125;); console.log(current_elem.parents('tr').children('td:eq(5)').children('span').text('Stopped').removeClass().addClass('label label-danger')) &#125;else if(data.status === 'Restarted')&#123; layer.alert(data['msg'],&#123; skin: 'layui-layer-lan', closeBtn: 0, icon: 1 &#125;); window.location.reload() &#125;else if(data.status === 'curl-success')&#123; layer.alert(data['msg'],&#123; skin: 'layui-layer-lan', closeBtn: 0, icon: 1 &#125;) &#125;else if(data.status ==='curl-failer')&#123; layer.alert(data['msg'],&#123; skin: 'layui-layer-lan', closeBtn: 0, icon: 5 &#125;); &#125; &#125; &#125;) &#125; // 启动一级代理服务 $('.start-proxy-one').click(function()&#123; var action = 'start'; var level = 1; var proxy_ip = $(this).parents('tr').children('td:eq(2)').text(); console.log(proxy_ip); console.log(this); proxy($(this),proxy_ip,action,level) &#125;); // 停止一级代理服务 $('.stop-proxy-one').click(function()&#123; layer.msg('正在停止代理服务,请稍候!', &#123;icon: 6&#125;); var action = 'stop'; var level = 1; var proxy_ip = $(this).parents('tr').children('td:eq(2)').text(); console.log(proxy_ip); console.log(this); proxy($(this),proxy_ip,action,level) &#125;); // 重启一级代理服务 $('.restart-proxy-one').click(function()&#123; var action = 'restart'; var level = 1; var proxy_ip = $(this).parents('tr').children('td:eq(2)').text(); console.log(proxy_ip); console.log(this); proxy($(this),proxy_ip,action,level) &#125;); // 测试一级代理服务 $('.test-proxy-one').click(function()&#123; var action = 'test'; var level = 1; var proxy_ip = $(this).parents('tr').children('td:eq(2)').text(); console.log(proxy_ip); console.log(this); proxy($(this),proxy_ip,action,level) &#125;); // 启动二级代理服务 $('.start-proxy-two').click(function()&#123; var action = 'start'; var level = 2; var proxy_ip = $(this).parents('tr').children('td:eq(2)').text(); console.log(proxy_ip); console.log(this); proxy($(this),proxy_ip,action,level) &#125;); // 停止二级代理服务 $('.stop-proxy-two').click(function()&#123; layer.msg('正在停止代理服务,请稍候!', &#123;icon: 6&#125;); var action = 'stop'; var level = 2; var proxy_ip = $(this).parents('tr').children('td:eq(2)').text(); console.log(proxy_ip); console.log(this); proxy($(this),proxy_ip,action,level) &#125;); // 重启二级代理服务 $('.restart-proxy-two').click(function()&#123; var action = 'restart'; var level = 2; var proxy_ip = $(this).parents('tr').children('td:eq(2)').text(); console.log(proxy_ip); console.log(this); proxy($(this),proxy_ip,action,level) &#125;); // 测试二级代理服务 $('.test-proxy-two').click(function()&#123; var action = 'test'; var level = 2; var proxy_ip = $(this).parents('tr').children('td:eq(2)').text(); console.log(proxy_ip); console.log(this); proxy($(this),proxy_ip,action,level) &#125;); &#125;)&lt;/script&gt;]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网邮件API服务部署]]></title>
    <url>%2Funcategorized%2F3811181486.html</url>
    <content type="text"><![CDATA[开源MailServerhttps://www.hmailserver.com/download (for windows)https://modoboa.org/en/ (基于Django Bootstrap Jquery for Linux) 本次部署hmailserver服务！ 部署环境 Windows Server 2012 R2 X64 Mysql 5.7 https://dev.mysql.com/downloads/installer/ Apache2.4 https://www.apachehaus.com/cgi-bin/download.plx hMailServer-5.6.7-B2425 https://cdn.mysql.com//Downloads/MySQLInstaller/mysql-installer-web-community-8.0.12.0.msi PHP 7.1 https://windows.php.net/downloads/releases/php-7.1.22-Win32-VC14-x64.zip MS VC14 libmysql 安装包准备 Apache httpd-2.4.34-o102o-x64-vc14.zip MS VC14 vc_redist.x64.rar hmailserver hmailserver-5.6.7-b2425.rar php php-7.1.22-win32-vc14-x64.zip Webmail webmail-lite-php-8.zip libmysql libmysql.zip \\xx\xx\SoftWare\开发工具\Windows平台\mysql-installer-community-5.7.17.0.msi 安装Mysql 安装Net3C:\Users\Administrator&gt;dism.exe /online /enable-feature /all /featurename:netfx3 /Source:D:\sources\sxs 安装Hmailserver 上传 libmysql.dll 32bit至如下目录C:\Program Files (x86)\hMailServer\Bin 安装中文包https://www.hmailserver.com/devnet/translation_getlanguage.php?language=chinese zh-hans.rar C:\Program Files (x86)\hMailServer\Bin\hMailServer.INI 重启hmail服务，生效 安装Apache将下载的zip文件解压到指定目录(D:\soft\apache24) 修改ServerRootDefine SRVROOT "D:/Apache24"ServerRoot "$&#123;SRVROOT&#125;" 修改DocumentRootDocumentRoot "D:/Apache24/htdocs" 安装Apachecd D:\soft\apache24\binhttpd.exe -k installThe "Apache2.4" is successfuly installed .Testing httpd.confError: reported here must be corrected before the service can be started. 启动Apache服务cd D:\soft\apache24\binnet start Apache2.4Apache2.4 服务正在启动...Apache2.4 服务启动成功。 安装PHP将下载的zip文件解压到指定目录(D:\soft\php-7.1.22) 配置httpd.conf,添加PHP模块 LoadModule php7_module "D:/soft/php-7.1.22/php7apache2_4.dll" 添加扩展名AddType application/x-httpd-php .phpAddType application/x-httpd-php-source .phps 指定php.ini配置文件路径PHPIniDir "D:/soft/php-7.1.22" 配置php.ini.将php安装目录下的php.ini-production改名为php.ini # 指定EXT目录，相对目录会出错！extension_dir = "D:/soft/php-7.1.22/ext" # 开启常用的php扩展extension=php_mbstring.dll（php多字节字符串扩展）extension=php_curl.dll(webmail依赖)extension=php_mbstring.dllextension=php_mysqli.dll（mysqli库扩展）extension=php_openssl.dllextension=php_pdo_mysql.dll(webmail依赖) # 开启COM组件com.allow_dcom = trueextension=php_com_dotnet.dll # 设置默认时区date.timezone = Asia/Shanghai 测试PHP,将如下代码放置网站/目录测试&lt;?phpphpinfo();?&gt; Call to undefined function curl_init()错误将php.ini中的;extension=php_curl.dll的注释去掉后，重启apache后仍然报Call to undefined function curl_init()的错误，只php安装目录下的libssh2.dll复制到apache的bin目录，并重新启动apache。https://windows.php.net/download#php-7.2https://www.jianshu.com/p/9d5c3a81c7efhttps://www.jianshu.com/p/63195ff92062https://danielarancibia.wordpress.com/2015/09/27/installing-apache-2-4-and-php-7-for-development-on-windows/ 安装PHPWebAdminhttps://www.hmailserver.com/documentation/latest/?page=howto_install_phpwebadmin Apache or IIS (or any other PHP compatible web server) PHP &gt;= 4.3.11 or PHP &gt;= 5.0.3. Due to bugs in PHP 4.3.10, hMailServer does not work with that version.For php version 5.3.15 / 5.4.5 and higher the COM API has been disabled as a module. The error probably will be PHP Fatal error: Class ‘COM’ not found in \phpwebadmin\initialize.php on line xx. Make sure you edit the php.ini file has been edited with the value extension=php_com_dotnet.dll in the extentions. For IIS , install PHP from the Web Platform Installer, and then enable php_com_dotnet.dll from there. In the PHP configuration, the following settings must be configured for PHPWebAdmin to work properly: register_globals must be set to off (register_globals was deprecated and doesn’t exist from PHP 7.x) display_errors must be set to off For IIS 8.5 and higher, IIS App pool runs under Network Service. Network Service needs full rights to PHPWebAdmin folder which is an alternative to granting ‘read and execute’ permissions to IIS_IUSRS. 配置虚拟主机&lt;VirtualHost *:80&gt; ServerAdmin jianhu.yong@genewiz.com.cn ServerName njmail.local.genewiz.com DocumentRoot "C:/Program Files (x86)/hMailServer/PHPWebAdmin" ErrorLog "logs/njmail.local.genewniz.com-error.log" CustomLog "logs/njmail.local.genewniz.com-access.log" common &lt;Directory "C:/Program Files (x86)/hMailServer/PHPWebAdmin"&gt; # # Possible values for the Options directive are "None", "All", # or any combination of: # Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews # # Note that "MultiViews" must be named *explicitly* --- "Options All" # doesn't give it to you. # # The Options directive is both complicated and important. Please see # http://httpd.apache.org/docs/2.4/mod/core.html#options # for more information. # Options Indexes FollowSymLinks # # AllowOverride controls what directives may be placed in .htaccess files. # It can be "All", "None", or any combination of the keywords: # Options FileInfo AuthConfig Limit # AllowOverride None # # Controls who can get stuff from this server. # Require all granted&lt;/Directory&gt; &lt;/VirtualHost&gt; 配置config.phpPlease rename config-dist.php to config.php. The file is found in the PHPWebAdmin root folder. 访问登录页 http://njmail.local.genewiz.com/phpwebadmin/ 安装WebMail https://afterlogic.com/docs/webmail-lite-8 https://afterlogic.com/docs/webmail-lite-8/configuring-webmail 将下载的webmail-lite-php-8压缩包解压后，重命名为webmail 配置虚拟主机Alias "/webmail/" "D:/soft/webmail/"&lt;Directory "D:/soft/webmail/"&gt; Options Indexes FollowSymLinks AllowOverride None Require all granted&lt;/Directory&gt; 配置Webmail 默认账号密码user:superadminpassword:空 检测依赖项目 http://njmail.local.genewiz.com/webmail/?install 修改默认用户密码 数据库设置 开启日志监控 添加HmailServer 邮件API部署 URL# 内网邮件APIurl(r'^email/', include('njemail.urls', namespace='email')), from django.conf.urls import urlfrom .views import EmailApiIndexView, EmailApiViewurlpatterns = [ # 首页 url(r'^index/$', EmailApiIndexView.as_view(), name="email_index"), # 邮件接口 url(r'^api/$', EmailApiView.as_view(), name="email_api"),] CODEclass EmailApiIndexView(View): def get(self, request): current_year = datetime.now().year return render(request, "email-api-index.html", &#123; 'current_year': current_year &#125;) def post(self,request): current_year = datetime.now().year email_api_test_form = EmailApiTestForm(request.POST) if email_api_test_form.is_valid(): if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] email = request.POST.get('email','') data = &#123; 'ip': ip, 'email': [email], 'current_year': current_year &#125; if SendMail(data=data, send_type='api_test'): res = &#123; 'status': 'success', 'msg': '测试邮件已发送!' &#125; return HttpResponse(json.dumps(res, indent=4), content_type='application/json') else: res = &#123; 'status': 'failer', 'msg': '邮件地址格式有误!' &#125; return HttpResponse(json.dumps(res, indent=4), content_type='application/json')class EmailApiView(CSRFExemptMixin, LoginRequiredMixin, View): def get(self, request): return HttpResponseRedirect(reverse("email:email_index")) def post(self, request): info = json.loads(request.body) email_api_form = EmailApiForm(info) if email_api_form.is_valid(): receivers = info['receivers'] subject = info['subject'] content = info['content'] data = &#123; 'receivers': receivers, 'subject': subject, 'content': content &#125; if SendMail(data,send_type="email_api"): res = &#123; 'status': 'success', 'msg': '邮件发送成功!' &#125; return HttpResponse(json.dumps(res, indent=4, ensure_ascii=False), content_type='application/json') else: res = &#123; 'status': 'failer', 'msg': '邮件发送失败,请联系管理员!' &#125; return HttpResponse(json.dumps(res, indent=4, ensure_ascii=False), content_type='application/json') else: res = &#123; 'status': 'failer', 'msg': '邮件发送失败!' &#125; for i, j in email_api_form.errors.items(): res[i] = j[0] return HttpResponse(json.dumps(res, indent=4, ensure_ascii=False), content_type='application/json') 客户端调用cookiesheaderssessionphpcurl# API地址 http://xx.local.genewiz.com/email/api/ # 登陆验证 login_data = { 'username': 'username', 'password': 'password' } # 获取token res = requests.get('http://xx.local.genewiz.com/login/') login_data['csrfmiddlewaretoken'] = res.cookies['csrftoken'] # 获取sessionid cookies = {} cookies['csrftoken'] = res.cookies['csrftoken'] res = requests.post('http://njops.local.genewiz.com/login/', data=login_data, cookies=cookies) cookies['sessionid'] = res.history[0].cookies['sessionid'] # POST数据 email_data = { "receivers": ["test1@example.com", "test2@example.com"], "content": "test", "subject": "test" } # 构造请求头 headers = {'Content-Type': 'application/json'} # 发送邮件 res = requests.post('http://xx.local.genewiz.com/email/api/', data=json.dumps(email_data), cookies=cookies, headers=headers) # API地址 http://xx.local.genewiz.com/email/api/ # 登陆验证 login_data = { 'username': 'username', 'password': 'password' } # 获取token res = requests.get('http://njops.local.genewiz.com/login/') login_data['csrfmiddlewaretoken'] = res.cookies['csrftoken'] # 构造请求头 headers = {} headers['Cookie'] = 'csrftoken='+res.cookies['csrftoken'] # 获取sessionid res = requests.post('http://xx.local.genewiz.com/login/',data=login_data,headers=headers) headers['Cookie'] = headers['Cookie'] + ';' + ('sessionid='+res.history[0].cookies['sessionid']) headers['Content-Type'] = 'application/json' # POST数据 email_data = { "receivers": ["test1@example.com", "test2@example.com"], "content": "test", "subject": "test" } # 发送邮件 res = requests.post('http://xx.local.genewiz.com/email/api', data=json.dumps(email_data), headers=headers) # API地址 http://xx.local.genewiz.com/email/api/ # 登陆验证 login_data = { 'username': 'username', 'password': 'password' } s = requests.Session() res = s.get('http://xx.local.genewiz.com/login/') login_data['csrfmiddlewaretoken'] = res.cookies['csrftoken'] # 登录获取登录后的session res = s.post('http://njops.local.genewiz.com/login/', data=login_data) # POST数据 email_data = { "receivers": ["test1@example.com", "test2@example.com"], "content": "test", "subject": "test" } # 发送邮件 headers = {} headers['Content-Type'] = 'application/json' res = s.post('http://xx.local.genewiz.com/email/api/', data=json.dumps(email_data), headers=headers) $request = new HttpRequest(); $request-&gt;setUrl('http://xx.local.genewiz.com/email/api/'); $request-&gt;setMethod(HTTP_METH_POST); # 需要先登陆获取csrftoken sessionid(此处省略) $request-&gt;setHeaders(array( 'cache-control' =&gt; 'no-cache', 'cookie' =&gt; 'csrftoken=eIWN96HiOCrxv63cUZmMV4RH91cTBWy4aKPpWrYljnu348xEfaImV67KSZAzEPR2;sessionid=u7hmxhlz3nba7sagf6sbwqhw64a7of65', 'content-type' =&gt; 'application/json' )); $request-&gt;setBody('{ "receivers": ["test1@example.com", "test2@example.com"], "content": "test", "subject": "test" }'); try { $response = $request-&gt;send(); echo $response-&gt;getBody(); } catch (HttpException $ex) { echo $ex; } # 需要先登陆获取csrftoken sessionid(此处省略)curl -X POST \ http://xx.local.genewiz.com/email/api/ \ -H ‘cache-control: no-cache’ \ -H ‘content-type: application/json‘ \ -H ‘cookie: csrftoken=eIWN96HiOCrxv63cUZmMV4RH91cTBWy4aKPpWrYljnu348xEfaImV67KSZAzEPR2;sessionid=u7hmxhlz3nba7sagf6sbwqhw64a7of65‘ \ -b ‘csrftoken=eIWN96HiOCrxv63cUZmMV4RH91cTBWy4aKPpWrYljnu348xEfaImV67KSZAzEPR2;sessionid=u7hmxhlz3nba7sagf6sbwqhw64a7of65‘ \ -d ‘&#123; “receivers”: [“test1@example.com“, “test2@example.com“], “content”: “test”, “subject”: “test”&#125;‘]]></content>
  </entry>
  <entry>
    <title><![CDATA[下机数据自动处理By peaktrace with Docker]]></title>
    <url>%2Funcategorized%2F1962248623.html</url>
    <content type="text"><![CDATA[Centos7.2版本较低，通过docker-compose构建时候会出现如下错误：Error response from daemon: OCI runtime create failed建议Centos7.4以上，或者通过yum update升级 安装Docker旧的版本yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine 安装依赖yum install -y yum-utils device-mapper-persistent-data lvm2 添加安装源yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 安装Dockeryum install docker-ce 启动Dockersystemctl start docker 安装Docker-composecurl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose Docker-compose构建 Docker-compose Build Docker-compose Image注意事项 执行docker-compose命令时，务必进入docker-compose.yml所在的目录，否则无法正常执行。 上传项目至服务器路径：/opt/clims 配置docker-compose.yml注意事项宿主机下机数据路径务必与容器内部路径一致,请根据实际情况修改! version: ‘3’services: db: container_name: mysql image: mysql:5.6 environment: MYSQL_ROOT_PASSWORD: xxxxxxxx ports: - “3306:3306” volumes: - ./mysql/data:/var/lib/mysql web: container_name: nginx build: ./nginx #image: nginx:test restart: always ports: - “80:80” volumes: - ./nginx/conf:/opt/nginx/conf - ./django/clims:/opt/clims-status depends_on: - status status: container_name: django build: ./django #image: django:test restart: always # command: uwsgi –emperor uwsgi.ini command: uwsgi –ini /opt/clims/uwsgi/uwsgi.ini ports: - “8001:8001” volumes: - ./django/clims:/opt/clims depends_on: - db pipeline: container_name: pipeline build: ./pipeline restart: always volumes: - ./pipeline/internal:/opt/pipeline/internal - ./pipeline/external:/opt/pipeline/external - ./pipeline/cron:/var/spool/cron - /sanger-pipeline/clims-in-uat:/sanger-pipeline/clims-in-uat - /sanger-pipeline/clims-out-uat:/sanger-pipeline/clims-out-uat depends_on: - db - status - web volumes: data: clims: conf: 开始构建docker-compose up -d 备注执行此命令会自动构建镜像，并以此镜像自动创建容器，至此已完成自动化部署，可以访问http://宿主机IP/即可！ 查看镜像 上传镜像至本地仓库 苏州Harbor仓库地址：https://xx.local.genewiz.com // 登录本地仓库docker login https://xx.local.genewiz.com // 本地镜像标记TAGdocker tag clims_pipeline:latest xx.local.genewiz.com/clims/pipeline:latestdocker tag clims_web:latest xx.local.genewiz.com/clims/web:latestdocker tag clims_status:latest xx.local.genewiz.com/clims/status:latestdocker tag mysql:5.6 xx.local.genewiz.com/clims/mysql:5.6// 上传docker push xx.local.genewiz.com/clims/pipeline:latestdocker push xx.local.genewiz.com/clims/web:latestdocker push xx.local.genewiz.com/clims/status:latestdocker push xx.local.genewiz.com/clims/mysql:5.6 登录仓库查看上传镜像注意事项执行docker-compose命令时，务必进入docker-compose.yml所在的目录，否则无法正常执行。 上传项目至服务器路径：/opt/clims 配置docker-compose.yml注意事项宿主机下机数据路径务必与容器内部路径一致,请根据实际情况修改! version: ‘3’services: db: container_name: mysql #image: mysql:5.6 image: xx.local.genewiz.com/clims/mysql:5.6 environment: MYSQL_ROOT_PASSWORD: xxxxxxxx ports: - “3306:3306” volumes: - ./mysql/data:/var/lib/mysql web: container_name: nginx #build: ./nginx image: xx.local.genewiz.com/clims/web:latest restart: always ports: - “80:80” volumes: - ./nginx/conf:/opt/nginx/conf - ./django/clims:/opt/clims-status depends_on: - status status: container_name: django #build: ./django image: xx.local.genewiz.com/clims/status:latest restart: always # command: uwsgi –emperor uwsgi.ini command: uwsgi –ini /opt/clims/uwsgi/uwsgi.ini ports: - “8001:8001” volumes: - ./django/clims:/opt/clims depends_on: - db pipeline: container_name: pipeline #build: ./pipeline image: xx.local.genewiz.com/clims/pipeline:latest restart: always volumes: - ./pipeline/internal:/opt/pipeline/internal - ./pipeline/external:/opt/pipeline/external - ./pipeline/cron:/var/spool/cron - /sanger-pipeline/clims-in-uat:/sanger-pipeline/clims-in-uat - /sanger-pipeline/clims-out-uat:/sanger-pipeline/clims-out-uat depends_on: - db - status - web volumes: data: clims: conf:注意事项此时构建镜像直接从本地仓库获取，而不是本地编译Dockerfile!开始构建docker-compose up -d 容器启停容器停止docker-compose stop 容器启动docker-compose start 容器重启docker-compose restart 容器重新构建docker-compose up -d Pipeline使用注意事项Json配置文件说明&#123; "INPUT_ROOT_DIRECTORY": "/sanger-pipeline/clims-in-uat", //本地下机路径 "OUTPUT_ROOT_DIRECTORY": "/sanger-pipeline/clims-out-uat", //本地下机路径 "INPUT_SMB_DIRECTORY": "\\\\10.105.23.227\\seqdata-in", //相对应Samba路径 "OUTPUT_SMB_DIRECTORY": "\\\\10.105.23.227\\seqdata", //相对应Samba路径 "PEAKTRACE_SERVER":"10.105.21.181", //Peaktrace所在服务器IP "PEAKTRACE_USER":"root", //Peaktrace服务器账号 "PEAKTRACE_PASSWORD":"xxxxxxxx", //Peaktrace服务器账号密码 "PEAKTRACE_EXEC_ARGS": "-al no -c -10 -n 0 -xn yes", //Peaktrace参数 "PEAKTRACE_UNITS":"140000", //告警阈值 "PEAKTRACE_DAYS":"700", //告警阈值 "MYSQL_HOST":"db", //容器DB主机 "MYSQL_USER":"root", //容器DB账号 "MYSQL_PASSWORD":"xxxxxxxx", //容器DB密码 "MYSQL_DB":"pipelinedb", //数据库 "STATUS_URL":"http://10.105.21.181/" // 详情页面地址&#125; 定时任务默认均关闭，需要手动打开,请合理设置时间间隔！ # Internal Pipeline#* * * * * python /opt/pipeline/internal/climspipe.py &amp;&gt;&gt; /tmp/pipeline-internal.log # External Pipeline#* * * * * python /opt/pipeline/external/climspipe.py &amp;&gt;&gt; /tmp/pipeline-external.log # PeakTrace License Monitor#* * * * * python /opt/pipeline/internal/pt_license_monitor.py 生产环境，已通过Peaktrace处理过的目录，请提前加入数据库中，否则会被重新处理，请慎重操作！ Nginx 域名配置（可选） Nginx默认监听所有IP地址，容器部署完成后，直接访问宿主机IP地址即可！如需配置域名，请替换如下域名，配置相应DNS记录,重启容器即可生效 其他问题 docker WARNING: IPv4 forwarding is disabled? vim /etc/sysctl.conf or vim /usr/lib/sysctl.d/00-system.conf 添加如下代码：net.ipv4.ip_forward=1 查看sysctl -p Demo]]></content>
  </entry>
  <entry>
    <title><![CDATA[下机数据自动处理By peaktrace]]></title>
    <url>%2Funcategorized%2F4039255390.html</url>
    <content type="text"><![CDATA[处理流程 安装PeakTrace#!/bin/bashtar -zxv peaktrace_6911_linux_el7_x86_64 cd peaktrace_6911_linux_el7_x86_64 # installs peaktrace and codemeter on CentOS 7yum --nogpgcheck localinstall CodeMeter-6.60.2878-501.x86_64.rpm AxProtector-10.10.2878-501.x86_64.rpmchmod 755 peaktrace &amp;&amp; cp peaktrace /usr/bin/peaktracecp peaktrace.1.gz /usr/local/share/man/man1/peaktrace.1.gzcmu -h 安装数据库yum -y install mariadb-server# 修改密码mysqladmin -hlocalhost -uroot password "xxx" # 创建数据库echo "create database pipelinedb character set utf8;" | mysql -hlocalhost -uroot -p'xxx' 安装Django环境pip install -r requirement.txt asn1crypto==0.24.0bcrypt==3.1.4biopython==1.72cffi==1.11.5cryptography==2.4.1diff-match-patch==20181111Django==1.10.4django-auth-ldap==1.3.0django-crispy-forms==1.7.2django-formtools==2.1django-import-export==1.0.1django-pure-pagination==0.3.0django-ranged-response==0.2.0django-simple-captcha==0.4.6enum34==1.1.6et-xmlfile==1.0.1idna==2.7image==1.5.24ipaddress==1.0.22jdcal==1.4MySQL-python==1.2.5numpy==1.15.1odfpy==1.3.6openpyxl==2.5.11paramiko==2.4.1Pillow==5.3.0psycopg2-binary==2.7.5pyasn1==0.4.4pycparser==2.19PyNaCl==1.3.0python-ldap==2.5.2PyYAML==3.13six==1.11.0SQLAlchemy==1.2.11tablib==0.12.1unicodecsv==0.14.1uWSGI==2.0.17.1xlrd==1.1.0xlwt==1.3.0 修改Django DB配置DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'pipelinedb', 'USER':'root', 'PASSWORD':'xxxxxxxx', 'HOST':'127.0.0.1' &#125;&#125; 创建数据库python manage.py makemigrationspython manage.py migrate 同步静态文件python manage.py collectstatic 配置uwsgi[uwsgi]# 项目目录chdir=/opt/clims # 指定项目的applicationmodule=clims.wsgi # 指定sock的文件路径socket=/opt/clims/uwsgi/uwsgi.sock # 启用主进程master=true # 进程个数workers=2 pidfile=/opt/clims/uwsgi/uwsgi.pid# 自动移除unix Socket和pid文件当服务停止的时候vacuum=true # 指定IP端口http=10.105.21.181:8001 # 指定静态文件static-map=/static=/opt/clims/statics # 启动uwsgi的用户名和用户组uid=rootgid=root # 序列化接受的内容，如果可能的话thunder-lock=true # 启用线程enable-threads=true # 设置自中断时间harakiri=30 # 设置缓冲post-buffering=4096 # 设置日志目录daemonize=/opt/clims/uwsgi/uwsgi.log 启动项目uwsgi --ini /opt/clims/uwsgi/uwsgi8001.ini 停止项目pkill -9 uwsgi or ps -ef|grep uwsgi |grep -v grep|xargs kill -9 启动pipeline通过设置定时任务即可！]]></content>
  </entry>
  <entry>
    <title><![CDATA[目录同步-线上部署]]></title>
    <url>%2Funcategorized%2F150957718.html</url>
    <content type="text"><![CDATA[线上环境部署安装python2.7wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13rc1.tgztar zxvf Python-2.7.13rc1.tgz cd Python-2.7.13rc1yum -y install sqlite-devel openssl-devel tk-devel readline-devel bzip2-devel gdbm-devel./configure --prefix=/opt/app/python2.7/makemake install 安装pipwget https://bootstrap.pypa.io/get-pip.py/opt/app/python2.7/bin/python get-pip.py/opt/app/python2.7/bin/pip install virtualenvwrapper 配置环境变量vim ~/.bash_profileexport PATH=/opt/app/python2.7/bin:$PATHexport WORKON_HOME=/opt/virtualenvsexport VIRTUALENVWRAPPER_PYTHON=/opt/app/python2.7/bin/pythonsource /opt/app/python2.7/bin/virtualenvwrapper.sh 创建虚拟环境mkvirtualenv -p /opt/app/python2.7/bin/python DeviceOnlinepip install -r /opt/DeviceOnline/venv/requirment.txt -i https://pypi.douban.com/simple 目录创建进入虚拟环境workon DeviceOnline 创建目录(DeviceOnline) [root@gwszsmb01 DeviceOnline]# ./run.py usage: run.py [-h] [--force] [--configfile CONFIGFILE] folder_namerun.py: error: too few arguments # Example(DeviceOnline) [root@gwszsmb01 DeviceOnline]# ./run.py Linne 退出虚拟环境deactivate]]></content>
  </entry>
  <entry>
    <title><![CDATA[目录同步]]></title>
    <url>%2Funcategorized%2F2863113024.html</url>
    <content type="text"><![CDATA[同步示例 目录流程 初次安装进入虚拟环境source ../../DeviceOnline/bin/activate 进入run.py所在目录cd ../DeviceOnline 查看帮助(venv) [root@localhost DeviceOnline]# ./run.py -husage: run.py [-h] [--force] [--configfile CONFIGFILE] folder_name positional arguments: folder_name The Name of Device optional arguments: -h, --help show this help message and exit --force Force installation --configfile CONFIGFILE Configuration file to use 创建目录./run.py folder_name 使用场景：本地Samba未安装lsyncd同步软件本地Samba &amp; Azrue Samba服务器均未创建SyncUser用户本地Samba SyncUser公钥尚未同步至Azrue Samba 非初次安装 配置文件../DeviceOnline/install.cfg 异常处理Lsyncd未安装 SyncUser未创建 公钥未同步 目录重名 邮件通知 CODE#!/usr/bin/env python# coding:utf8"""An installer for GENEWIZ Device Online.Create Device Folder Name IN Local &amp; Azrue Samba Servers.Config Lsyncd Service IN Local Samba Server."""import argparsetry: import configparserexcept ImportError: import ConfigParser as configparserimport sysimport osimport platformimport paramikofrom scripts import packagefrom scripts import systemfrom scripts import utilsimport smtplibfrom email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom email.header import Headerfrom datetime import datetimedef deploy_key(key, host, username, password, sync_user): """Deploy Public key to target machines""" client = paramiko.SSHClient() client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) client.connect(host, username=username, password=password) client.exec_command('mkdir -p /home/&#123;&#125;/.ssh/'.format(sync_user)) client.exec_command('chown &#123;&#125;.&#123;&#125; /home/&#123;&#125;/.ssh/'.format(sync_user, sync_user, sync_user)) client.exec_command('echo "&#123;&#125;" &gt; /home/&#123;&#125;/.ssh/authorized_keys'.format(key, sync_user)) client.exec_command('chmod 600 /home/&#123;&#125;/.ssh/authorized_keys'.format(sync_user)) client.exec_command('chown &#123;&#125;.&#123;&#125; /home/&#123;&#125;/.ssh/authorized_keys'.format(sync_user, sync_user, sync_user)) client.exec_command('chmod 700 /home/&#123;&#125;/.ssh/'.format(sync_user)) client.close()def mkdirs(host, username, password, folder_path, sync_user): """Make dirs""" client = paramiko.SSHClient() client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) client.connect(host, username=username, password=password) for path in folder_path: client.exec_command('mkdir -p &#123;&#125;'.format(path)) client.exec_command('chmod -R 2776 &#123;&#125;'.format(path)) client.exec_command('chown &#123;&#125;."&#123;&#125;" &#123;&#125;'.format(sync_user, 'domain users', path)) client.close()def SentMail(msg_data, mail_to, mail_cc): """Send Email""" mail_host = '10.xx.xx.xx' mail_user = 'xx@genewiz.com.cn' # mail_pass = '********' mail_sender = 'xx@genewiz.com.cn' mail_to = mail_to mail_cc = mail_cc subject = '【GENEWIZ-IT】设备目录上线通知' # message = MIMEMultipart() tr_messages_list = [] li_messages_list = [] for smb_tag, smb_info in msg_data.items(): for host in smb_info['hosts']: hostname = host['hostname'] folder_auth = host['folder_auth'] create_time = host['create_time'] folder_group = host['folder_group'] folder_name = host['folder_name'] if 'local' in smb_tag: smb_path_internal_in = os.path.join(host['smb_path_internal_in'], folder_name).replace('/', '\\') smb_path_external_in = os.path.join(host['smb_path_external_in'], folder_name).replace('/', '\\') smb_path_out = os.path.join(host['smb_path_out'], folder_name).replace('/', '\\') for service in smb_info['services']: li_messages = ''' &lt;li&gt;&lt;strong&gt;服务: &#123;&#125;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;日志目录: &#123;&#125;&lt;/li&gt; &lt;li&gt;配置文件: &#123;&#125;&lt;/li&gt; &lt;li style="margin-bottom:15px"&gt;系统服务: &#123;&#125;【自启动】&lt;/li&gt; '''.format(service['name'], service['log_file_path'], service['config_path'], service['init_path']) li_messages_list.append(li_messages) for path in host['path']: tr_messages = ''' &lt;tr&gt; &lt;td style="border-top: 1px solid #c4cacd;border-right: 1px solid #c4cacd;height: 27px;line-height: 27px;background: #fff;padding:0 10px;color:#4285F4" &gt;&#123;0&#125;&lt;/td&gt; &lt;td style="border-top: 1px solid #c4cacd;border-right: 1px solid #c4cacd;height: 27px;line-height: 27px;background: #fff;padding:0 10px"&gt;&#123;1&#125;&lt;/td&gt; &lt;td style="border-top: 1px solid #c4cacd;border-right: 1px solid #c4cacd;line-height: 27px;background: #fff;padding:0 20px"&gt;&#123;2&#125;&lt;/td&gt; &lt;td style="border-top: 1px solid #c4cacd;border-right: 1px solid #c4cacd;line-height: 27px;background: #fff;padding:0 10px"&gt;&#123;3&#125;&lt;/td&gt; &lt;td style="border-top: 1px solid #c4cacd;border-right: 1px solid #c4cacd;line-height: 27px;background: #fff;padding:0 10px"&gt;&#123;4&#125;&lt;/td&gt; &lt;td style="border-top: 1px solid #c4cacd;border-right: 1px solid #c4cacd;line-height: 27px;background: #fff;padding:0 10px"&gt;&#123;5&#125;&lt;/td&gt; &lt;td style="border-top: 1px solid #c4cacd;line-height: 27px;background: #fff;padding:0 20px;color: red"&gt;&#123;6&#125;&lt;/td&gt; &lt;/tr&gt; '''.format(smb_tag, hostname, folder_name, path, folder_auth, folder_group, create_time) tr_messages_list.append(tr_messages) mail_msg = ''' &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;p style="margin-right:20px;margin-bottom:15px; padding-bottom: 5px;font-size:14px;font-family:'Microsoft YaHei';color:#333;font-weight: bold;"&gt;您的设备目录已创建,详情如下：&lt;/p&gt; &lt;table cellspacing="0" cellpadding="0" style="border: 1px solid #c4cacd;font-size:13px;font-family:'Microsoft YaHei';color:#333;"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th style="border-top: 1px solid #fff;border-left: 1px solid #fff;border-right: 1px solid #c4cacd;color: white;background: #4285F4; line-height: 21px;font-weight: bold;padding: 2px 0"&gt;类型&lt;/th&gt; &lt;th style="border-top: 1px solid #fff;border-right: 1px solid #c4cacd;color: white;background: #4285F4; line-height: 21px;font-weight: bold;padding: 2px 0"&gt;IP&lt;/th&gt; &lt;th style="border-top: 1px solid #fff;border-right: 1px solid #c4cacd;color: white;background: #4285F4; line-height: 21px;font-weight: bold;padding: 2px 0"&gt;目录&lt;/th&gt; &lt;th style="border-top: 1px solid #fff;border-right: 1px solid #c4cacd;color: white;background: #4285F4; line-height: 21px;font-weight: bold;padding: 2px 0"&gt;目录路径&lt;/th&gt; &lt;th style="border-top: 1px solid #fff;border-right: 1px solid #c4cacd;color: white;background: #4285F4;line-height: 21px;font-weight: bold;padding: 2px 0"&gt;权限&lt;/th&gt; &lt;th style="border-top: 1px solid #fff;border-right: 1px solid #c4cacd;color: white;background: #4285F4;line-height: 21px;font-weight: bold;padding: 2px 0"&gt;目录属组&lt;/th&gt; &lt;th style="border-top: 1px solid #fff;border-right: 1px solid #c4cacd;color: white;background: #4285F4;line-height: 21px;font-weight: bold;padding: 2px 0"&gt;创建时间&lt;/th&gt; &lt;/tr&gt; %s &lt;/tbody&gt; &lt;/table&gt; &lt;p style="margin-right:20px;margin-top:15px;margin-bottom:15px; padding-bottom: 5px;font-size:14px;font-family:'Microsoft YaHei';font-weight:bold;color:#333;border-bottom: 1px solid #eee"&gt;本地下机路径&lt;/p&gt; &lt;ul style="list-style: none;margin: 0;padding: 0;font-size:13px;font-family:'Microsoft YaHei';color:#333;"&gt; &lt;li&gt;本地下机路径-内单【IN】: %s&lt;/li&gt; &lt;li&gt;本地下机路径-外单【IN】: %s&lt;/li&gt; &lt;li&gt;本地下机路径【OUT】: %s&lt;/li&gt; &lt;/ul&gt; &lt;p style="margin-right:20px;margin-top:15px;margin-bottom:15px; padding-bottom: 5px;font-size:14px;font-family:'Microsoft YaHei';font-weight:bold;color:#333;border-bottom: 1px solid #eee"&gt;目录同步服务&lt;/p&gt; &lt;ul style="list-style: none;margin: 0;padding: 0;font-size:13px;font-family:'Microsoft YaHei';color:#333;"&gt; %s &lt;/ul&gt; &lt;p style="margin-right:20px;margin-top:15px;margin-bottom:15px; padding-bottom: 5px;font-size:12px;font-family:'Microsoft YaHei';color:red;"&gt;本邮件是由系统自动发出的，请不要回复本邮件！&lt;/p&gt; ''' % ("".join(tr_messages_list), smb_path_internal_in, smb_path_external_in, smb_path_out, "".join(li_messages_list)) message = MIMEText(mail_msg, 'html', 'utf-8') message['From'] = Header(mail_sender) message['To'] = Header(','.join(mail_to)) message['Cc'] = Header(','.join(mail_cc)) message['Subject'] = Header(subject, 'utf-8') try: smtpObj = smtplib.SMTP() smtpObj.connect(mail_host, 25) # SZ SMTP Server do not require login # smtpObj.login(mail_user,mail_pass) smtpObj.sendmail(mail_sender, mail_to + mail_cc, message.as_string()) return True except Exception as e: print(e) return Falsedef main(input_args): """Install process.""" parser = argparse.ArgumentParser() parser.add_argument("--force", action="store_true", default=False,help="Force installation") parser.add_argument("--configfile", default="installer.cfg",help="Configuration file to use") parser.add_argument("folder_name", type=str,help="The Name of Device") args = parser.parse_args(input_args) folder_name = args.folder_name basedir = os.path.dirname(os.path.abspath(__file__)) utils.printcolor("Welcome to Genewiz installer for Device Online!\n", utils.GREEN) config = configparser.SafeConfigParser() with open(args.configfile) as fp: config.readfp(fp) mail_to = config.get('notify', 'mail_to').split(',') mail_cc= config.get('notify', 'mail_cc').split(',') # Check if Lsyncd is installed? utils.printcolor("1.Check if Lsyncd is installed?", utils.BLUE) utils.printcolor("-"*80, utils.BLUE) code,res = utils.exec_cmd('which lsyncd') if code: utils.printcolor("[Error]: lsyncd is not installed.", utils.RED) name, version, _id = platform.linux_distribution() if version.startswith('6'): lsyncd_rpm = os.path.join(basedir, 'scripts/files/lsyncd-2.1.5-0.el6.x86_64.rpm') elif version.startswith('7'): lsyncd_rpm = os.path.join(basedir, 'scripts/files/lsyncd-2.1.5-6.el7.x86_64.rpm') utils.printcolor("[Info]: Installing lsyncd for you, please wait...", utils.BLUE) package.backend.install_many(config.get('requirement', 'package').split(',')) utils.exec_cmd('rpm -ivh &#123;&#125;'.format(lsyncd_rpm)) code, res = utils.exec_cmd('which lsyncd') utils.printcolor("[Success]: Lsyncd installation is complete. &#123;&#125;".format([res.strip()]), utils.GREEN) else: utils.printcolor("[Success]: Lsyncd is installed &#123;&#125;".format([res.strip()]), utils.GREEN) # Check if SyncUser is Created? utils.printcolor('', utils.BLACK) utils.printcolor("2.Check if SyncUser is Created?", utils.BLUE) utils.printcolor("-"*80, utils.BLUE) # Get all samba servers hosts = &#123;&#125; for section in config.sections(): if section.startswith('smb-local'): hosts[section] = &#123;i[0]:i[1] for i in config.items(section)&#125; elif section.startswith('smb-azure'): hosts[section] = &#123;i[0]:i[1] for i in config.items(section)&#125; # Get local and azure servers azure_hosts = [] local_hosts = [] for key in hosts.keys(): if key.startswith('smb-local'): local_hosts.append(hosts[key]) else: azure_hosts.append(hosts[key]) for host in hosts.values(): client = paramiko.SSHClient() client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) client.connect(host['hostname'], 22, username=host['username'], password=host['password']) cmd = 'id SyncUser' stdin, stdout, stderr = client.exec_command(cmd) stdout = stdout.read() if not stdout: utils.printcolor("[Error]: the SyncUser was not detected for &#123;&#125;".format(host['hostname']), utils.RED) utils.printcolor("[Info]: Creating SyncUser for &#123;&#125;, please wait...".format(host['hostname']), utils.BLUE) cmd = 'useradd SyncUser' client.exec_command(cmd) utils.printcolor("[Success]: SyncUser is created", utils.GREEN) utils.printcolor('', utils.BLACK) else: utils.printcolor("[Success]: detected SyncUser in &#123;&#125;\n".format(host['hostname']), utils.GREEN) client.close() # Check if can ssh pass the key? utils.printcolor("3.Check if can ssh pass the key?", utils.BLUE) utils.printcolor("-"*80, utils.BLUE) for host in azure_hosts: key = os.path.join(basedir, 'scripts/files/SyncUser_id_rsa') private_key = paramiko.RSAKey.from_private_key_file(key) client = paramiko.SSHClient() client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) try: client.connect(host['hostname'], 22, username='SyncUser', pkey=private_key) utils.printcolor("[Success]: login &#123;&#125; with private key\n".format(host['hostname']), utils.GREEN) except Exception as e: utils.printcolor("[Error]: &#123;&#125; for &#123;&#125;".format(str(e), host['hostname']), utils.RED) utils.printcolor("[Info]: Initializing user permissions for &#123;&#125;, please wait...".format(host['hostname']), utils.BLUE) key = open(os.path.expanduser(os.path.join(basedir,'scripts/files/SyncUser_id_rsa.pub'))).read() deploy_key(key, host['hostname'], host['username'], host['password'], host['sync_user']) utils.printcolor("[Success]: Permission initialization succeeded in &#123;&#125;\n".format(host['hostname']), utils.GREEN) client.close() # Check if the directory name conflicts? utils.printcolor("4.Check if the directory name conflicts?", utils.BLUE) utils.printcolor("-"*80, utils.BLUE) has_created_folders = [] for host in local_hosts: path_internal_in = host['path_internal_in'] path_external_in = host['path_external_in'] path_out = host['path_out'] for folder in os.listdir(path_internal_in): if os.path.isdir(os.path.join(path_internal_in, folder)): has_created_folders.append(folder) for folder in os.listdir(path_external_in): if os.path.isdir(os.path.join(path_external_in, folder)): has_created_folders.append(folder) for folder in os.listdir(path_out): if os.path.isdir(os.path.join(path_out, folder)): has_created_folders.append(folder) # Directory deduplication has_created_folders_unique = list(set(has_created_folders)) if folder_name in has_created_folders_unique: utils.printcolor("Error: Directory name conflict - &#123;&#125;, please change the directory name.".format(folder_name),utils.RED) return else: utils.printcolor("[Success]: No directory conflict.".format(folder_name),utils.GREEN) utils.printcolor("", utils.GREEN) # Ask for confirm if not args.force: answer = utils.user_input("Will create a directory and synchronization service,do you confirm? (Y/n) ") if answer.lower().startswith("n"): return # mail dict msg_data = &#123; 'local_smb': &#123;'hosts': [], 'services': []&#125;, 'azrue_smb': &#123;'hosts': []&#125;, &#125; # Create device folder in Local Samba Servers for host in local_hosts: folder_path_internal_in = os.path.join(host['path_internal_in'], folder_name) folder_path_external_in = os.path.join(host['path_external_in'], folder_name) folder_path_out = os.path.join(host['path_out'], folder_name) folder_path = [folder_path_internal_in, folder_path_external_in, folder_path_out] mkdirs(host['hostname'],host['username'],host['password'],folder_path,host['sync_user']) tmp_data = &#123;&#125; tmp_data['hostname'] = host['hostname'] tmp_data['path'] = folder_path tmp_data['folder_name'] = folder_name tmp_data['folder_auth'] = '2766' tmp_data['folder_group'] = 'SyncUser:Domain User' tmp_data['smb_path_internal_in'] = host['smb_path_internal_in'] tmp_data['smb_path_external_in'] = host['smb_path_external_in'] tmp_data['smb_path_out'] = host['smb_path_out'] tmp_data['create_time'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S") msg_data['local_smb']['hosts'].append(tmp_data) utils.printcolor("[Success-LocalSamba]: &#123;&#125; is created in &#123;&#125;".format(folder_path, host['hostname']), utils.GREEN) # Create device folder in Azrue Samba Servers for host in azure_hosts: folder_path_out = os.path.join(host['path_out'], folder_name) folder_path = [folder_path_out] mkdirs(host['hostname'], host['username'], host['password'], folder_path, host['sync_user']) tmp_data = &#123;&#125; tmp_data['hostname'] = host['hostname'] tmp_data['path'] = folder_path tmp_data['folder_name'] = folder_name tmp_data['folder_auth'] = '2766' tmp_data['folder_group'] = 'SyncUser:Domain User' tmp_data['create_time'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S") msg_data['azrue_smb']['hosts'].append(tmp_data) utils.printcolor("[Success-AzureSamba]: &#123;&#125; is created in &#123;&#125;".format(folder_path, host['hostname']), utils.GREEN) # Create Lsyncd services in Local Samba Servers for local_host in local_hosts: key = os.path.join(basedir, 'scripts/files/SyncUser_id_rsa') for azure_host in azure_hosts: if azure_host.has_key('tag'): logfile = 'Sync_' + folder_name + '_DR' else: logfile = 'Sync_' + folder_name statusfile = logfile source = os.path.join(local_host['path_out'],folder_name) target = azure_host['hostname'] + ':' + os.path.join(azure_host['path_out'],folder_name) rsh = azure_host['sync_user'] sync_cfg_tpl = open(os.path.join(basedir, 'scripts/files/sync-cfg.tpl')).read() % (logfile,logfile,statusfile,statusfile,source,target,key,rsh) sync_init_tpl = open(os.path.join(basedir, 'scripts/files/sync-init.tpl')).read() % (logfile,res.strip(),logfile,logfile,logfile) f = open(os.path.join('/etc',logfile + '.lua'), 'wb') f.write(sync_cfg_tpl) f.flush() f.close() f = open(os.path.join('/etc/init.d',logfile), 'wb') f.write(sync_init_tpl) f.flush() f.close() os.chmod(os.path.join('/etc/init.d',logfile), 0755) try: os.makedirs(os.path.join('/var/log', logfile)) except OSError as e: pass system.enable_and_start_service(logfile) tmp_data = &#123;&#125; tmp_data['name'] = logfile tmp_data['log_file_path'] = os.path.join('/var/log', logfile) tmp_data['config_path'] = os.path.join('/etc', logfile + '.lua') tmp_data['init_path'] = os.path.join('/etc/init.d', logfile) msg_data['local_smb']['services'].append(tmp_data) utils.printcolor("Congratulations!",utils.GREEN) SentMail(msg_data, mail_to, mail_cc)if __name__ == "__main__": main(sys.argv[1:])]]></content>
  </entry>
  <entry>
    <title><![CDATA[域账号密码自助-项目部署]]></title>
    <url>%2Funcategorized%2F4173984491.html</url>
    <content type="text"><![CDATA[部署方式Windows + Apache + Mod_Wsgi + Django + Mysql 注意事项：Windows需要为英文版本，中文版本报错会有乱码！ 安装Python2.7https://www.python.org/downloads/ 安装Mysql3.1 安装 3.2 创建数据库 4.创建虚拟环境 使不同应用开发环境独立 环境升级不影响其他应用，也不会影响全局的python环境 防止系统中出现包管理混乱和版本冲突 # 安装virtualenvwrapperpip install virtualenvwrapper-win # 创建mkvirtualenv ADManager # 进入虚拟机环境workon ADManager 5.离线安装 ldap &amp; mysql-pythonMySQL_python &amp; python_ldap 在windows上无法直接通过pip install 完成安装https://www.lfd.uci.edu/~gohlke/pythonlibs/ (解决方案) (ADManager) D:\&gt;cd D:\ShareFloders\NG-IT\AD_Manager\package (ADManager) D:\ShareFloders\NG-IT\AD_Manager\package&gt;dir Directory of D:\ShareFloders\NG-IT\AD_Manager\package03/19/2018 11:47 AM 821,050 MySQL_python-1.2.5-cp27-none-win_amd64.whl01/23/2018 10:55 PM 1,086,402 python_ldap-2.5.2-cp27-cp27m-win_amd64.whl (ADManager) D:\ShareFloders\NG-IT\AD_Manager\package&gt;pip install MySQL_python-1.2.5-cp27-none-win_amd64.whlSuccessfully installed MySQL-python-1.2.5 (ADManager) D:\ShareFloders\NG-IT\AD_Manager\package&gt;pip install python_ldap-2.5.2-cp27-cp27m-win_amd64.whlSuccessfully installed python-ldap-2.5.2 6.部署Django环境pip install -r requirement.txt 7.上传CODE至服务器省略 8.配置数据库信息settings.pyDATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'DATABASE NAME', 'USER':'USER', 'PASSWORD':'PASSWORD', 'HOST':'DATABASE IP' &#125;&#125; 9.配置邮件服务器settings.py# Email ConfigEMAIL_HOST = 'MAIL Server'EMAIL_PORT = 'MAIL PORT'EMAIL_HOST_USER = 'USER'EMAIL_HOST_PASSWORD = 'PASSWORS'EMAIL_USE_TLS = TrueEMAIL_FROM = 'MAIL FROM' 10.配置Apache10.1 MS VC14安装 Apache依赖于 MicroSoft VC14，需要安装！ 10.2 官网下载https://www.apachehaus.com/cgi-bin/download.plx httpd-2.4.34-o102o-x64-vc14.zip 10.3 Mod_Wsgihttps://github.com/GrahamDumpleton/mod_wsgi mod_wsgi-windows-4.4.12.rar 10.4 配置Apache解压httpd-2.4.34-o102o-x64-vc14.zip,将apache24目录放至 D:\apache24 解压mod_wsgi-windows-4.4.12.rar，将‪mod_wsgi-windows-4.4.12\Apache24-win64-VC10\modules\mod_wsgi-py27-VC9.so文件放至D:\apache24\modules目录 修改D:\apache24\conf\httpd.conf，添加mod_wsgi.so 模块 修改D:\apache24\conf\httpd.conf,修改SRVROOT目录 修改D:\apache24\conf\httpd.conf,打开虚拟主机 修改D:\Apache24\conf\extra\httpd-vhosts.conf &lt;VirtualHost *:80&gt; ServerAdmin jianhu.yong@genewiz.com.cn DocumentRoot "D:/app01/ADManager" ServerName pwd.local.genewiz.com ErrorLog "logs/pwd.local.genewiz.com-error.log" CustomLog "logs/pwd.local.genewiz.com-access.log" common &lt;/VirtualHost&gt; WSGIScriptAlias / D:/app01/ADManager/ADManager/wsgi.py&lt;Directory D:/app01/ADManager/ADManager/&gt; &lt;Files wsgi.py&gt; Require all granted &lt;/Files&gt;&lt;/Directory&gt; Alias /static/ D:/app01/ADManager/statics/&lt;Directory D:/app01/ADManager/statics/&gt; Require all granted&lt;/Directory&gt; # virtual envWSGIPythonPath D:/app01/ADManager;D:/python-envs/ADManager/Lib/site-packages 10.5 安装Apache服务cd D:\Apache24\binhttpd.exe -k installThe "Apache2.4" is successfuly installed .Testing httpd.confError: reported here must be corrected before the service can be started. 10.6 启动Apache服务cd D:\Apache24\binnet start Apache2.4Apache2.4 服务正在启动...Apache2.4 服务启动成功。 10.7 Apache服务管理工具启动D:\Apache24\bin\ApacheMonitor.exe 10.8 Apache运行账号权限设置默认服务 没有权限执行powershell 需要在服务器上面设置登录 11.其他ImportError: No system module ‘pywintypes’ (pywintypes27.dll) 错误 拷贝 Lib\site-packages\pywin32_system32目录下的pywintypes27.dll pythoncom27.dll 至Lib\site-packages\win32\lib目录下即可！]]></content>
  </entry>
  <entry>
    <title><![CDATA[域账号密码自助-前端DEMO]]></title>
    <url>%2Funcategorized%2F586407947.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[域账号密码自助-通知模板]]></title>
    <url>%2Funcategorized%2F1296339277.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[域账号密码自助-相关表结构设计]]></title>
    <url>%2Funcategorized%2F3852621189.html</url>
    <content type="text"><![CDATA[用户表# coding:utf8from __future__ import unicode_literals from django.db import modelsfrom datetime import datetimefrom django.contrib.auth.models import AbstractUser # Create your models here. class UserProfile(AbstractUser): company = ( ('suzhou', u'苏州'), ('beijing', u'北京'), ('tianjing', u"天津"), ('guangzhou', u'广州'), ('nanjing', u"南京"), ('usa', u"美国"), ('lizhi', u"离职") ) uid = models.CharField(max_length=100, verbose_name=u'用户UID', null=True, blank=True) sid = models.CharField(max_length=100, verbose_name=u'用户SID', null=True, blank=True) dn = models.CharField(max_length=100, verbose_name=u'DN名称', null=True, blank=True,) email = models.EmailField(max_length=50, verbose_name=u"邮箱", null=True, blank=True) rescue_email = models.EmailField(max_length=50, null=True, blank=True, verbose_name=u"救援邮箱") is_enabled = models.BooleanField(default=True, verbose_name=u'帐号启用') is_lockedout = models.BooleanField(default=False, verbose_name=u'帐号锁定') is_dial_in = models.BooleanField(default=False, verbose_name=u'VPN权限') gender = models.CharField(max_length=10, choices=(("male", "男"), ("female", "女")), default="male", verbose_name=u'性别') mobile = models.CharField(max_length=11, null=True, blank=True, verbose_name=u'联系方式') department = models.CharField(max_length=100, null=True, blank=True, verbose_name=u'部门') company = models.CharField(choices=company, max_length=50, null=True,blank=True, help_text=u'所属公司', verbose_name=u'所属公司') birday = models.DateField(null=True, blank=True, verbose_name=u"生日") image = models.ImageField(upload_to="image/%Y/%m/%m", blank=True, default=u"image/default.png", max_length=100) check = models.URLField(max_length=100, null=True, blank=True, verbose_name=u'在线检查') quit_time = models.DateField(max_length=100, null=True, blank=True, verbose_name=u'离职时间') created_time = models.CharField(max_length=100,verbose_name=u"创建时间",null=True, blank=True,) pwd_last_set_time = models.CharField(max_length=100,verbose_name=u"密码最后一次设置时间",null=True, blank=True,) add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") def list_groups(self): return self.usergroup_set.all() list_groups.short_description = u'属组信息' class Meta: verbose_name = "用户信息" verbose_name_plural = verbose_name def __unicode__(self): return self.username 用户组class UserGroup(models.Model): username = models.CharField(max_length=100, verbose_name=u'组名', null=True, blank=True) uid = models.CharField(max_length=100, verbose_name=u'组UID', null=True, blank=True) sid = models.CharField(max_length=100, verbose_name=u'组SID', null=True, blank=True) gc = models.CharField(max_length=100, verbose_name=u'GC', null=True, blank=True) gs = models.CharField(max_length=100, verbose_name=u'GS', null=True, blank=True) dn = models.CharField(max_length=100, verbose_name=u'DN', null=True, blank=True) members = models.ManyToManyField(UserProfile) add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = "用户组信息" verbose_name_plural = verbose_name def __unicode__(self): return self.dn 邮箱验证码class EmailVerifyRecord(models.Model): action_type = ( ("user_reset_pwd_code", u"重置密码"), ("email_modify", u"修改邮箱"), ('user_reset_email_code', u'重置邮箱') ) user = models.ForeignKey(UserProfile, verbose_name=u"用户", default='') code = models.CharField(max_length=20, verbose_name=u"验证码") email = models.EmailField(max_length=50, verbose_name=u"邮箱") is_used= models.BooleanField(default=False, verbose_name=u"是否使用") send_type = models.CharField(choices=action_type, max_length=100, verbose_name=u"验证码类型") send_time = models.DateTimeField(default=datetime.now, verbose_name=u"发送时间") # datetime.now() model编译时间生成默认时间 # datetime.now classs实例化时生成的时间 class Meta: verbose_name = u"邮箱验证码" verbose_name_plural = verbose_name def __unicode__(self): return '&#123;0&#125;(&#123;1&#125;)'.format(self.code, self.email) 用户日志# coding:utf8from __future__ import unicode_literals from django.db import modelsfrom datetime import datetime # Create your models here. class UserActionLog(models.Model): user_type = ( ("user_modify_pwd", u"修改密码"), ("user_reset_pwd", u"重置密码"), ("user_unlock", u"账号解锁"), ("user_bind_email", u"绑定外部邮箱"), ("user_modify_email", u"修改外部邮箱"), ('user_reset_pwd_code', u'密码重置码'), ('user_reset_email_code', u'邮箱重置码') ) status = models.BooleanField(verbose_name=u'状态', default=True) user_type = models.CharField(verbose_name=u'类型', max_length=100, choices=user_type) client_ip = models.CharField(verbose_name='客户端IP',max_length=128,null=True, blank=True) username = models.CharField(verbose_name='用户',max_length=128, null=True, blank=True) comment = models.CharField(verbose_name='备注',max_length=1000, null=True, blank=True) add_time = models.DateTimeField(verbose_name=u"添加时间", default=datetime.now) class Meta: verbose_name = u"用户操作日志" verbose_name_plural = verbose_name def __unicode__(self): return self.username class PwdModifySuccess(UserActionLog): class Meta: verbose_name = u"密码修改成功" verbose_name_plural = verbose_name proxy = True class PwdResetSuccess(UserActionLog): class Meta: verbose_name = u"密码重置成功" verbose_name_plural = verbose_name proxy = True class UserUnlockSuccess(UserActionLog): class Meta: verbose_name = u"账号解锁成功" verbose_name_plural = verbose_name proxy = True class AdmActionLog(models.Model): adm_type = ( ("adm_update", u"更新信息"), ("adm_disable", u"禁用帐号"), ("adm_disable_lizhi", u"禁用帐号[离职]"), ("adm_enable", u"启用帐号"), ("adm_unlock", u"解锁帐号"), ("adm_reset_pwd", u"重置密码"), ("adm_enable_vpn", u"启用VPN"), ("adm_disable_vpn", u"禁用VPN") ) status = models.BooleanField(verbose_name=u'状态', default=True) adm_type= models.CharField(verbose_name=u'类型', max_length=100, choices=adm_type) client_ip = models.CharField(verbose_name='客户端IP', max_length=128, null=True, blank=True) username = models.CharField(verbose_name='用户',max_length=128, null=True, blank=True) comment = models.CharField(verbose_name='备注',max_length=128, null=True, blank=True) sa = models.CharField(verbose_name='操作用户', max_length=128, null=True, blank=True) add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"管理员操作日志" verbose_name_plural = verbose_name def __unicode__(self): return self.username]]></content>
  </entry>
  <entry>
    <title><![CDATA[域账号密码自助-后台逻辑]]></title>
    <url>%2Funcategorized%2F2579722334.html</url>
    <content type="text"><![CDATA[密码修改|重置核心类# coding:utf8import pythoncomimport win32com.clientclass NTUser(object): # Uses ADSI to change password under user privileges def __init__(self, username): # 初始化 pythoncom.CoInitialize() self.adsiNS = win32com.client.Dispatch('ADsNameSpaces') Userpath = "WinNT://10.105.42.13/" + username + ",user" self.adsNTUser = self.adsiNS.GetObject("", Userpath) def modify(self, old_password, new_password): self.adsNTUser.ChangePassword(old_password, new_password) # 释放资源 pythoncom.CoUninitialize() def reset(self, new_password): self.adsNTUser.SetPassword(new_password) # 释放资源 pythoncom.CoUninitialize() 密码修改class PwdModifyView(View): def get(self,request): current_year = datetime.now().year return render(request, "pwd-modify.html", &#123; 'current_year':current_year &#125;) def post(self,request): current_year = datetime.now().year if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] pwd_modify_form = PwdModifyForm(request.POST) if pwd_modify_form.is_valid(): username = request.POST.get("username", "") pwd_old = request.POST.get("pwd_old", "") pwd_new1 = request.POST.get("pwd_new1", "") pwd_new2 = request.POST.get("pwd_new2", "") # try: # user_profile = UserProfile.objects.get(username=username) # except Exception as e: # print e # user_profile = UserProfile() if pwd_new1 != pwd_new2: return render(request, 'pwd-modify.html',&#123; 'pwd_new_errors':True, "msg": "2次密码输入不一致!", 'current_year': current_year, 'pwd_modify_form':pwd_modify_form &#125;) try: nt = NTUser(username=username) nt.modify(pwd_old, pwd_new1) user_profile, created = UserProfile.objects.get_or_create(username=username) user_profile.password = make_password(pwd_new1) user_profile.save() data = &#123; 'username': username, 'email': '&#123;0&#125;@genewiz.com.cn'.format(username), 'ip': ip, 'current_year': current_year &#125; if SendMail(data, send_type='user_modify_pwd'): UserActionLog.objects.create( status=True, user_type='user_modify_pwd', client_ip=ip, username=username, comment='密码修改成功' ) return render(request, 'pwd-modify-success.html', &#123; 'pwd_modify_form':pwd_modify_form, 'ip': ip, 'time': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), "msg": "成功", 'current_year': current_year &#125;) except pythoncom.com_error, (hr, msg, exc, arg): stderr = exc[2] # cmd = 'Set-ADAccountPassword -Identity &#123;0&#125; -OldPassword (ConvertTo-SecureString -AsPlainText "&#123;1&#125;" -Force) -NewPassword (ConvertTo-SecureString -AsPlainText "&#123;2&#125;" -Force)'.format(username, pwd_old, pwd_new1) # p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) # stdout, stderr = p.communicate() # 释放资源 pythoncom.CoUninitialize() if stderr: if 'found' in stderr: UserActionLog.objects.create( status=False, user_type='user_modify_pwd', client_ip=ip, username=username, comment='帐号不存在,请重新输入!' ) return render(request, "pwd-modify.html", &#123; 'username_errors':True, 'pwd_modify_form': pwd_modify_form, 'msg': '帐号不存在,请重新输入!', 'current_year': current_year &#125;) elif 'correct' in stderr: UserActionLog.objects.create( status=False, user_type='user_modify_pwd', client_ip=ip, username=username, comment='旧密码有误,请重新输入!(输错5次,帐号将被锁定!)' ) return render(request, "pwd-modify.html", &#123; 'pwd_old_errors': True, 'pwd_modify_form': pwd_modify_form, 'msg': '旧密码有误!', 'current_year': current_year &#125;) elif 'meet' in stderr: UserActionLog.objects.create( status = False, user_type='user_modify_pwd', client_ip = ip, username = username, comment = '新密码不满足|复杂性|历史性|要求!' ) return render(request, "pwd-modify.html", &#123; 'pwd_new_errors': True, "msg": "新密码不满足|复杂性|历史性|要求!", 'pwd_modify_form':pwd_modify_form, 'current_year': current_year &#125;) elif 'denied' in stderr: cmd = 'powershell -command Get-ADUser -Identity %s -Properties lockedout' % username p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) stdout, stderr = p.communicate() data_list = stdout.strip().split('\r\n') while '' in data_list: data_list.remove('') data = &#123;&#125; for i in data_list: temp_list = [i.strip() for i in i.split(':')] if len(temp_list) == 2: k, v = temp_list else: k = temp_list[0] v = ":".join(temp_list[1:]) data[k] = v if data['LockedOut'] == 'True': UserActionLog.objects.create( status=False, user_type='user_modify_pwd', client_ip=ip, username=username, comment='帐号已被锁定!' ) return render(request, "pwd-modify.html", &#123; 'username_lock_errors': True, 'pwd_modify_form':pwd_modify_form, 'msg': '帐号已被锁定!', 'current_year': current_year &#125;) else: UserActionLog.objects.create( status=False, user_type='user_modify_pwd', client_ip=ip, username=username, comment='访问被拒绝，请稍后重试!' ) return render(request, "pwd-modify.html", &#123; 'username_lock_errors': True, 'pwd_modify_form':pwd_modify_form, 'msg': '访问被拒绝，请稍后重试!', 'current_year': current_year &#125;) else: UserActionLog.objects.create( status=False, user_type='user_modify_pwd', client_ip=ip, username=username, comment=stderr[:100] ) return render(request, "pwd-modify.html", &#123; 'pwd_new_errors': True, "msg": "发生未知错误，请联系管理员!", 'pwd_modify_form':pwd_modify_form, 'current_year': current_year &#125;) # else: # user_profile, created = UserProfile.objects.get_or_create(username=username) # user_profile.password = make_password(pwd_new1) # user_profile.save() # data = &#123; # 'username': username, # 'email': '&#123;0&#125;@genewiz.com.cn'.format(username), # 'ip': ip, # 'current_year': current_year # &#125; # if SendMail(data, send_type='user_modify_pwd'): # UserActionLog.objects.create( # status=True, # user_type='user_modify_pwd', # client_ip=ip, # username=username, # comment='密码修改成功' # ) # return render(request, 'pwd-modify-success.html', &#123; # 'pwd_modify_form':pwd_modify_form, # 'ip': ip, # 'time': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), # "msg": "成功", # 'current_year': current_year # &#125;) else: return render(request, "pwd-modify.html", &#123; 'current_year': current_year, 'pwd_modify_form':pwd_modify_form &#125;) 密码重置class PwdResetView(View): def get(self,request): if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] current_year = datetime.now().year username = request.GET.get("username", "") if username: cmd = 'powershell -command Get-ADUser -Identity &#123;0&#125;'.format(username) p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) stdout, stderr = p.communicate() if stderr: if 'find' in stderr: UserActionLog.objects.create( status = False, user_type = 'user_reset_pwd', client_ip = ip, username = username, comment = '帐号不存在,请重新输入!' ) return render(request, "pwd-reset.html", &#123; 'username_errors':True, 'msg': '帐号不存在,请重新输入!', 'username':username, 'current_year': current_year &#125;) else: user_profile, created = UserProfile.objects.get_or_create(username=username) if not user_profile.rescue_email: return render(request, 'pwd-reset2.html', &#123; 'success': True, 'user_profile': user_profile, 'current_year': current_year &#125;) else: return render(request, 'pwd-reset3.html', &#123; 'success': True, 'user_profile': user_profile, 'current_year': current_year &#125;) else: return render(request, "pwd-reset.html", &#123; 'current_year': current_year, &#125;) def post(self,request): current_year = datetime.now().year if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] pwd_reset_form = PwdResetForm(request.POST) if pwd_reset_form.is_valid(): username = request.POST.get("username", "") email = request.POST.get("email", "") reset_code = request.POST.get("reset_code", "") pwd_new1 = request.POST.get("pwd_new1", "") pwd_new2 = request.POST.get("pwd_new2", "") user_profile = UserProfile.objects.get(username=username) if pwd_new1 != pwd_new2: UserActionLog.objects.create( status=False, user_type='user_reset_pwd', client_ip=ip, username=username, comment='2次密码输入不一致!' ) return render(request,'pwd-reset3.html',&#123; 'pwd_new_errors': True, "msg": "2次密码输入不一致!", 'current_year': current_year, 'pwd_reset_form': pwd_reset_form, 'user_profile':user_profile &#125;) try: email_verify_record = EmailVerifyRecord.objects.get(code=reset_code,email=email, send_type='user_reset_pwd_code',user=user_profile, is_used=False) except Exception as e: UserActionLog.objects.create( status=False, user_type='user_reset_pwd', client_ip=ip, username=username, comment='重置码有误或已使用过!' ) return render(request, "pwd-reset3.html", &#123; 'pwd_reset_code_errors': True, "msg": "重置码有误或已使用过!", 'pwd_reset_form':pwd_reset_form, 'user_profile': user_profile, 'current_year': current_year &#125;) if email_verify_record: try: nt = NTUser(username=username) nt.reset(pwd_new1) data = &#123; 'username': username, 'email': '&#123;0&#125;@genewiz.com.cn'.format(username), 'ip': ip, 'pwd_new1': pwd_new1, 'current_year': current_year &#125; if SendMail(data, send_type='user_reset_pwd'): email_verify_record.is_used = True email_verify_record.save() UserActionLog.objects.create( status=True, user_type='user_reset_pwd', client_ip=ip, username=username, comment='密码重置成功' ) return render(request, 'pwd-reset-success.html', &#123; 'success': True, 'user_profile': user_profile, 'pwd_reset_form': pwd_reset_form, 'ip': ip, 'time': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), "msg": "成功", 'current_year': current_year &#125;) # cmd = 'Set-ADAccountPassword -identity "&#123;0&#125;" -Reset -NewPassword (ConvertTo-SecureString -AsPlainText "&#123;1&#125;" -Force)'.format(username, pwd_new1) # x = PxPowerShell() # x.start_process() # result = x.run(cmd) # x.stop_process() # p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) # stdout, stderr = p.communicate() except pythoncom.com_error, (hr, msg, exc, arg): stderr = exc[2] # 释放资源 pythoncom.CoUninitialize() if stderr: if 'meet' in stderr: UserActionLog.objects.create( status=False, user_type='user_reset_pwd', client_ip=ip, username=username, comment='新密码不满足|复杂性|历史性|要求!' ) return render(request, "pwd-reset3.html",&#123; 'pwd_new_errors': True, "msg": "新密码不满足|复杂性|历史性|要求!", 'user_profile': user_profile, 'current_year': current_year, 'pwd_reset_form':pwd_reset_form &#125;) else: UserActionLog.objects.create( status=False, user_type='user_reset_pwd', client_ip=ip, username=username, comment=stderr[:100] ) return render(request, "pwd-reset3.html",&#123; 'pwd_new_errors': True, "msg": "发生未知错误，请联系管理员!", 'user_profile': user_profile, 'current_year': current_year, 'pwd_reset_form':pwd_reset_form &#125;) else: username = request.POST.get("username", "") user_profile = UserProfile.objects.get(username=username) return render(request, "pwd-reset3.html", &#123; 'user_profile': user_profile, 'pwd_reset_form': pwd_reset_form, 'current_year': current_year &#125;) 密码重置码class PwdResetCodeView(View): def get(self, request): username = request.GET.get('username', '') user_profile = UserProfile.objects.get(username=username) email = user_profile.rescue_email if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] current_year = datetime.now().year data = &#123; 'username': username, 'email': email, 'ip': ip, 'current_year': current_year &#125; if SendMail(data, send_type='user_reset_pwd_code'): UserActionLog.objects.create( status=True, user_type = 'user_reset_pwd_code', client_ip=ip, username=username, comment='发送密码重置码' ) return HttpResponse(json.dumps(&#123;'status':'success', 'msg':'重置码发送成功，请查收!'&#125;), content_type='application/json') 邮箱绑定class EmailBindView(View): def get(self, request): current_year = datetime.now().year hashkey = CaptchaStore.generate_key() image_url = captcha_image_url(hashkey) if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] return render(request, 'email-bind-index.html', &#123; 'hashkey': hashkey, 'image_url': image_url, 'current_year': current_year &#125;) def post(self, request): current_year = datetime.now().year hashkey = CaptchaStore.generate_key() image_url = captcha_image_url(hashkey) if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] email_bind_form = EmailBindForm(request.POST) if email_bind_form.is_valid(): username = request.POST.get('username', '') pwd = request.POST.get('pwd', '') email = request.POST.get('email', '') cmd = 'powershell -command Get-ADUser -Identity &#123;0&#125;'.format(username) p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) stdout, stderr = p.communicate() if stderr: if 'find' in stderr: UserActionLog.objects.create( status = False, user_type = 'user_bind_email', client_ip = ip, username = username, comment = '帐号不存在,请重新输入!' ) return render(request, "email-bind-index.html", &#123; 'username_errors':True, 'msg': '帐号不存在,请重新输入!', 'email_bind_form': email_bind_form, 'hashkey': hashkey, 'image_url': image_url, 'current_year': current_year &#125;) else: user_profile, created = UserProfile.objects.get_or_create(username=username) user = authenticate(username=username, password=pwd) if user is not None: if user_profile.rescue_email: UserActionLog.objects.create( status=False, user_type='user_bind_email', client_ip=ip, username=username, comment='外部邮箱已绑定，请不要重复绑定!' ) return render(request, 'email-bind-fail.html', &#123; 'hashkey': hashkey, 'image_url': image_url, 'current_year': current_year &#125;) else: user_profile.rescue_email = email user_profile.save() UserActionLog.objects.create( status=True, user_type='user_bind_email', client_ip=ip, username=username, comment='外部邮箱绑定成功!' ) return render(request, 'email-bind-success.html', &#123; 'user_profile': user_profile, 'email_bind_form': email_bind_form, 'time': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), 'ip': ip &#125;) else: return render(request, 'email-bind-index.html', &#123; 'pwd_errors':True, 'msg': '密码错误！', 'hashkey': hashkey, 'image_url': image_url, 'email_bind_form': email_bind_form, 'current_year': current_year &#125;) else: return render(request, 'email-bind-index.html', &#123; 'hashkey': hashkey, 'image_url': image_url, 'email_bind_form':email_bind_form, 'current_year': current_year &#125;) 邮箱修改class EmailModifyView(View): def get(self, request): current_year = datetime.now().year if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] username = request.GET.get('username', '') if username: cmd = 'powershell -command Get-ADUser -Identity &#123;0&#125;'.format(username) p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) stdout, stderr = p.communicate() if stderr: if 'find' in stderr: UserActionLog.objects.create( status=False, user_type = 'user_modify_email', client_ip=ip, username=username, comment='帐号不存在,请重新输入!' ) return render(request, "email-modify-index.html", &#123; 'username_errors': True, 'msg': '帐号不存在,请重新输入!', 'username': username, 'current_year': current_year &#125;) else: user_profile, created = UserProfile.objects.get_or_create(username=username) if user_profile.rescue_email: return render(request, 'email-modify-submit.html', &#123; 'success': True, 'user_profile': user_profile, 'current_year': current_year, &#125;) else: return render(request, 'email-modify-fail.html', &#123; 'current_year': current_year &#125;) else: return render(request, 'email-modify-index.html', &#123; 'current_year': current_year &#125;) def post(self, request): current_year = datetime.now().year if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] email_modify_form = EmailModifyForm(request.POST) if email_modify_form.is_valid(): username = request.POST.get('username', '') email = request.POST.get('email', '') email_new = request.POST.get('email_new', '') reset_code = request.POST.get("reset_code", "") user_profile = UserProfile.objects.get(username=username) try: email_verify_record = EmailVerifyRecord.objects.get(code=reset_code,email=email, send_type='user_reset_email_code',user=user_profile, is_used=False) except Exception as e: UserActionLog.objects.create( status=False, user_type='user_modify_email', client_ip=ip, username=username, comment='重置码有误或已使用过!' ) return render(request, "email-modify-submit.html", &#123; 'email_reset_code_errors': True, "msg": "重置码有误或已使用过!", 'user_profile': user_profile, 'email_modify_form':email_modify_form, 'current_year': current_year &#125;) user_profile.rescue_email = email_new user_profile.save() email_verify_record.is_used = True email_verify_record.save() UserActionLog.objects.create( status=True, user_type='user_modify_email', client_ip=ip, username=username, comment='邮箱修改成功-' + email_new ) return render(request, 'email-modify-success.html', &#123; 'current_year': current_year, 'email_modify_form':email_modify_form, 'time': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), 'ip': ip &#125;) else: username = request.POST.get('username', '') user_profile = UserProfile.objects.get(username=username) return render(request, 'email-modify-submit.html',&#123; 'email_modify_form':email_modify_form, 'user_profile':user_profile, 'current_year': current_year, &#125;) 用户解锁class UserUnlockView(View): def get(self,request): if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] current_year = datetime.now().year hashkey = CaptchaStore.generate_key() image_url = captcha_image_url(hashkey) username = request.GET.get("username", "") if username: cmd = 'powershell -command Get-ADUser -Identity &#123;0&#125;'.format(username) p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) stdout, stderr = p.communicate() if stderr: if 'find' in stderr: UserActionLog.objects.create( status=False, user_type='user_unlock', client_ip=ip, username=username, comment='帐号不存在,请重新输入!' ) return render(request, "user-unlock-index.html", &#123; 'username_errors': True, 'msg': '帐号不存在,请重新输入!', 'username': username, 'current_year': current_year &#125;) else: # try: # user_profile = UserProfile.objects.get(username=username) # except Exception as e: # print e # user_profile = UserProfile() user_profile, created = UserProfile.objects.get_or_create(username=username) return render(request, 'user-unlock-submit.html', &#123; 'user_profile': user_profile, 'current_year': current_year, 'hashkey': hashkey, 'image_url': image_url &#125;) else: return render(request, "user-unlock-index.html", &#123; 'current_year': current_year, &#125;) def post(self, request): if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] current_year = datetime.now().year hashkey = CaptchaStore.generate_key() image_url = captcha_image_url(hashkey) user_unlock_form = UserUnlockForm(request.POST) username = request.POST.get("username", '') user_profile = UserProfile.objects.get(username=username) if user_unlock_form.is_valid(): cmd = 'powershell -Command Unlock-ADAccount -Identity %s' % username p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True) stdout, stderr = p.communicate() if stderr: UserActionLog.objects.create( status=False, user_type='user_unlock', client_ip=ip, username=username, comment='帐号解锁失败' ) return render(request, 'user-unlock-success.html', &#123; 'msg':'解锁失败', 'username':username, 'time': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), 'ip':ip &#125;) else: data = &#123; 'username': username, 'email': '&#123;0&#125;@genewiz.com.cn'.format(username), 'ip': ip, 'current_year': current_year &#125; if SendMail(data, send_type='user_unlock'): UserActionLog.objects.create( status=True, user_type='user_unlock', client_ip=ip, username=username, comment='帐号解锁成功' ) return render(request, 'user-unlock-success.html', &#123; 'msg':'解锁成功', 'username':username, 'time': time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), 'ip':ip &#125;) else: return render(request, 'user-unlock-submit.html', &#123; 'user_unlock_form': user_unlock_form, 'user_profile':user_profile, 'hashkey': hashkey, 'image_url': image_url, 'current_year': current_year, &#125;) 邮箱重置码class EmailResetCodeView(View): def get(self, request): username = request.GET.get('username', '') user_profile = UserProfile.objects.get(username=username) email = user_profile.rescue_email if request.META.has_key('HTTP_X_FORWARDED_FOR'): ip = request.META['HTTP_X_FORWARDED_FOR'] else: ip = request.META['REMOTE_ADDR'] current_year = datetime.now().year data = &#123; 'username': username, 'email': email, 'ip': ip, 'current_year': current_year &#125; if SendMail(data, send_type='user_reset_email_code'): UserActionLog.objects.create( status=True, user_type='user_reset_email_code', client_ip=ip, username=username, comment='发送邮箱验证码成功-' + email ) return HttpResponse(json.dumps(&#123;'status':'success', 'msg':'邮箱重置码发送成功，请查收!'&#125;), content_type='application/json')]]></content>
  </entry>
  <entry>
    <title><![CDATA[前端相关]]></title>
    <url>%2Funcategorized%2F1656965246.html</url>
    <content type="text"><![CDATA[响应式布局meta:vp IE:meta:compat col-xs-col-sm-col-md-col-lg- col--push- col--pull- 清除浮动 col--offset- hidden-xs visible-xs 导航栏目 navbar-fixed-bottom navbar-fixed-top navbar-static-top https://placeholder.com/google-code-prettify cdn加速cdn.code.baidu.com http://plugins.jquery.com/singlepagenav/https://daneden.github.io/animate.css/https://blog.csdn.net/u011127019/article/details/77165062 chartjs.org bootstrap模版https://bootswatch.com https://icomoon.io/]]></content>
  </entry>
  <entry>
    <title><![CDATA[Django项目实战]]></title>
    <url>%2FDjango%2F3085239228.html</url>
    <content type="text"><![CDATA[Django app users-用户管理 course-课程管理 organization-机构和教师管理 operation-用户操作管理 C:\Users\jianhu.yong&gt;mkvirtualenv mxonlineNew python executable in C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exeInstalling setuptools, pip, wheel...done.(mxonline) C:\Users\jianhu.yong&gt;(mxonline) C:\Users\jianhu.yong&gt;pip install django==1.9Collecting django==1.9 Downloading https://files.pythonhosted.org/packages/ea/9b/b5a6360b3dfcd88d4bad70f59da26cbde4bdec395a31bb26dc840e806a50/Django-1.9-py2.py3-none-any.whl (6.6MB) 100% |████████████████████████████████| 6.6MB 79kB/sInstalling collected packages: djangoSuccessfully installed django-1.9(mxonline) C:\Users\jianhu.yong&gt;cd Downloads(mxonline) C:\Users\jianhu.yong\Downloads&gt;pip install MySQL_python-1.2.5-cp27-none-win_amd64.whlProcessing c:\users\jianhu.yong\downloads\mysql_python-1.2.5-cp27-none-win_amd64.whlInstalling collected packages: MySQL-pythonSuccessfully installed MySQL-python-1.2.5 数据库配置DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'mxonline', 'USER':'root', 'PASSWORD':'root', 'HOST':'127.0.0.1' &#125;&#125; 新建数据库 生成默认数据表makemigrationsmigtate userapp model设计manage.py@MxOnline &gt; startapp users"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" startapp users C:/Users/jianhu.yong/PycharmProjects/MxOnlineFollowing files were affected C:\Users\jianhu.yong\PycharmProjects\MxOnline\users\tests.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\users\__init__.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\users\apps.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\users\admin.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\users\models.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\users\views.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\users\migrations\__init__.pyProcess finished with exit code 0 默认的user表不满足我们的需求，因此需要定制user表自定义userprofile覆盖默认user表 users.modelclass UserProfile(AbstractUser): nick_name = models.CharField(max_length=50, verbose_name=u'昵称', default="") birday = models.DateField(verbose_name=u"生日", null=True, blank=True) gender = models.CharField(max_length=5, choices=(("male", u"男"),("female", u"女")), default="female") address = models.CharField(max_length=100, default=u"") mobile = models.CharField(max_length=11, null=True, blank=True) image = models.ImageField(upload_to="image/%Y/%m/%m",default=u"image/default.png", max_length=100) class Meta: verbose_name = "用户信息" verbose_name_plural = verbose_name def __unicode__(self): return self.username settings.pyINSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users']AUTH_USER_MODEL = "users.UserProfile" (mxonline) C:\Users\jianhu.yong\Downloads&gt;pip install pillowCollecting pillow Downloading https://files.pythonhosted.org/packages/48/91/f058672c494e186dc900bb6253e8cbde3307da17aed0a2d1ebcfb80ab766/Pillow-5.2.0-cp27-cp27m-win_amd64.whl (1.5MB) 100% |████████████████████████████████| 1.5MB 2.4MB/sInstalling collected packages: pillowSuccessfully installed pillow-5.2.0 manage.py@MxOnline &gt; makemigrations users"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" makemigrations users C:/Users/jianhu.yong/PycharmProjects/MxOnlineMigrations for 'users': 0001_initial.py: - Create model UserProfileFollowing files were affected C:\Users\jianhu.yong\PycharmProjects\MxOnline\users\migrations\0001_initial.pyProcess finished with exit code 0 manage.py@MxOnline &gt; migrate users"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" migrate users C:/Users/jianhu.yong/PycharmProjects/MxOnlineOperations to perform: Apply all migrations: usersRunning migrations: Rendering model states... DONE Applying users.0001_initial... OKThe following content types are stale and need to be deleted: auth | userAny objects related to these content types by a foreign key will alsobe deleted. Are you sure you want to delete these content types?If you're unsure, answer 'no'. Type 'yes' to continue, or 'no' to cancel: yesProcess finished with exit code 0 app设计需要避免循环引用(a调用b，b调用a，最后ab都无法执行) EmailVerifyRecord邮箱验证码设计class EmailVerifyRecord(models.Model): code = models.CharField(max_length=20, verbose_name=u"验证码") email = models.EmailField(max_length=50, verbose_name=u"邮箱") send_type = models.CharField(choices=(("register", u"注册"),("forget", u"找回密码")), max_length=10) send_time = models.DateTimeField(default=datetime.now) # datetime.now() model编译时间生成默认时间 # datetime.now classs实例化时生成的时间 class Meta: verbose_name = u"邮箱验证码" verbose_name_plural = verbose_name``` PageBanner轮播图``` pythonclass Banner(models.Model): title = models.CharField(max_length=100, verbose_name=u"标题") image = models.ImageField(upload_to="banner/%Y/%m/", verbose_name=u"轮播图", max_length=100) url = models.URLField(max_length=200, verbose_name=u"访问地址") index = models.IntegerField(default=100,verbose_name=u"顺序") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"轮播图" verbose_name_plural = verbose_name``` courses models设计：新建app- courses课程基本信息- lesson 章节信息- video 视频信息- courseResouce 课程资源``` python models.py# conding:utf8from __future__ import unicode_literalsfrom datetime import datetimefrom django.db import models# Create your models here.class Course(models.Model): name = models.CharField(max_length=50, verbose_name=u"课程名") desc = models.CharField(max_length=300, verbose_name=u"课程描述") detail = models.TextField(verbose_name=u"课程详情") # TextField不限制max_length defree = models.CharField(choices=(("cj", u"初级"),("zj", u"中级"),("bj", u"高级")), max_length=2) learn_times = models.IntegerField(default=0, verbose_name=u"学习时长（分钟数）") students= models.IntegerField(default=0, verbose_name=u"学习人数") fav_nums= models.IntegerField(default=0, verbose_name=u"收藏人数") image = models.ImageField(upload_to="courses/%y/%m", verbose_name=u"封面图", max_length=100) click_nums = models.ImageField(default=0, verbose_name=u"点击数") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"课程" verbose_name_plural = verbose_nameclass Lesson(models.Model): course = models.ForeignKey(Course, verbose_name=u"课程") name = models.CharField(max_length=100 , verbose_name=u"章节名") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"章节" verbose_name_plural = verbose_nameclass Video(models.Model): lesson = models.ForeignKey(Lesson, verbose_name=u"章节") name = models.CharField(max_length=100 , verbose_name=u"视频名") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"视频" verbose_name_plural = verbose_nameclass CourseResource(models.Model): course = models.ForeignKey(Course, verbose_name=u"课程") name = models.CharField(max_length=100 , verbose_name=u"名称") download = models.FileField(upload_to="course/resourse/%Y/%m", verbose_name=u"资源文件", max_length=100) add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"课程资源" verbose_name_plural = verbose_name manage.py@MxOnline &gt; startapp organization"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" startapp organization C:/Users/jianhu.yong/PycharmProjects/MxOnlineFollowing files were affected C:\Users\jianhu.yong\PycharmProjects\MxOnline\organization\models.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\organization\admin.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\organization\apps.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\organization\views.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\organization\tests.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\organization\migrations\__init__.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\organization\__init__.pyProcess finished with exit code 0 CourseOrg 课程机构基本信息 Teacher 教师基本信息 CityDict 城市信息 # coding:utf8from __future__ import unicode_literalsfrom datetime import datetimefrom django.db import models# Create your models here.class CityDict(models.Model): name = models.CharField(max_length=20, verbose_name=u"城市") desc = models.CharField(max_length=200, verbose_name=u"描述") add_time= models.DateTimeField(default=datetime.now) class Meta: verbose_name = u"城市" verbose_name_plural = verbose_nameclass CourseOrg(models.Model): name = models.CharField(max_length=50, verbose_name=u"机构名称") desc = models.TextField(verbose_name=u"机构描述") click_nums = models.IntegerField(default=0, verbose_name=u"点击数") fav_nums= models.IntegerField(default=0, verbose_name=u"收藏数") image= models.ImageField(upload_to="org/%Y/%m", verbose_name=u"封面图", max_length=100) address = models.CharField(max_length=150, verbose_name=u"机构地址") city = models.ForeignKey(CityDict, verbose_name=u"所在城市") add_time = models.DateTimeField(default=datetime.now) class Meta: verbose_name = u"课程机构" verbose_name_plural = verbose_nameclass Teacher(models.Model): org = models.ForeignKey(CourseOrg, verbose_name=u"所属机构") name = models.CharField(max_length=50, verbose_name=u"教师名") work_years= models.IntegerField(default=0, verbose_name=u"工作年限") work_company = models.CharField(max_length=50, verbose_name=u"就职公司") work_position = models.CharField(max_length=50, verbose_name=u"公司职位") points = models.CharField(max_length=50, verbose_name=u"教学特点") click_nums = models.IntegerField(default=0, verbose_name=u"点击数") fav_nums = models.IntegerField(default=0, verbose_name=u"收藏数") add_time = models.DateTimeField(default=datetime.now) class Meta: verbose_name = u"教师" verbose_name_plural = verbose_name``` operation app设计- UserAsk 用户咨询- CourseComments 用户评论- UserFavorite 用户收藏- UserMessage 用户消息- UserCourse 用户学习的课程``` pythonmanage.py@MxOnline &gt; startapp operation"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" startapp operation C:/Users/jianhu.yong/PycharmProjects/MxOnlineFollowing files were affected C:\Users\jianhu.yong\PycharmProjects\MxOnline\operation\migrations\__init__.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\operation\apps.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\operation\views.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\operation\__init__.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\operation\models.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\operation\admin.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\operation\tests.pyProcess finished with exit code 0 # coding:utf8from __future__ import unicode_literalsfrom datetime import datetimefrom django.db import modelsfrom users.models import UserProfilefrom courses.models import Course# Create your models here.class UserAsk(models.Model): name = models.CharField(max_length=20, verbose_name=u"姓名") mobile = models.CharField(max_length=11, verbose_name=u"手机") course_name= models.CharField(max_length=50, verbose_name=u"课程名") add_time= models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"用户咨询" verbose_name_plural = verbose_nameclass CourseComments(models.Model): '''课程评论''' user = models.ForeignKey(UserProfile, verbose_name=u"用户") course = models.ForeignKey(Course, verbose_name=u"课程") comments = models.CharField(max_length=200, verbose_name=u"评论") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"课程评论" verbose_name_plural = verbose_nameclass UserFavorite(models.Model): user = models.ForeignKey(UserProfile, verbose_name=u"用户") course = models.ForeignKey(Course, verbose_name=u"课程") fav_id = models.IntegerField(default=0, verbose_name=u"数据ID") fav_type= models.IntegerField(choices=((1,"课程"), (2,"课程机构"), (3, "讲师")), default=1, verbose_name=u"收藏类型") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"用户收藏" verbose_name_plural =verbose_nameclass UserMessage(models.Model): user = models.IntegerField(default=0, verbose_name=u"接收用户") message = models.CharField(max_length=500, verbose_name=u"消息内容") has_read = models.BooleanField(default=False, verbose_name=u"是否已读") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"用户消息" verbose_name_plural = verbose_nameclass UserCourse(models.Model): user = models.ForeignKey(UserProfile, verbose_name=u"用户") course = models.ForeignKey(Course, verbose_name=u"课程") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") class Meta: verbose_name = u"用户课程" verbose_name_plural = verbose_name 添加至install apps settings.py manage.py@MxOnline &gt; makemigrations"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" makemigrations C:/Users/jianhu.yong/PycharmProjects/MxOnlineMigrations for 'courses': 0001_initial.py: - Create model Course - Create model CourseResource - Create model Lesson - Create model VideoMigrations for 'operation': 0001_initial.py: - Create model CourseComments - Create model UserAsk - Create model UserCourse - Create model UserFavorite - Create model UserMessageMigrations for 'users': 0002_banner_emailverifyrecord.py: - Create model Banner - Create model EmailVerifyRecordMigrations for 'organization': 0001_initial.py: - Create model CityDict - Create model CourseOrg - Create model TeacherFollowing files were affected C:\Users\jianhu.yong\PycharmProjects\MxOnline\organization\migrations\0001_initial.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\users\migrations\0002_banner_emailverifyrecord.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\operation\migrations\0001_initial.pyC:\Users\jianhu.yong\PycharmProjects\MxOnline\courses\migrations\0001_initial.pyProcess finished with exit code 0 新建apps包统一管理app 默认打钩，会在导入模块内容之前加入apps.xxx 通过设置解决import出错问题 但是python 运行会提示模块找不到错误 settings.py 后台管理系统 权限管理 少前端样式 快速开发 http://127.0.0.1:8000/admin 创建diango admin后台用户出错 重新修改下即可！ manage.py@MxOnline &gt; createsuperuser"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" createsuperuser C:/Users/jianhu.yong/PycharmProjects/MxOnlineUsername: adminEmail address: test@qq.comWarning: Password input may be echoed.Password: admin123Warning: Password input may be echoed.Password (again): admin123Superuser created successfully. 修改django admin修改为中文 settings.pysettings.pyLANGUAGE_CODE = 'zh-hans'LANGUAGE_CODE = 'zh-hans'TIME_ZONE = 'Asia/Shanghai'USE_I18N = TrueUSE_L10N = True#需要改成False，否侧django在数据库中存的时间为UTC国际时间！USE_TZ = False xadmin设置 (mxonline) C:\Users\jianhu.yong\PycharmProjects\MxOnline&gt;pip install xadminCollecting xadmin Downloading https://files.pythonhosted.org/packages/1d/e9/2ac160c532d0d462142fa90aa86a0e317295e8d86fa4caf84d04f6e24c49/xadmin-0.6.1.tar.gz (1.0MB) 100% |████████████████████████████████| 1.0MB 19kB/sRequirement already satisfied: setuptools in c:\users\jianhu.yong\envs\mxonline\lib\site-packages (from xadmin) (39.2.0)Requirement already satisfied: django&lt;2.0.0,&gt;=1.9.0 in c:\users\jianhu.yong\envs\mxonline\lib\site-packages (from xadmin) (1.9)Collecting django-crispy-forms&gt;=1.6.0 (from xadmin) Downloading https://files.pythonhosted.org/packages/9a/05/6bad05742d185ec2fabfa4deab05cafde286eb3f383fba24b3674340aca2/django_crispy_forms-1.7.2-py2.py3-none-any.whl (105kB) 100% |████████████████████████████████| 112kB 14kB/sCollecting django-formtools&gt;=1.0 (from xadmin) Downloading https://files.pythonhosted.org/packages/97/3f/b8e04c41c028d5cdad651393abea1f686d846c717d8ab5d5ebe2974f711c/django_formtools-2.1-py2.py3-none-any.whl (132kB) 100% |████████████████████████████████| 133kB 25kB/sCollecting httplib2==0.9.2 (from xadmin) Downloading https://files.pythonhosted.org/packages/ff/a9/5751cdf17a70ea89f6dde23ceb1705bfb638fd8cee00f845308bf8d26397/httplib2-0.9.2.tar.gz (205kB) 100% |████████████████████████████████| 215kB 23kB/sBuilding wheels for collected packages: xadmin, httplib2 Running setup.py bdist_wheel for xadmin ... done Stored in directory: C:\Users\jianhu.yong\AppData\Local\pip\Cache\wheels\4f\d7\9a\4699d04c2239f4ad9764de8d236d9df1344574067dd61ab201 Running setup.py bdist_wheel for httplib2 ... done Stored in directory: C:\Users\jianhu.yong\AppData\Local\pip\Cache\wheels\36\f2\49\5adbf90fba31e02a7784e1147d7f8b6c4af3718739e568c8cbSuccessfully built xadmin httplib2Installing collected packages: django-crispy-forms, django-formtools, httplib2, xadminSuccessfully installed django-crispy-forms-1.7.2 django-formtools-2.1 httplib2-0.9.2 xadmin-0.6.1 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'users', 'courses', 'organization', 'operation', 'xadmin', 'crispy_forms',] from django.conf.urls import urlfrom django.contrib import adminimport xadminurlpatterns = [ # url(r'^admin/', admin.site.urls), url(r'^xadmin/', xadmin.site.urls),] manage.py@MxOnline &gt; makemigrations"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" makemigrations C:/Users/jianhu.yong/PycharmProjects/MxOnlineNo changes detectedProcess finished with exit code 0manage.py@MxOnline &gt; migrate"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" migrate C:/Users/jianhu.yong/PycharmProjects/MxOnlineOperations to perform: Apply all migrations: xadmin, users, sessions, admin, auth, courses, contenttypes, organization, operationRunning migrations: Rendering model states... DONE Applying xadmin.0001_initial... OKProcess finished with exit code 0 http://sshwsfc.github.io/xadmin/ 基于源码安装xadmin 可自定义 功能最新 比pypi https://github.com/sshwsfc/xadmin BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps')) pip install futurepip install sixpip install django_import_export manage.py@MxOnline &gt; makemigrations"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" makemigrations C:/Users/jianhu.yong/PycharmProjects/MxOnlineNo changes detectedProcess finished with exit code 0manage.py@MxOnline &gt; migrate"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\mxonline\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" migrate C:/Users/jianhu.yong/PycharmProjects/MxOnlineOperations to perform: Apply all migrations: xadmin, users, sessions, admin, auth, courses, contenttypes, organization, operationRunning migrations: Rendering model states... DONE Applying xadmin.0002_log... OK Applying xadmin.0003_auto_20160715_0100... OK 设置脚本文件模版neirong 通过xadmin注册model 注册剩余models xadmin全局配置 from xadmin import viewsfrom .models import EmailVerifyRecord,Bannerclass BaseSetting(object): enable_themes = True use_bootswatch = Truexadmin.site.register(views.BaseAdminView, BaseSetting) class GlobalSettings(object): site_title = 'MX后台管理系统' site_footer = 'MX在线网'xadmin.site.register(views.CommAdminView, GlobalSettings) xadmin主题bug[SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure xadmin\plugins\themes.pyflag = Falseif flag: h = httplib2.Http() resp, content = h.request("https://bootswatch.com/api/3.json", 'GET', '', headers=&#123;"Accept": "application/json", "User-Agent": self.request.META['HTTP_USER_AGENT']&#125;) if six.PY3: content = content.decode() watch_themes = json.loads(content)['themes']else: content = requests.get("https://bootswatch.com/api/3.json") if six.PY3: content = content.text.decode() watch_themes = json.loads(content.text)['themes'] 修改为中文显示 __init__.pydefault_app_config = 'operation.apps.OperationConfig' apps.py# coding:utf8from django.apps import AppConfigclass OperationConfig(AppConfig): name = 'operation' verbose_name = u"用户操作" 首页和登录页的配置url(r'^$', TemplateView.as_view(template_name='index.html'), name='index'),url(r'^login/$', TemplateView.as_view(template_name='login.html'), name='login'), 用户登录配置 urls.pyurlpatterns = [ # url(r'^admin/', admin.site.urls), url(r'^xadmin/', xadmin.site.urls), url(r'^$', TemplateView.as_view(template_name='index.html'), name='index'), # url(r'^login/$', TemplateView.as_view(template_name='login.html'), name='login'), url(r'^login/$', user_login, name='login'),] views.pydef user_login(request): if request.method == 'POST': user_name = request.POST.get("username", '') pass_word = request.POST.get("password", '') user = authenticate(username=user_name,password=pass_word) if user is not None: login(request, user) return render(request, "index.html") else: return render(request, 'login.html', &#123;&#125;) pass elif request.method == 'GET': return render(request, 'login.html', &#123;&#125;)``` 自定义auth认证变量重写authenticate方法``` python views.pyfrom django.shortcuts import renderfrom django.contrib.auth import authenticate, loginfrom django.contrib.auth.backends import ModelBackendfrom .models import UserProfilefrom django.db.models import Q# 完成并集操作获得关系# Create your views here.class CustomBackend(ModelBackend): def authenticate(self, username=None, password=None, **kwargs): try: user = UserProfile.objects.get(Q(username=username)|Q(email=username)) if user.check_password(password): return user except Exception as e: return None settings.pyAUTHENTICATION_BACKENDS = ( 'users.views.CustomBackend',) views方法基于类，不基于函数书写 views.pyfrom django.views.generic.base import Viewclass LoginView(View): def get(self, request): return render(request, 'login.html', &#123;&#125;) def post(self, request): user_name = request.POST.get("username", '') pass_word = request.POST.get("password", '') user = authenticate(username=user_name,password=pass_word) if user is not None: login(request, user) return render(request, "index.html") else: return render(request, 'login.html', &#123;'msg':'用户名或密码错误！'&#125;) form实现登入 session &amp; cookies自动登录机制 cookies 浏览器本地存储方式机制，可以存储很多信息，存储在某个域名之下，存储在本地不安全！ session 服务器生成，存储在服务器端，安全，发送给用户，存储在cookies之中！ value 用户名密码加密字符串，服务器对session id取出value 并解密，实现自动登录 ！ 注释掉 自动登录就失效了！ 用户注册 &#123;% load staticfiles %&#125; 验证码插件 https://github.com/mbi/django-simple-captcha Install django-simple-captcha via pip: pip install django-simple-captchaAdd captcha to the INSTALLED_APPS in your settings.pyRun python manage.py migrateAdd an entry to your urls.py:urlpatterns += [ url(r'^captcha/', include('captcha.urls')),] pip install django-simple-captcha==0.4.6 配置邮箱设置！settings.py# Mail ConfigEMAIL_HOST = 'smtp.laohulab.com'EMAIL_PORT = 25EMAIL_HOST_USER = 'postmaster@qq.com'EMAIL_HOST_PASSWORD = 'XXXX'EMAIL_USE_TLS =FalseEMAIL_FROM = 'postmaster@qq.com' 注册邮件发送# coding:utf8__author__ = 'jianhu.yong'__date__ = '2018/7/5 16:29'from random import Randomfrom django.core.mail import send_mailfrom users.models import EmailVerifyRecordfrom MxOnline.settings import EMAIL_FROMdef random_str(randomlength=8): str = '' chars = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789' length = len(chars) -1 random =Random() for i in range(randomlength): str += chars[random.randint(0, length)] return strdef send_register_email(email, send_type='register'): email_record = EmailVerifyRecord() code = random_str(16) email_record.code = code email_record.email = email email_record.send_type = send_type email_record.save() email_title = '' email_body = '' if send_type == 'register': email_title = 'MX在线网注册激活链接' email_body = '请点击下面的链接激活你的账号：http://127.0.0.1:8000/active/&#123;0&#125;'.format(code) send_status = send_mail(email_title, email_body, EMAIL_FROM, [email]) if send_status: pass else: pass elif send_type == 'forget': email_title = 'MX在线网密码重置链接' email_body = '请点击下面的链接重置密码：http://127.0.0.1:8000/reset/&#123;0&#125;'.format(code) send_status = send_mail(email_title, email_body, EMAIL_FROM, [email]) if send_status: pass 激活用户设置 url(r'^active/(?P&lt;active_code&gt;\w+)/$', ActiveUserView.as_view(), name='user_active'),class ActiveUserView(View): def get(self, request, active_code): all_records = EmailVerifyRecord.objects.filter(code=active_code) if all_records: for record in all_records: email = record.email user = UserProfile.objects.get(email=email) user.is_active = True user.save() else: return render(request, 'active_fail.html') return render(request, 'login.html')``` 密码找回``` python url(r'^forget/$', ForgetPwdView.as_view(), name='forget_pwd'), url(r'^reset/(?P&lt;active_code&gt;\w+)/$', ResetView.as_view(), name='reset_pwd'), url(r'^modify/$', ModifyPwdView.as_view(), name='modify_pwd'),class RegisterView(View): def get(self, request): register_form = RegisterForm() return render(request, 'register.html', &#123;'register_form':register_form&#125;) def post(self, request): register_form = RegisterForm(request.POST) if register_form.is_valid(): user_name = request.POST.get('email', '') if UserProfile.objects.filter(email=user_name): return render(request, 'register.html', &#123;'msg':'用户已存在！','register_form': register_form&#125;) pass_word = request.POST.get('password', '') user_profile =UserProfile() user_profile.username = user_name user_profile.email = user_name user_profile.is_active = False user_profile.password = make_password(pass_word) user_profile.save() send_register_email(user_name, 'register') return render(request, 'login.html') else: return render(request, 'register.html', &#123;'register_form': register_form&#125;)class ForgetPwdView(View): def get(self, request): forgetpwd_form = ForgetPwdForm() return render(request, 'forgetpwd.html', &#123;'forgetpwd_form':forgetpwd_form&#125;) def post(self, request): forgetpwd_form = ForgetPwdForm(request.POST) if forgetpwd_form.is_valid(): email = request.POST.get('email', '') send_register_email(email, 'forget') return render(request, 'send_success.html') else: return render(request, 'forgetpwd.html', &#123;'forgetpwd_form':forgetpwd_form&#125;)class ResetView(View): def get(self, request, active_code): all_records = EmailVerifyRecord.objects.filter(code=active_code) if all_records: for record in all_records: email = record.email return render(request, 'password_reset.html', &#123;'email':email&#125;) else: return render(request, 'active_fail.html') return render(request, 'login.html')class ModifyPwdView(View): def post(self, request): modify_form = ModifyPwdForm(request.POST) if modify_form.is_valid(): pwd1 = request.POST.get('password1', '') pwd2 = request.POST.get('password2', '') email = request.POST.get('email', '') if pwd1 != pwd2: return render(request, 'password_reset.html', &#123;'email':email, 'msg':'密码不一致！'&#125;) user = UserProfile.objects.get(email=email) user.password = make_password(pwd2) user.save() return render(request, 'login.html') else: email = request.POST.get('email', '') return render(request, 'password_reset', &#123;'email':email, 'modify_form':modify_form&#125;) MEDIA_URL配置 调用静态imageTEMPLATES = [ &#123; 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')] , 'APP_DIRS': True, 'OPTIONS': &#123; 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', 'django.core.context_processors.media' ], &#125;, &#125;,] # upload settingMEDIA_URL = '/media/'MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # 配置上传文件的访问处理函数 url(r&apos;^media/(?P&lt;path&gt;.*)$&apos;, serve, {&apos;document_root&apos;:MEDIA_ROOT}), from django.views.static import servefrom MxOnline.settings import MEDIA_ROOT django分页功能！https://github.com/jamespacileo/django-pure-pagination p = Paginator(all_orgs, request=request)p = Paginator(all_orgs, 5, request=request) 使用默认，分页样式无法控制 列表筛选功能 机构排名和课程学习人数排序 modelform提交 外键关系&#123;&#123; course.lesson_set.all.count &#125;&#125; &#123;% for user_course in course.usercourse_set.all %&#125; &lt;span class="pic"&gt;&lt;img width="40" height="40" src="&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; user_course.user.image &#125;&#125;"/&gt;&lt;/span&gt; &#123;% endfor %&#125; def get_zj_nums(self): return self.lesson_set.all().count() def get_learn_users(self): return self.usercourse_set.all()[:5] &#123;&#123;course.get_zj_nums&#125;&#125;&#123;% for usercourse in course.get_learn_users %&#125; 用户上传文件htmlenctype=”multipart/form-data” 后端：class UploadImageView(LoginRequiredMixin, View): def post(self, request): image_form = UploadImageForm(request.POST, request.FILES) if image_form.is_valid(): image = image_form.cleaned_data['image'] request.user.image = image request.user.save() pass # def post(self, request): # image_form = UploadImageForm(request.POST, request.FILES, instance=request.user) # if image_form.is_valid(): # image_form.save()``` 4040 500配置 django xadmin 进阶开发debug 改成true时候注释STATIC_ROOT = os.path.join(BASE_DIR, 'static') url(r'^static/(?P&lt;path&gt;.*)$', serve, &#123;'document_root':STATIC_ROOT&#125;),model icon配置model_icon = 'fa fa-user'开源图标库https://fontawesome.com/![upload successful](/images/pasted-153.png)倒叙排列ordering = ['-click_nums']设置字段只读readonly_fields = ['click_nums', 'fav_nums']移除某个字段显示exclude = ['fav_nums']需要注意是否和readonly_fields冲突关联外键字段，添加搜索功能（针对外键数量很多是，自动搜索方便）relfield_style = 'fk-ajax'报错TypeError: Related Field got invalid lookup: icontains1原因出错原因是你配置的ModelAdmin类中，元组search_fields中的项不是字符类型。解决删除元组search_fields中类型不符的项xadmin inline模式``` pythonclass LessonInline(object): model = Lesson extra = 0class CourseAdmin(object): list_display = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] search_fields = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums'] list_filter = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] ordering = ['-click_nums'] readonly_fields = ['click_nums'] exclude = ['fav_nums'] inlines = [LessonInline]xadmin.site.register(Course, CourseAdmin)class LessonInline(object): model = Lesson extra = 0class CourseResourceInline(object): model = CourseResource extra = 0class CourseAdmin(object): list_display = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] search_fields = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums'] list_filter = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] ordering = ['-click_nums'] readonly_fields = ['click_nums'] exclude = ['fav_nums'] inlines = [LessonInline, CourseResourceInline]xadmin.site.register(Course, CourseAdmin) 同一个model 后台注册2个管理器，分别管理同一张表！class Course(models.Model): course_org = models.ForeignKey(CourseOrg, verbose_name=u"课程机构", null=True, blank=True) name = models.CharField(max_length=50, verbose_name=u"课程名") desc = models.CharField(max_length=300, verbose_name=u"课程描述") detail = models.TextField(verbose_name=u"课程详情") teacher = models.ForeignKey(Teacher, verbose_name=u"讲师", null=True, blank=True) # TextField不限制max_length degree = models.CharField(choices=(("cj", u"初级"),("zj", u"中级"),("bj", u"高级")), max_length=2, verbose_name=u"难度") learn_times = models.IntegerField(default=0, verbose_name=u"学习时长（分钟数）") students= models.IntegerField(default=0, verbose_name=u"学习人数") fav_nums= models.IntegerField(default=0, verbose_name=u"收藏人数") image = models.ImageField(upload_to="courses/%y/%m", verbose_name=u"封面图", max_length=100) click_nums = models.IntegerField(default=0, verbose_name=u"点击数") category = models.CharField(default=u"后端开发", max_length=20, verbose_name=u"课程类别") tag = models.CharField(default="", max_length=10, verbose_name= u"课程标签") youneed_know = models.CharField(max_length=300, verbose_name=u"课程须知", default="") teacher_tell = models.CharField(max_length=300 , verbose_name=u"老师告诉你学到什么", default="") is_banner = models.BooleanField(default=False, verbose_name=u"是否轮播") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") def get_zj_nums(self): return self.lesson_set.all().count() def get_learn_users(self): return self.usercourse_set.all()[:5] class Meta: verbose_name = u"课程" verbose_name_plural = verbose_name def __unicode__(self): return self.nameclass BannerCourse(Course): class Meta: verbose_name = u"轮播课程" verbose_name_plural = verbose_name proxy = True class CourseAdmin(object): list_display = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] search_fields = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums'] list_filter = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] ordering = ['-click_nums'] readonly_fields = ['click_nums'] exclude = ['fav_nums'] inlines = [LessonInline, CourseResourceInline] def queryset(self): qs = super(CourseAdmin, self).queryset() qs = qs.filter(is_banner=False) return qsxadmin.site.register(Course, CourseAdmin)class BannerCourseAdmin(object): list_display = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] search_fields = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums'] list_filter = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] ordering = ['-click_nums'] readonly_fields = ['click_nums'] exclude = ['fav_nums'] inlines = [LessonInline, CourseResourceInline] def queryset(self): qs = super(BannerCourseAdmin, self).queryset() qs = qs.filter(is_banner=True) return qsxadmin.site.register(BannerCourse, BannerCourseAdmin)list_editablelist_editable = ['name','degree'] list中 函数的引用class Course(models.Model): course_org = models.ForeignKey(CourseOrg, verbose_name=u"课程机构", null=True, blank=True) name = models.CharField(max_length=50, verbose_name=u"课程名") desc = models.CharField(max_length=300, verbose_name=u"课程描述") detail = models.TextField(verbose_name=u"课程详情") teacher = models.ForeignKey(Teacher, verbose_name=u"讲师", null=True, blank=True) # TextField不限制max_length degree = models.CharField(choices=(("cj", u"初级"),("zj", u"中级"),("bj", u"高级")), max_length=2, verbose_name=u"难度") learn_times = models.IntegerField(default=0, verbose_name=u"学习时长（分钟数）") students= models.IntegerField(default=0, verbose_name=u"学习人数") fav_nums= models.IntegerField(default=0, verbose_name=u"收藏人数") image = models.ImageField(upload_to="courses/%y/%m", verbose_name=u"封面图", max_length=100) click_nums = models.IntegerField(default=0, verbose_name=u"点击数") category = models.CharField(default=u"后端开发", max_length=20, verbose_name=u"课程类别") tag = models.CharField(default="", max_length=10, verbose_name= u"课程标签") youneed_know = models.CharField(max_length=300, verbose_name=u"课程须知", default="") teacher_tell = models.CharField(max_length=300 , verbose_name=u"老师告诉你学到什么", default="") is_banner = models.BooleanField(default=False, verbose_name=u"是否轮播") add_time = models.DateTimeField(default=datetime.now, verbose_name=u"添加时间") def get_zj_nums(self): return self.lesson_set.all().count() get_zj_nums.short_description = u'章节数' def get_learn_users(self): return self.usercourse_set.all()[:5] class Meta: verbose_name = u"课程" verbose_name_plural = verbose_name def __unicode__(self): return self.nameclass CourseAdmin(object): list_display = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time','get_zj_nums'] search_fields = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums'] list_filter = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time'] ordering = ['-click_nums'] readonly_fields = ['click_nums'] list_editable = ['name','degree'] exclude = ['fav_nums'] inlines = [LessonInline, CourseResourceInline] 自定义html代码def go_to(self): from django.utils.safestring import mark_safe return mark_safe('&lt;a href="http://www.baidu.com/&#123;0&#125;" target="_blank"&gt;Link&lt;/a&gt;'.format(self.name)) go_to.short_description = u'章节数' list_display = ['name','desc','detail','degree','learn_times','students','fav_nums','image','click_nums','add_time','get_zj_nums','go_to'] 定时刷新refresh_times = [3, 5] 数据发生变更触发操作 def save_models(self): obj = self.new_obj obj.save() course_org = obj.course_org if course_org: course_org.course_nums = Course.objects.filter(course_org=course_org).count() course_org.save()``` xadmin集成富文本编辑工具https://github.com/zhangfisher/DjangoUeditorpip install DjangoUeditorsetting.py 配置 instal appurl配置拷贝DjangoUeditor static html文件``` html&#123;% autoescape off %&#125;&#123;&#123; course.detail &#125;&#125;&#123;% endautoescape %&#125; https://blog.csdn.net/wgpython/article/details/79585205 uedit插件 excel插件 https://blog.csdn.net/win_turn/article/details/55517759http://django-simple-captcha.readthedocs.io/en/latest/usage.html#installation http://projectsedu.com/2017/08/15/centos7-%E4%B8%8B%E9%80%9A%E8%BF%87nginx-uwsgi%E9%83%A8%E7%BD%B2django%E5%BA%94%E7%94%A8/]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Django models]]></title>
    <url>%2FDjango%2F1160884897.html</url>
    <content type="text"><![CDATA[manage.py@djangodemo &gt; makemigrations messages"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\testvir01\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" makemigrations messages C:/Users/jianhu.yong/PycharmProjects/djangodemoNo changes detected in app 'messages'Process finished with exit code 0 解决方案settings配置文件中添加app信息即可 models.pyclass UserMessage(models.Model): name = models.CharField(max_length=20,verbose_name=u"用户名") email = models.EmailField(verbose_name=u"邮箱") address = models.CharField(max_length=100, verbose_name=u"联系地址") message = models.CharField(max_length=500,verbose_name=u"留言信息") class Meta: verbose_name = u"用户留言信息" verbose_name_plural = verbose_name urls.pyfrom django.conf.urls import urlfrom django.contrib import adminfrom message.views import getformurlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^form/',getform, name='form_get')]]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Windows安装mysql-python]]></title>
    <url>%2FDjango%2F559006889.html</url>
    <content type="text"><![CDATA[安装mysql-pythonpip install mysql-python 出现如下错误 解决方案https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python (testvir01) C:\Users\jianhu.yong\PycharmProjects\djangodemo&gt;pip install C:\Users\jianhu.yong\Downloads\MySQL_python-1.2.5-cp27-none-win_amd64.whlProcessing c:\users\jianhu.yong\downloads\mysql_python-1.2.5-cp27-none-win_amd64.whlInstalling collected packages: MySQL-pythonSuccessfully installed MySQL-python-1.2.5]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Django基础知识]]></title>
    <url>%2FDjango%2F1958507969.html</url>
    <content type="text"><![CDATA[创建Django项目 django目录结构保存django项目的urls、settings、uwsgi文件 新建项目app manage.py@djangodemo &gt; startapp message"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\testvir01\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" startapp message C:/Users/jianhu.yong/PycharmProjects/djangodemoFollowing files were affected C:\Users\jianhu.yong\PycharmProjects\djangodemo\message\apps.pyC:\Users\jianhu.yong\PycharmProjects\djangodemo\message\views.pyC:\Users\jianhu.yong\PycharmProjects\djangodemo\message\__init__.pyC:\Users\jianhu.yong\PycharmProjects\djangodemo\message\admin.pyC:\Users\jianhu.yong\PycharmProjects\djangodemo\message\tests.pyC:\Users\jianhu.yong\PycharmProjects\djangodemo\message\models.pyC:\Users\jianhu.yong\PycharmProjects\djangodemo\message\migrations\__init__.pyProcess finished with exit code 0 新建静态文件夹主要存放静态文件 js css img等 新建日志文件夹 新建用户上传文件夹 新建apps package 集中管理diango app 将message app移动至apps文件夹内 当我们在其他目录导入message时候，需要通过apps.message来导入！例如：from apps.message import views直接import message会提示错误 当我们想通过import message import views导入却发现有错误，这是需要将apps目录标记为Sources Root即可，但是又会带来另外一个问题，在命令行里面启动django项目，会提示message找不到的错误，这时需要修改settings配置文件中的BASEDIR变量即可！sys.path.append(os.path.join(BASE_DIR,&#39;apps&#39;))sys.path.insert(0, os.path.join(BASE_DIR, &#39;apps&#39;)) C:\WINDOWS\system32&gt;workonPass a name to activate one of the following virtualenvs:==============================================================================testvir01C:\WINDOWS\system32&gt;workon testvir01(testvir01) C:\Windows\System32&gt;cd C:\Users\jianhu.yong\PycharmProjects\djangodemo\(testvir01) C:\Users\jianhu.yong\PycharmProjects\djangodemo&gt;dir 驱动器 C 中的卷没有标签。 卷的序列号是 D8C0-E83A C:\Users\jianhu.yong\PycharmProjects\djangodemo 的目录2018/06/28 10:32 &lt;DIR&gt; .2018/06/28 10:32 &lt;DIR&gt; ..2018/06/28 10:37 &lt;DIR&gt; .idea2018/06/27 17:29 &lt;DIR&gt; apps2018/06/27 17:19 &lt;DIR&gt; djangodemo2018/06/27 17:19 &lt;DIR&gt; log2018/06/28 10:32 807 manage.py2018/06/27 17:20 &lt;DIR&gt; media2018/06/27 17:19 &lt;DIR&gt; static2018/06/27 17:19 &lt;DIR&gt; templates 1 个文件 807 字节 9 个目录 45,607,804,928 可用字节(testvir01) C:\Users\jianhu.yong\PycharmProjects\djangodemo&gt;python manage.py runserverTraceback (most recent call last): File "manage.py", line 4, in &lt;module&gt; import messageImportError: No module named message(testvir01) C:\Users\jianhu.yong\PycharmProjects\djangodemo&gt; Django留言板项目简单实战 安装mysql-pythonWindows安装mysql-python settings配置DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'testdb01', 'USER':'root', 'PASSWORD':'root', 'HOST':'127.0.0.1' &#125;&#125; TEMPLATES = [ &#123; 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')] , 'APP_DIRS': True, 'OPTIONS': &#123; 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], &#125;, &#125;,] # Static files (CSS, JavaScript, Images)# https://docs.djangoproject.com/en/1.10/howto/static-files/STATIC_URL = '/static/'STATICFILES_DIRS = [ os.path.join(BASE_DIR,'static'),] migration生成数据表manage.py@djangodemo &gt; makemigrations"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\testvir01\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" makemigrations C:/Users/jianhu.yong/PycharmProjects/djangodemoNo changes detected manage.py@djangodemo &gt; migrate"C:\Program Files\JetBrains\PyCharm 2017.1.2\bin\runnerw.exe" C:\Users\jianhu.yong\Envs\testvir01\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm 2017.1.2\helpers\pycharm\django_manage.py" migrate C:/Users/jianhu.yong/PycharmProjects/djangodemoOperations to perform: Apply all migrations: admin, auth, contenttypes, sessionsRunning migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying sessions.0001_initial... OKProcess finished with exit code 0 编写views.pyviews.pydef getform(request): return render(request, 'message_form.html') 配置urls.pyurls.pyfrom django.conf.urls import urlfrom django.contrib import adminfrom message.views import getformurlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^form/',getform, name='form_get')] 静态文件配置message_form.html&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel="stylesheet" href="/static/css/style.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="&#123;% url 'form_get' %&#125;" method="POST" class="smart-green"&gt; &lt;h1&gt;留言信息 &lt;span&gt;请留下你的信息.&lt;/span&gt; &lt;/h1&gt; &lt;label&gt; &lt;span&gt;姓名 :&lt;/span&gt; &lt;input id="name" type="text" name="name" value= &#123;% if not message.name == 'bobbytest' %&#125; 'bobby has test' &#123;% else %&#125; bobby &#123;% endif %&#125; class="error" placeholder="请输入您的姓名"/&gt; &lt;div class="error-msg"&gt;&lt;/div&gt; &lt;/label&gt; &lt;label&gt; &lt;span&gt;邮箱 :&lt;/span&gt; &lt;input id="email" type="email" name="email" value="&#123;&#123; message.email &#125;&#125;" placeholder="请输入邮箱地址"/&gt; &lt;div class="error-msg"&gt;&lt;/div&gt; &lt;/label&gt; &lt;label&gt; &lt;span&gt;联系地址 :&lt;/span&gt; &lt;input id="address" type="text" name="address" value="&#123;&#123; message.address &#125;&#125;" placeholder="请输入联系地址"/&gt; &lt;div class="error-msg"&gt;&lt;/div&gt; &lt;/label&gt; &lt;label&gt; &lt;span&gt;留言 :&lt;/span&gt; &lt;textarea id="message" name="message" placeholder="请输入你的建议"&gt;&#123;&#123; message.message &#125;&#125;&lt;/textarea&gt; &lt;div class="error-msg"&gt;&lt;/div&gt; &lt;/label&gt; &lt;div class="success-msg"&gt;&lt;/div&gt; &lt;label&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;input type="submit" class="button" value="提交"/&gt; &lt;/label&gt; &#123;% csrf_token %&#125;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; style.css.smart-green &#123; margin-left: auto; margin-right: auto; max-width: 500px; background: #F8F8F8; padding: 30px 30px 20px 30px; font: 12px Arial, Helvetica, sans-serif; color: #666; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px;&#125;.smart-green h1 &#123; font: 24px "Trebuchet MS", Arial, Helvetica, sans-serif; padding: 20px 0px 20px 40px; display: block; margin: -30px -30px 10px -30px; color: #FFF; background: #9DC45F; text-shadow: 1px 1px 1px #949494; border-radius: 5px 5px 0px 0px; -webkit-border-radius: 5px 5px 0px 0px; -moz-border-radius: 5px 5px 0px 0px; border-bottom: 1px solid #89AF4C;&#125;.smart-green h1 &gt; span &#123; display: block; font-size: 11px; color: #FFF;&#125;.smart-green label &#123; display: block; margin: 0px 0px 5px;&#125;.smart-green label &gt; span &#123; float: left; margin-top: 10px; color: #5E5E5E;&#125;.smart-green input[type="text"], .smart-green input[type="email"], .smart-green textarea, .smart-green select &#123; color: #555; height: 30px; line-height: 15px; width: 100%; padding: 0px 0px 0px 10px; margin-top: 2px; border: 1px solid #E5E5E5; background: #FBFBFB; outline: 0; -webkit-box-shadow: inset 1px 1px 2px rgba(238, 238, 238, 0.2); box-shadow: inset 1px 1px 2px rgba(238, 238, 238, 0.2); font: normal 14px/14px Arial, Helvetica, sans-serif;&#125;.smart-green textarea &#123; height: 100px; padding-top: 10px;&#125;.smart-green .button &#123; background-color: #9DC45F; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-border-radius: 5px; border: none; padding: 10px 25px 10px 25px; color: #FFF; text-shadow: 1px 1px 1px #949494;&#125;.smart-green .button:hover &#123; background-color: #80A24A;&#125;.error-msg&#123; color: red; margin-top: 10px;&#125;.success-msg&#123; color: #80A24A; margin-top: 10px; margin-bottom: 10px;&#125; 启动Django服务http://127.0.0.1:8000/form/]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Django-搭建开发环境]]></title>
    <url>%2FDjango%2F3444653517.html</url>
    <content type="text"><![CDATA[pycharm安装https://www.jetbrains.com/pycharm/ mysql安装https://dev.mysql.com/downloads/windows/ python2.7安装https://www.python.org/downloads/ navicat安装navicatformysql.zip virtual虚拟环境搭建-windows优点 使不同应用开发环境独立 环境升级不影响其他应用，也不会影响全局的python环境 防止系统中出现包管理混乱和版本冲突 virtuanlenv安装#安装pip install virtualenv#创建虚拟环境virtuanlenv testvir01#进入虚拟环境目录cd testvir01#激活虚拟环境activate.bat virtuanlenv管理虚拟环境不变，故安装virtualenvwrapper进行虚拟环境管理! 安装virtualenvwrapper Windows C:\WINDOWS\system32&gt;pip install virtualenvwrapper-winCollecting virtualenvwrapper-win Using cached https://files.pythonhosted.org/packages/87/70/ccebe989b112c42814fee4c145cfdac8fbcb174074b04bf8250b3052544f/virtualenvwrapper_win-1.2.5-py2-none-any.whlCollecting virtualenv (from virtualenvwrapper-win) Downloading https://files.pythonhosted.org/packages/b6/30/96a02b2287098b23b875bc8c2f58071c35d2efe84f747b64d523721dc2b5/virtualenv-16.0.0-py2.py3-none-any.whl (1.9MB) 100% |████████████████████████████████| 1.9MB 77kB/sInstalling collected packages: virtualenv, virtualenvwrapper-winSuccessfully installed virtualenv-16.0.0 virtualenvwrapper-win-1.2.5 Linux pip install virtualenvwrapper 创建虚拟环境C:\WINDOWS\system32&gt;mkvirtualenv testvir01 C:\Users\jianhu.yong\Envs is not a directory, creatingNew python executable in C:\Users\jianhu.yong\Envs\testvir01\Scripts\python.exeInstalling setuptools, pip, wheel...done.(testvir01) C:\Windows\System32&gt; 退出虚拟环境deactivate 查看虚拟环境C:\Windows\System32&gt;workonPass a name to activate one of the following virtualenvs:==============================================================================testvir01C:\Windows\System32&gt; 进入虚拟环境C:\Windows\System32&gt;workon testvir01(testvir01) C:\Windows\System32&gt; Django安装C:\Windows\System32&gt;workon testvir01(testvir01) C:\Windows\System32&gt;pip install django==1.10.4Collecting django==1.10.4 Downloading https://files.pythonhosted.org/packages/71/37/581a00bbc4571526ce88ef517c0c02ca7575ac2ae8a3671161d2aa14b740/Django-1.10.4-py2.py3-none-any.whl (6.8MB) 100% |████████████████████████████████| 6.8MB 28kB/sInstalling collected packages: djangoSuccessfully installed django-1.10.4 pycharm和navicat简单实用 设置keymap 连接&amp;创建数据库]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[requests实现windows身份验证登录]]></title>
    <url>%2Funcategorized%2F2252267221.html</url>
    <content type="text"><![CDATA[安装ntlmpip install requests_ntlm https://github.com/requests/requests-ntlm 使用import requestsfrom requests_ntlm import HttpNtlmAuthrequests.get("http://ntlm_protected_site.com",auth=HttpNtlmAuth('domain\\username','password'))]]></content>
  </entry>
  <entry>
    <title><![CDATA[picrust-installation]]></title>
    <url>%2FBioinformatics-Software%2F452847875.html</url>
    <content type="text"><![CDATA[官方文档http://picrust.github.io/picrust/install.html#install 安装picrustgit clone git://github.com/picrust/picrust.git picrustcd picrust/export C_INCLUDE_PATH="/YZGROUP/genewiz/public/download/blasr_install/hdf5/hdf5-1.8.16-linux-centos7-x86_64-gcc483-shared/include:$C_INCLUDE_PATH"export LIBRARY_PATH="/YZGROUP/genewiz/public/download/blasr_install/hdf5/hdf5-1.8.16-linux-centos7-x86_64-gcc483-shared/lib:$LIBRARY_PATH"pip install . --install-option="--prefix=/YZGROUP/genewiz/public/app/python-package"]]></content>
      <categories>
        <category>Bioinformatics Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tax4fun-installation]]></title>
    <url>%2FBioinformatics-Software%2F757553724.html</url>
    <content type="text"><![CDATA[帮助文档http://tax4fun.gobics.de/RPackage/Readme_Tax4Fun.pdf 安装依赖#进入终端模式/YZGROUP/genewiz/public/app/r-3.4.1/bin/R#安装依赖R包install.packages("qiimer")install.packages("Matrix")install.packages("RJSONIO")wget https://cran.r-project.org/src/contrib/Archive/biom/biom_0.3.12.tar.gz -P /tmp/install.packages("/tmp/biom_0.3.12.tar.gz", repos=NULL, type="source") install.packages(&quot;biom&quot;)安装会提示如下错误,经查官方已将其从安装源中移除!详见https://cran.r-project.org/web/packages/biom/index.html 安装Tax4Funwget http://tax4fun.gobics.de/Tax4Fun/Tax4Fun_0.3.1.tar.gz -P /tmp/install.packages("/tmp/Tax4Fun_0.3.1.tar.gz", repos = NULL, type = "source")]]></content>
      <categories>
        <category>Bioinformatics Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7忘记root密码解决办法]]></title>
    <url>%2FCentOS%2F2528284161.html</url>
    <content type="text"><![CDATA[按esc进入菜单栏 按e编辑模式 按Ctrl+X启动 passwd修改密码 由于selinux开启着的需要执行以下命令更新系统信息,否则重启之后密码未生效touch /.autorelabel 重启系统exec /sbin/init]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LIBRARY_PATH和LD_LIBRARY_PATH的区别]]></title>
    <url>%2FLinux%2F2362162236.html</url>
    <content type="text"><![CDATA[关于Linux gcc中的 LIBRARY_PATH 和 LD_LIBRARY_PATH 参数说明下面摘取了两篇较权威的说明资料： GNU 上关于LIBRARY_PATH的说明 LIBRARY_PATHThe value of LIBRARY_PATH is a colon-separated list of directories, much like PATH.When configured as a native compiler, GCC tries the directories thus specified when searching for special linker files, if it can't find them using GCC_EXEC_PREFIX.Linking using GCC also uses these directories when searching for ordinary libraries for the -l option (but directories specified with -L come first). man7 上关于LD_LIBRARY_PATH的说明 LD_LIBRARY_PATHA colon-separated list of directories in which to search for ELF libraries at execution-time. Similar to the PATH environment variable. Ignored in set-user-ID and set-group-ID programs. StackOverflow 上关于 LIBRARY_PATH 和 LD_LIBRARY_PATH 的解释更直白 LIBRARY_PATH is used by gcc before compilation to search for directories containing libraries that need to be linked to your program.LD_LIBRARY_PATH is used by your program to search for directories containing the libraries after it has been successfully compiled and linked.EDIT: As pointed below, your libraries can be static or shared.If it is static then the code is copied over into your program and you don't need to search for the library after your program is compiled and linked.If your library is shared then it needs to be dynamically linked to your program and that's when LD_LIBRARY_PATH comes into play. 总结关于 LIBRARY_PATH 和 LD_LIBRARY_PATH 的关系，总结如下。 Linux gcc编译链接时的动态库搜索路径 GCC编译、链接生成可执行文件时，动态库的搜索路径顺序如下1、gcc编译、链接命令中的-L选项；2、gcc的环境变量的LIBRARY_PATH（多个路径用冒号分割）；3、gcc默认动态库目录：/lib:/usr/lib:usr/lib64:/usr/local/lib。4.2 执行二进制文件时的动态库搜索路径 注意不会递归性地在其子目录下搜索! 链接生成二进制可执行文件后，在运行程序加载动态库文件时，搜索的路径顺序如下 - 编译目标代码时指定的动态库搜索路径：用选项-Wl,rpath和include指定的动态库的搜索路径，比如gcc -Wl,-rpath,include -L. -ldltest hello.c，在执行文件时会搜索路径`./include`；- 环境变量LD_LIBRARY_PATH（多个路径用冒号分割）；- 在 /etc/ld.so.conf.d/ 目录下的配置文件指定的动态库绝对路径（通过ldconfig生效，一般是非root用户时使用）；- gcc默认动态库目录：/lib:/usr/lib:usr/lib64:/usr/local/lib等。 Linux GCC默认的动态库搜索路径可以通过 ld –verbose 命令查看： [genewiznj@njgate01 picrust]$ ld --verbose |grep -i search_dirSEARCH_DIR("/usr/x86_64-redhat-linux/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/x86_64-redhat-linux/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux挂载ntfs设备]]></title>
    <url>%2Funcategorized%2F814301255.html</url>
    <content type="text"><![CDATA[下载软件包https://tuxera.com/opensource/ntfs-3g_ntfsprogs-2016.2.22.tgz 安装依赖yum -y install gcc gcc-c++ 编译安装tar zxvf ntfs-3g_ntfsprogs-2016.2.22.tgzcd ntfs-3g_ntfsprogs-2016.2.22./configure --prefix=/opt/genewiznj/ntfs-3gmake &amp;&amp; make install 挂载测试mount -t ntfs-3g /dev/sdb1 /opt/genewiznj/usb]]></content>
  </entry>
  <entry>
    <title><![CDATA[浪潮服务器相关配置]]></title>
    <url>%2Funcategorized%2F2457837870.html</url>
    <content type="text"><![CDATA[修改BMC密码#!/bin/bashbmc_user="xxx"bmc_password="xxx"for ip in `seq 185 192`do /usr/bin/ipmitool -H 10.10.38.$ip -I lanplus -U $bmc_user -P $bmc_password user set password 2 xxx &amp;&gt; /dev/null if [ $? -eq 0 ];then echo -e "\033[34mServer:$ip bmc password has been modified successful\033[0m" else echo -e "\033[31mServer:$ip bmc password modified failuer\033[0m" fidone fru-change工具使用简介 适用范围所有带有BMC 模块的浪潮服务器产品及Linux操作系统。 功能说明fru-change 工具用于对本地和远端服务器上FRU 设备信息的修改。 FRU可修改字段明细 命令格式-kcs：表示在服务器本机上通过KCS 方式改写FRU 设备信息-nw：表示通过网络改写远端服务器的FRU 设备信息 修改服务器位置信息（修改即生效，无需重启服务器） 查看修改信息 未修改前： 修改后：]]></content>
  </entry>
  <entry>
    <title><![CDATA[LVM逻辑卷在线动态扩容]]></title>
    <url>%2FLinux%2F2831866438.html</url>
    <content type="text"><![CDATA[环境：centos6 将需要扩容硬盘插入指定服务器[root@huidu_hx_127_88 ~]# /opt/MegaRAID/MegaCli/MegaCli64 -PDList -aALL Adapter #0Enclosure Device ID: 32Slot Number: 2Enclosure position: 1Device Id: 2WWN: 5000C50084869FF8Sequence Number: 1Media Error Count: 0Other Error Count: 0Predictive Failure Count: 0Last Predictive Failure Event Seq Number: 0PD Type: SASRaw Size: 931.512 GB [0x74706db0 Sectors]Non Coerced Size: 931.012 GB [0x74606db0 Sectors]Coerced Size: 931.0 GB [0x74600000 Sectors]Sector Size: 0Firmware state: Unconfigured(good), Spun UpDevice Firmware Level: AS0BShield Counter: 0Successful diagnostics completion on : N/ASAS Address(0): 0x5000c50084869ff9SAS Address(1): 0x0Connected Port Number: 2(path0) Inquiry Data: SEAGATE ST91000640SS AS0B9XG9K9R0 FDE Capable: Not CapableFDE Enable: DisableSecured: UnsecuredLocked: UnlockedNeeds EKM Attention: NoForeign State: None Device Speed: 6.0Gb/s Link Speed: 6.0Gb/s Media Type: Hard Disk DeviceDrive Temperature :17C (62.60 F)PI Eligibility: No Drive is formatted for PI information: NoPI: No PIPort-0 :Port status: ActivePort's Linkspeed: 6.0Gb/s Port-1 :Port status: ActivePort's Linkspeed: Unknown Drive has flagged a S.M.A.R.T alert : NoEnclosure Device ID: 32Slot Number: 3Enclosure position: 1Device Id: 3WWN: 5000C50084857234Sequence Number: 1Media Error Count: 0Other Error Count: 0Predictive Failure Count: 0Last Predictive Failure Event Seq Number: 0PD Type: SASRaw Size: 931.512 GB [0x74706db0 Sectors]Non Coerced Size: 931.012 GB [0x74606db0 Sectors]Coerced Size: 931.0 GB [0x74600000 Sectors]Sector Size: 0Firmware state: Unconfigured(good), Spun UpDevice Firmware Level: AS0BShield Counter: 0Successful diagnostics completion on : N/ASAS Address(0): 0x5000c50084857235SAS Address(1): 0x0Connected Port Number: 3(path0) Inquiry Data: SEAGATE ST91000640SS AS0B9XG9KD2Q FDE Capable: Not CapableFDE Enable: DisableSecured: UnsecuredLocked: UnlockedNeeds EKM Attention: NoForeign State: None Device Speed: 6.0Gb/s Link Speed: 6.0Gb/s Media Type: Hard Disk DeviceDrive Temperature :18C (64.40 F)PI Eligibility: No Drive is formatted for PI information: NoPI: No PIPort-0 :Port status: ActivePort's Linkspeed: 6.0Gb/s Port-1 :Port status: ActivePort's Linkspeed: Unknown Drive has flagged a S.M.A.R.T alert : No 确认JBOD模式为禁用状态[root@huidu_hx_127_88 ~]# /opt/MegaRAID/MegaCli/MegaCli64 -AdpGetProp -enablejbod -aALL Adapter 0: JBOD: DisabledExit Code: 0x00 创建raid1[root@huidu_hx_127_88 ~]# /opt/MegaRAID/MegaCli/MegaCli64 -CfgLdAdd -r1 [32:2,32:3] WB Direct -a0 Adapter 0: Created VD 1Adapter 0: Configured the Adapter!!Exit Code: 0x00[root@huidu_hx_127_88 ~]# ll /dev/sdsda sda1 sda2 sdb 查看raid状态[root@huidu_hx_127_88 ~]# /opt/MegaRAID/MegaCli/MegaCli64 -LDInfo -LALL -aAll Adapter 0 -- Virtual Drive Information:Virtual Drive: 0 (Target Id: 0)Name :RAID Level : Primary-1, Secondary-0, RAID Level Qualifier-0Size : 185.75 GBSector Size : 512Mirror Data : 185.75 GBState : OptimalStrip Size : 64 KBNumber Of Drives : 2Span Depth : 1Default Cache Policy: WriteBack, ReadAdaptive, Direct, No Write Cache if Bad BBUCurrent Cache Policy: WriteBack, ReadAdaptive, Direct, No Write Cache if Bad BBUDefault Access Policy: Read/WriteCurrent Access Policy: Read/WriteDisk Cache Policy : Disk's DefaultEncryption Type : NoneDefault Power Savings Policy: Controller DefinedCurrent Power Savings Policy: NoneCan spin up in 1 minute: NoLD has drives that support T10 power conditions: NoLD's IO profile supports MAX power savings with cached writes: NoBad Blocks Exist: NoIs VD Cached: NoVirtual Drive: 1 (Target Id: 1)Name :RAID Level : Primary-1, Secondary-0, RAID Level Qualifier-0Size : 931.0 GBSector Size : 512Mirror Data : 931.0 GBState : OptimalStrip Size : 64 KBNumber Of Drives : 2Span Depth : 1Default Cache Policy: WriteBack, ReadAdaptive, Direct, No Write Cache if Bad BBUCurrent Cache Policy: WriteBack, ReadAdaptive, Direct, No Write Cache if Bad BBUDefault Access Policy: Read/WriteCurrent Access Policy: Read/WriteDisk Cache Policy : Disk's DefaultEncryption Type : NoneDefault Power Savings Policy: Controller DefinedCurrent Power Savings Policy: NoneCan spin up in 1 minute: YesLD has drives that support T10 power conditions: YesLD's IO profile supports MAX power savings with cached writes: NoBad Blocks Exist: NoIs VD Cached: YesCache Cade Type : Read OnlyExit Code: 0x00[root@huidu_hx_127_88 ~]# ll /dev/sdsda sda1 sda2 sdb [root@huidu_hx_127_88 ~]# fdisk -l /dev/sdbDisk /dev/sdb: 999.7 GB, 999653638144 bytes255 heads, 63 sectors/track, 121534 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000 LVM分区[root@huidu_hx_127_88 ~]# fdisk /dev/sdbDevice contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0x7b065bfc.Changes will remain in memory only, until you decide to write them.After that, of course, the previous content won't be recoverable.Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)WARNING: DOS-compatible mode is deprecated. It's strongly recommended to switch off the mode (command 'c') and change display units to sectors (command 'u').Command (m for help): nCommand action e extended p primary partition (1-4)pPartition number (1-4): 1First cylinder (1-121534, default 1): Using default value 1Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-121534, default 121534): Using default value 121534Command (m for help): tSelected partition 1Hex code (type L to list codes): 8eChanged system type of partition 1 to 8e (Linux LVM)Command (m for help): pDisk /dev/sdb: 999.7 GB, 999653638144 bytes255 heads, 63 sectors/track, 121534 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x7b065bfc Device Boot Start End Blocks Id System/dev/sdb1 1 121534 976221823+ 8e Linux LVMCommand (m for help): wThe partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks. 创建物理卷（PV）[root@huidu_hx_127_88 ~]# pvcreate /dev/sdb1 dev_is_mpath: failed to get device for 8:17 Physical volume "/dev/sdb1" successfully created [root@huidu_hx_127_88 ~]# pvscan PV /dev/sda2 VG vg_root lvm2 [185.62 GiB / 0 free] PV /dev/sdb1 lvm2 [931.00 GiB] Total: 2 [1.09 TiB] / in use: 1 [185.62 GiB] / in no VG: 1 [931.00 GiB] 扩展卷组（VG）[root@huidu_hx_127_88 ~]# vgextend vg_root /dev/sdb1 Volume group "vg_root" successfully extended[root@huidu_hx_127_88 ~]# pvscan PV /dev/sda2 VG vg_root lvm2 [185.62 GiB / 0 free] PV /dev/sdb1 VG vg_root lvm2 [930.97 GiB / 930.97 GiB free] Total: 2 [1.09 TiB] / in use: 2 [1.09 TiB] / in no VG: 0 [0 ] 扩展LV（将新的VG空间划入LV，扩容lv_opt）[root@huidu_hx_127_88 ~]# lvextend -l +100%FREE /dev/vg_root/lv_opt Extending logical volume lv_opt to 1.03 TiB Logical volume lv_opt successfully resized 更新磁盘blocks[root@huidu_hx_127_88 ~]# resize2fs /dev/vg_root/lv_opt resize2fs 1.41.12 (17-May-2010)Filesystem at /dev/vg_root/lv_opt is mounted on /opt; on-line resizing requiredold desc_blocks = 8, new_desc_blocks = 67Performing an on-line resize of /dev/vg_root/lv_opt to 277504000 (4k) blocks.The filesystem on /dev/vg_root/lv_opt is now 277504000 blocks long. 查看分区状态[root@huidu_hx_127_88 ~]# df -hTFilesystem Type Size Used Avail Use% Mounted on/dev/mapper/vg_root-lv_root ext4 50G 9.3G 38G 20% /tmpfs tmpfs 24G 0 24G 0% /dev/shm/dev/sda1 ext3 97M 30M 63M 32% /boot/dev/mapper/vg_root-lv_opt ext4 1.1T 105G 885G 11% /opt]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>lvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[/etc/resolv.conf配置详解]]></title>
    <url>%2Funcategorized%2F3307312087.html</url>
    <content type="text"><![CDATA[options timeout:n attempts:ntimeout是指连接某个dns server有问题造成堵塞的超时值，单位是秒；attempts是指解析域名尝试的次数。 根据内核源码/usr/include/resolv.h中的定义：# define MAXNS 3 /* max # name servers we’ll track */# define MAXDNSRCH 6 /* max # domains in search path */# define RES_TIMEOUT 5 /* min. seconds between retries */# define RES_DFLRETRY 2 /* Default #/tries. */ 可以知道： resolv.conf里的nameserver只能有3个，多写的无效； timeout默认是5秒； attempts默认是2次，也就是解析域名尝试的次数 此值必须大于等于1 这里的“次数”如果是1，指从nameserver1到nameserver3都做了尝试（碰巧都失败）。并非指某个nameserver的尝试次数。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Harbor部署]]></title>
    <url>%2FDocker%2F3113137305.html</url>
    <content type="text"><![CDATA[服务器信息Model：Dell PowerEdge R730xdCPU：2*Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHzMEM：32GDISK：2*300G(RAID 1) + 16*6T(RAID 5 mount /opt/tuniu/docker)NIC：2*10GOS:CentOS Linux release 7.2.1511 (Core)IP：10.40.191.176DNS:tcr.tuniu.io(流量较大，直接解析至Harbor服务器，不经过负载均衡) 部署Harbor先决条件 Python should be version 2.7 or higherCentos 7 Python版本默认Python 2.7.5，满足条件，跳过 Docker engine should be version 1.10 or higher(https://docs.docker.com/engine/installation/) vim /etc/yum.repos.d/docker.repo [dockerrepo]name=Docker Repositorybaseurl=https://mirrors.tuna.tsinghua.edu.cn/docker/yum/repo/centos7enabled=1gpgcheck=0 yum clean allyum -y install docker-engine Docker Compose needs to be version 1.6.0 or higher(https://docs.docker.com/compose/install/) curl -L "https://github.com/docker/compose/releases/download/1.10.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose [root@harbor-hx-191-176 ~]# docker-compose --versiondocker-compose version 1.9.0, build 2585387 开始部署Harbor 下载Harbor最新版本https://github.com/vmware/harbor/releases/download/0.5.0/harbor-offline-installer-0.5.0.tgz #本次采用离线安装包安装wget https://github.com/vmware/harbor/releases/download/0.5.0/harbor-offline-installer-0.5.0.tgz -P /opt/tuniu/docker 解压安装包cd /opt/tuniu/dockertar zxvf harbor-offline-installer-0.5.0.tgz 创建相关目录mkdir -p /opt/tuniu/docker/harbor/&#123;ssl,data,logs&#125; 拷贝证书至SSL目录ll /opt/tuniu/docker/harbor/ssl/-r-------- 1 root root 3766 Jan 25 13:47 tuniu.io.crt-r-------- 1 root root 1679 Jan 25 13:47 tuniu.io.key 拷贝旧版本Harbor数据至data、log目录vim /opt/tuniu/docker/harbor/Deploy/docker-compose.yml （10.10.10.150) 拷贝registry、mysql对应数据至10.40.191.176:/opt/tuniu/docker/harbor/data/目录拷贝logd对应数据至10.40.191.176:/opt/tuniu/docker/harbor/logs/目录 [root@harbor-hx-191-176 docker]# ll /opt/tuniu/docker/harbor/data/total 0drwxr-xr-x 5 systemd-bus-proxy ssh_keys 155 Jan 25 13:54 databasedrwxr-xr-x 3 root root 27 May 4 2016 registry [root@harbor-hx-191-176 docker]# ll /opt/tuniu/docker/harbor/logs/total 12drwxr-xr-x 218 root root 8192 Jan 24 10:02 harbor 数据库表升级https://github.com/vmware/harbor/blob/master/docs/migration_guide.md 下载官方迁移工具docker pull vmware/harbor-db-migratordocker run -ti --rm -e DB_USR=root -e DB_PWD=root123 -v /opt/tuniu/docker/harbor/data/database/:/var/lib/mysql vmware/harbor-db-migrator up head Please backup before upgrade.Enter y to continue updating or n to abort:yTrying to start mysql server...MySQL Community Server 5.6.33 is not running.2017-01-25 08:42:16 0 [Note] mysqld (mysqld 5.6.33) starting as process 7 ...2017-01-25 08:42:17 7 [Note] Plugin 'FEDERATED' is disabled.2017-01-25 08:42:17 7 [Note] InnoDB: Using atomics to ref count buffer pool pages2017-01-25 08:42:17 7 [Note] InnoDB: The InnoDB memory heap is disabled2017-01-25 08:42:17 7 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins2017-01-25 08:42:17 7 [Note] InnoDB: Memory barrier is not used2017-01-25 08:42:17 7 [Note] InnoDB: Compressed tables use zlib 1.2.82017-01-25 08:42:17 7 [Note] InnoDB: Using Linux native AIO2017-01-25 08:42:17 7 [Note] InnoDB: Using CPU crc32 instructions2017-01-25 08:42:17 7 [Note] InnoDB: Initializing buffer pool, size = 128.0M2017-01-25 08:42:17 7 [Note] InnoDB: Completed initialization of buffer pool2017-01-25 08:42:17 7 [Note] InnoDB: Highest supported file format is Barracuda.2017-01-25 08:42:17 7 [Note] InnoDB: Log scan progressed past the checkpoint lsn 276806882017-01-25 08:42:17 7 [Note] InnoDB: Database was not shutdown normally!2017-01-25 08:42:17 7 [Note] InnoDB: Starting crash recovery.2017-01-25 08:42:17 7 [Note] InnoDB: Reading tablespace information from the .ibd files...2017-01-25 08:42:17 7 [Note] InnoDB: Restoring possible half-written data pages 2017-01-25 08:42:17 7 [Note] InnoDB: from the doublewrite buffer...InnoDB: Doing recovery: scanned up to log sequence number 276806982017-01-25 08:42:17 7 [Note] InnoDB: 128 rollback segment(s) are active.2017-01-25 08:42:17 7 [Note] InnoDB: Waiting for purge to start2017-01-25 08:42:17 7 [Note] InnoDB: 5.6.33 started; log sequence number 276806982017-01-25 08:42:17 7 [Note] Server hostname (bind-address): '*'; port: 33062017-01-25 08:42:17 7 [Note] IPv6 is available.2017-01-25 08:42:17 7 [Note] - '::' resolves to '::';2017-01-25 08:42:17 7 [Note] Server socket created on IP: '::'.2017-01-25 08:42:17 7 [Warning] 'proxies_priv' entry '@ root@b55fac88ee06' ignored in --skip-name-resolve mode.2017-01-25 08:42:17 7 [Note] Event Scheduler: Loaded 0 events2017-01-25 08:42:17 7 [Note] mysqld: ready for connections.Version: '5.6.33' socket: '/var/run/mysqld/mysqld.sock' port: 3306 MySQL Community Server (GPL)MySQL Community Server 5.6.33 is running.Performing upgrade head...INFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.Upgrade performed. 配置docker-compose.ymlvim /opt/tuniu/docker/harbor/docker-compose.yml version: '2'services: log: image: vmware/harbor-log:0.5.0 container_name: harbor-log restart: always volumes: - /opt/tuniu/docker/harbor/logs/harbor/:/var/log/docker/ ports: - 1514:514 registry: image: library/registry:2.5.0 container_name: registry restart: always volumes: - /opt/tuniu/docker/harbor/data/registry:/storage - ./common/config/registry/:/etc/registry/ environment: - GODEBUG=netdns=cgo command: ["serve", "/etc/registry/config.yml"] depends_on: - log logging: driver: "syslog" options: syslog-address: "tcp://127.0.0.1:1514" tag: "registry" mysql: image: vmware/harbor-db:0.5.0 container_name: harbor-db restart: always volumes: - /opt/tuniu/docker/harbor/data/database:/var/lib/mysql env_file: - ./common/config/db/env depends_on: - log logging: driver: "syslog" options: syslog-address: "tcp://127.0.0.1:1514" tag: "mysql" ui: image: vmware/harbor-ui:0.5.0 container_name: harbor-ui env_file: - ./common/config/ui/env restart: always volumes: - ./common/config/ui/app.conf:/etc/ui/app.conf - ./common/config/ui/private_key.pem:/etc/ui/private_key.pem - /opt/tuniu/docker/harbor/data/ui:/harbor_storage depends_on: - log logging: driver: "syslog" options: syslog-address: "tcp://127.0.0.1:1514" tag: "ui" jobservice: image: vmware/harbor-jobservice:0.5.0 container_name: harbor-jobservice env_file: - ./common/config/jobservice/env restart: always volumes: - /opt/tuniu/docker/harbor/data/job_logs:/var/log/jobs - ./common/config/jobservice/app.conf:/etc/jobservice/app.conf depends_on: - ui logging: driver: "syslog" options: syslog-address: "tcp://127.0.0.1:1514" tag: "jobservice" proxy: image: nginx:1.11.5 container_name: nginx restart: always volumes: - ./common/config/nginx:/etc/nginx ports: - 80:80 - 443:443 depends_on: - mysql - registry - ui - log logging: driver: "syslog" options: syslog-address: "tcp://127.0.0.1:1514" tag: "proxy"``` &lt;i class="fa fa-angle-double-right fa-lg"&gt;&lt;/i&gt; 配置harbor.cfg``` bashvim /opt/tuniu/docker/harbor/harbor.cfg## Configuration file of Harbor#The IP address or hostname to access admin UI and registry service.#DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.hostname = tcr.tuniu.io#The protocol for accessing the UI and token/notification service, by default it is http.#It can be set to https if ssl is enabled on nginx.ui_url_protocol = https#Email account settings for sending out password resetting emails.#Email server uses the given username and password to authenticate on TLS connections to host and act as identity.#Identity left blank to act as username.email_identity = Mail Configemail_server = xxxxx.tuniu.comemail_server_port = 25email_username = xxxxx@tuniu.comemail_password = xxxxxemail_from = xxxxx@tuniu.comemail_ssl = false##The initial password of Harbor admin, only works for the first time when Harbor starts. #It has no effect after the first launch of Harbor.#Change the admin password from UI after launching Harbor.harbor_admin_password = XXXXX##By default the auth mode is db_auth, i.e. the credentials are stored in a local database.#Set it to ldap_auth if you want to verify a user's credentials against an LDAP server.auth_mode = ldap_auth#The url for an ldap endpoint.ldap_url = ldaps://ldap.tuniu.org#A user's DN who has the permission to search the LDAP/AD server. #If your LDAP/AD server does not support anonymous search, you should configure this DN and ldap_search_pwd.ldap_searchdn = cn=xxxxx,ou=应用账号(启用),ou=途牛服务账户,dc=tuniu-inc,dc=com#the password of the ldap_searchdnldap_search_pwd = xxxxxxx#The base DN from which to look up a user in LDAP/ADldap_basedn = ou=途牛用户账户,dc=tuniu-inc,dc=com#Search filter for LDAP/AD, make sure the syntax of the filter is correct.#ldap_filter = (objectClass=person)# The attribute used in a search to match a user, it could be uid, cn, email, sAMAccountName or other attributes depending on your LDAP/AD ldap_uid = sAMAccountName#the scope to search for users, 1-LDAP_SCOPE_BASE, 2-LDAP_SCOPE_ONELEVEL, 3-LDAP_SCOPE_SUBTREEldap_scope = 3 #The password for the root user of mysql db, change this before any production use.db_password = root123#Turn on or off the self-registration featureself_registration = on#Determine whether the UI should use compressed js files. #For production, set it to on. For development, set it to off.use_compressed_js = on#Maximum number of job workers in job service max_job_workers = 3 #The expiration time (in minute) of token created by token service, default is 30 minutestoken_expiration = 30#Determine whether the job service should verify the ssl cert when it connects to a remote registry.#Set this flag to off when the remote registry uses a self-signed or untrusted certificate.verify_remote_cert = on#Determine whether or not to generate certificate for the registry's token.#If the value is on, the prepare script creates new root cert and private key #for generating token to access the registry. If the value is off, a key/certificate must #be supplied for token generation.customize_crt = on#Information of your organization for certificatecrt_country = CNcrt_state = Statecrt_location = CNcrt_organization = organizationcrt_organizationalunit = organizational unitcrt_commonname = example.comcrt_email = example@example.com#The flag to control what users have permission to create projects#Be default everyone can create a project, set to "adminonly" such that only admin can create project.project_creation_restriction = everyone#The path of cert and key files for nginx, they are applied only the protocol is set to httpsssl_cert = /opt/tuniu/docker/harbor/ssl/tuniu.io.crtssl_cert_key = /opt/tuniu/docker/harbor/ssl/tuniu.io.key############# 初始化配置文件[root@harbor-hx-191-176 harbor]# /opt/tuniu/docker/harbor/prepare generated and saved secret keyGenerated configuration file: /opt/tuniu/docker/harbor/common/config/nginx/nginx.confGenerated configuration file: /opt/tuniu/docker/harbor/common/config/ui/envGenerated configuration file: /opt/tuniu/docker/harbor/common/config/ui/app.confGenerated configuration file: /opt/tuniu/docker/harbor/common/config/registry/config.ymlGenerated configuration file: /opt/tuniu/docker/harbor/common/config/db/envGenerated configuration file: /opt/tuniu/docker/harbor/common/config/jobservice/envGenerated configuration file: /opt/tuniu/docker/harbor/common/config/jobservice/app.confGenerated configuration file: /opt/tuniu/docker/harbor/common/config/ui/private_key.pemGenerated configuration file: /opt/tuniu/docker/harbor/common/config/registry/root.crtThe configuration files are ready, please use docker-compose to start the service. vim /opt/tuniu/docker/harbor/common/config/nginx/nginx.conf 构建 [root@harbor-hx-191-176 harbor]# docker-compose up -dCreating network "harbor_default" with the default driverCreating harbor-logCreating harbor-uiCreating harbor-dbCreating registryCreating harbor-jobserviceCreating nginx]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ADSL代理之单线多播(docker部署)]]></title>
    <url>%2Funcategorized%2F345149809.html</url>
    <content type="text"><![CDATA[安装ovsrpm -ivh openvswitch-2.5.0-1.x86_64.rpm &amp;&amp; /etc/init.d/openvswitch start 配置OVS [root@squid-nj-51-11 ~]# cat /etc/sysconfig/network-scripts/ifcfg-br0 BOOTPROTO="static"DEVICE="br0"ONBOOT="yes"IPADDR=10.0.51.11NETMASK=255.255.255.0HOTPLUG=no [root@squid-nj-51-11 ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0DEVICE=eth0ONBOOT=yesTYPE=EthernetBOOTPROTO=static root@squid-nj-51-11 ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth1TYPE=EthernetBOOTPROTO="static"DEVICE=eth1ONBOOT="yes" ovs-vsctl add-br br0 ovs-vsctl add-port br0 eth0ovs-vsctl add-port br0 eth1 [root@squid-nj-51-11 ~]# ovs-vsctl show Bridge "br0" Port "eth1" Interface "eth1" Port "eth0" Interface "eth0" Port "br0" Interface "br0" type: internal ovs_version: "2.5.0 配置Dockerfile[yongjianhu@puppet adsl]$ cat Dockerfile FROM tcr.tuniu.io/public/centos:6.7RUN yum install -y net-tools squid openssh-server rp-pppoe iptables vim-enhanced traceroute passwd sudoRUN echo '"02512787188" * "093627"' &gt;&gt; /etc/ppp/pap-secretsRUN echo "nameserver 218.2.135.1" &gt; /etc/resolv.confADD ifcfg-ppp0 /etc/sysconfig/network-scriptsADD squid.conf /etc/squidADD options /etc/pppADD iptables /etc/sysconfigADD sudoers /etcADD service.sh /opt 编译并上传Harbor仓库docker build -t tcr.tuniu.io/adsl/adsl . --no-cachedocker push tcr.tuniu.io/adsl/adsl 服务器安装docker-engine及pull镜像docker pull tcr.tuniu.io/adsl/adsl:02512787188 批量启动docker实例#!/bin/bashstart() &#123;cat /root/adsl.txt |grep -Ev "^#|^$" | while read id ip do docker run --name=adsl$id -itd --net=none --privileged tcr.tuniu.io/adsl/adsl:02512787190 /bin/bash ovs-docker add-port br0 eth0 adsl$id --ipaddress=$ip docker exec -itd adsl$id "/opt/service.sh" echo -e "\033[32;1mAdd adsl$id ok!\033[0m" done&#125;stop() &#123;docker ps | grep -E adsl[0-9]&#123;2&#125; &amp;&gt; /dev/nullif [ $? -eq 0 ];then for id in `docker ps | grep -E adsl[0-9]&#123;2&#125; |awk '&#123;print $10&#125;'` do docker stop $id &amp;&gt; /dev/null &amp;&amp; docker rm $id &amp;&gt; /dev/null echo -e "\033[31;1mDelete $id ok!\033[0m" doneelse exit 1fi#ovs-vsctl show |grep -Ev "eth0|eth1|br0" |grep Port |awk '&#123;print $2&#125;' |awk -F\" '&#123;print $2&#125;'ovs-vsctl show |grep -Ev "eth0|eth1|br0" |grep Port |awk '&#123;print $2&#125;' |awk -F\" '&#123;print $2&#125;'| grep l &amp;&gt; /dev/null#ovs-vsctl show |grep "No such device" &amp;&gt; /dev/nullif [ $? -eq 0 ];then for i in `ovs-vsctl show |grep "No such device" |awk '&#123;print $7&#125;'` do ovs-vsctl del-port br0 $i doneelse exit 2fi&#125;test() &#123;cat /root/adsl.txt |grep -Ev "^#|^$" | while read id ipdo ip=`echo $ip| awk -F/ '&#123;print $1&#125;'` curl -x $ip:3000 "http://ip.cn"done&#125;case "$1" in start) start ;; stop) stop ;; test) test ;; *) echo $"Usage: $0 &#123;start|stop|test&#125;" exit 3esac]]></content>
      <tags>
        <tag>docker</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手动指定pppoe拨号生成PPP接口ID]]></title>
    <url>%2Funcategorized%2F702384175.html</url>
    <content type="text"><![CDATA[背景当在一台服务上进行pppoe多次拨号后，会生成相应的ppp0 ppp1等接口名称，当我们对ppp0所在的接口重新拨号后，重新生成的接口不一定是ppp0，由于自动重启脚本是针对接口进行重启，所以我们需要固定好ppp接口，即使重启接口id也不会发生变化！ 修改系统拨号脚本 脚本启动做如下约定sudo /usr/sbin/adsl-start /etc/sysconfig/network-scripts/ifcfg-ppp0 在进行拨号传递$@参数时，$@的值为/etc/sysconfig/network-scripts/ifcfg-ppp0 修改/sbin/pppoe-connect拨号脚本vim /sbin/pppoe-connect #Manual Set PPP Interface ID#--------------------------------------------------------------------echo -e "\033[32;1m$@\033[0m"if [ "$@" = "/etc/sysconfig/network-scripts/ifcfg-ppp0" ];then UNIT="unit 0"elif [ "$@" = "/etc/sysconfig/network-scripts/ifcfg-ppp1" ];then UNIT="unit 1"elif [ "$@" = "/etc/sysconfig/network-scripts/ifcfg-ppp2" ];then UNIT="unit 2"elif [ "$@" = "/etc/sysconfig/network-scripts/ifcfg-ppp3" ];then UNIT="unit 3"elif [ "$@" = "/etc/sysconfig/network-scripts/ifcfg-ppp4" ];then UNIT="unit 4"elif [ "$@" = "/etc/sysconfig/network-scripts/ifcfg-ppp5" ];then UNIT="unit 5"elif [ "$@" = "/etc/sysconfig/network-scripts/ifcfg-ppp6" ];then UNIT="unit 6"fi#-------------------------------------------------------------------- 将$UNIT追加至PPP_STD_OPTIONS参数PPP_STD_OPTIONS="$IPPARAM $LINKNAME $PLUGIN_OPTS noipdefault noauth default-asyncmap $DEFAULTROUTE hide-password nodetach $PEERDNS mtu $MTU mru $MRU noaccomp nodeflate nopcomp novj novjccomp user $USER lcp-echo-interval $LCP_INTERVAL lcp-echo-failure $LCP_FAILURE $PPPD_EXTRA $UNIT"]]></content>
  </entry>
  <entry>
    <title><![CDATA[ADSL Squid代理部署]]></title>
    <url>%2Funcategorized%2F3504479779.html</url>
    <content type="text"><![CDATA[HTTP代理相关知识 透明代理:也叫普通代理，它不但改变了我们的请求信息，还会传送真实的IP地址。从：HTTP_X_FORWARDED_FOR 等代理信息可以查到我们IP地址！ 匿名代理:普通匿名代理，它能隐藏客户机的真实IP，但会改变我们的请求信息。它不传送正式ip，但是可能会发送HTTP_VIA、 HTTP_PROXY_CONNECTION 信息，还是可以通过这些判断出使用了代理！ 高级匿名代理:不改变客户机的请求，这样在服务器看来就像有个真正的客户浏览器在访问它，这时客户的真实IP是隐藏的，服务器端不会认为我们使用了代理！ HTTP通道:http代理服务器支持Connect请求，这类代理服务器基本可以代理所有软件，如：QQ,FoxMail,FTP等等，不支持通道的HTTP代理，基本上只支持简单的Http GET,POST等请求服务！ SOCKS代理知识SOCKS5:常见SOCKS代理有Socks4,socks5，不过目前基本上以socks5代理为主，它基本支持所有客户端请求协议，Http,Ftp,Smtp等，可以具备高级匿名代理隐藏功能！ 核心技术原理 一条ADSL一个vlan，和服务器相连的端口做trunk。为什么要一条adsl一个vlan？因为南京电信会对每个adsl账号做mac地址限制，一个mac地址只能拨两个号，这也是为什么当多个adsl同时拨号时只有两条adsl可用。 linux服务器上创建和adsl的vlan ID相同的虚拟接口。为什么要在linux创建vlan虚接口？实现和adsl的隔离，减少相互干扰，每条adsl彼此独立，而且如果用子网卡的话，不能修改mac地址，即使修改成功，所有的子网卡和主网卡的mac也是一致的，不能满足多条adsl同时拨号的的要求，故必须采用vlan虚接口。 接光纤的网卡采用子网卡挂多个公网ip linux服务器采用源地址路由技术。为什么？squid的tcp_outgoing_address只支持ip地址，不支持设备名（如ppp0、eth0），且adsl拨号获得的ip也会变化，故需要给vlan子接口配置私有固定ip，通过源地址路由绑定出口adsl。 通过squid的账号进行出口ip选择tcp_outgoing_address vlan交换机配置(省略) 准备工作 开始之前 操作系统版本：Ceontos6.5 X64网卡接入：eth0（内网IP 10.10.10.248 ） eth1：adsl拨号添加静态路由后，删除eth0默认网关（10.10.10.250） 安装squid、pppoe组件yum -y install squid *pppoe* ADSL帐号密码、相应vlan id、虚拟网卡地址等（以下以铁通adsl为例） id account pasword vlan_id virtual_mac virtual_ip port ppp 1 z68237300 68237300 1001 78:2B:CB:24:63:01 192.168.101.2 3000 ppp0 2 z68237301 68237301 1002 78:2B:CB:24:63:02 192.168.102.2 3001 ppp1 配置虚拟网卡及对应VLAN配置（以eth1.1001为例）modprobe 8021qvconfig add eth1 1001 配置ifcfg-eth1.1001网卡文件（配置虚拟IP地址、DEVICE设备名称） ip link set dev eth1.1001 address 78:2B:CB:24:63:01（设置虚拟MAC地址） pppoe配置（修改配置文件/etc/ppp/pap-secrets，添加帐号密码等信息） 新增配置文件/etc/sysconfig/network-scripts/ifcfg-ppp0（按需修改红色部分）USERCTL=yesBOOTPROTO=dialupNAME=DSLppp0DEVICE=ppp0TYPE=xDSLONBOOT=yesPIDFILE=/var/run/pppoe-adsl0.pidFIREWALL=NONEPING=.PPPOE_TIMEOUT=80LCP_FAILURE=3LCP_INTERVAL=20CLAMPMSS=1412CONNECT_POLL=6CONNECT_TIMEOUT=60DEFROUTE=noSYNCHRONOUS=noETH=eth0.1001PROVIDER=DSLppp0USER=z68237300PEERDNS=noDEMAND=no 修改/etc/sysconfig/network-scripts/route-ppp0 策略路由及NATip rule add from 192.168.101.2 lookup 1001/sbin/iptables -t nat -A POSTROUTING -s 192.168.101.2/255.255.255.255 -o ppp0 -j MASQUERADE 启动squidcp /etc/squid/squid.conf /etc/squid/squid_ppp0.conf 修改如下3项http_port 3000tcp_outgoing_address 192.168.101.2pid_filename /var/run/squid_ppp0.pid启动squid/usr/sbin/squid -f /etc/squid/squid_ppp0.conf 备注：最后重复完成剩余线路配置！ 代理检测网站 http://www.stilllistener.com/checkpoint1/Java/ http://web.chacuo.net/netproxycheck http://www.ip181.com/ Squid代理设置高匿 未设置前（X_FORWARDED_FOR HTTP_VIA暴露客户端及代理服务器信息，容易被封杀） 设置后#高匿设置（Centos6.7 squid-3.1.23-16.el6_8.6.x86_64）request_header_access Via deny allrequest_header_access X-Forwarded-For deny all #高匿设置（Centos5.5 squid-2.6.STABLE21-7.el5_10）via offforwarded_for off]]></content>
      <tags>
        <tag>Squid</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cobbler部署]]></title>
    <url>%2Funcategorized%2F1183833045.html</url>
    <content type="text"><![CDATA[cobbler介绍 Cobbler是一个快速网络安装linux的服务，而且在经过调整也可以支持网络安装windows。该工具使用python开发，小巧轻便（才15k行代码），使用简单的命令即可完成PXE网络安装环境的配置，同时还可以管理DHCP，DNS，以及yum包镜像。 Cobbler支持命令行管理，web界面管理，还提供了API接口，可以方便二次开发使用。 cobbler安装准备 关闭iptables与selinux chkconfig iptables off vim /etc/selinux/configSELINUX=disabled 安装源准备并安装cobbler软件yum -y install debmirroryum -y install httpd rsync tftp-server xinetd dhcp python-ctypes pykickstart fence-agentsrpm -ivh http://download.Fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm yum -y install cobblerwget http://ftp.linux.ncsu.edu/pub/epel/6/x86_64/Django14-1.4.21-1.el6.noarch.rpmyum -y install cobbler-web 配置tftp-server与rsync 开启tftp与rsync服务 chkconfig tftp onchkconfig rsync onchkconfig xinetd on 配置httpd配置文件vim /etc/httpd/conf/httpd.confsed -i "/#ServerName/a\ServerName $ip:80" /etc/httpd/conf/httpd.conf 配置cobbler主配置文件 sed -i "s/next_server: 127.0.0.1/next_server: $ip/g" /etc/cobbler/settingssed -i "s/server: 127.0.0.1/server: $ip/g" /etc/cobbler/settingssed -i "s/manage_dhcp: 0/manage_dhcp: 1/g" /etc/cobbler/settingssed -i "s/manage_rsync: 0/manage_rsync: 1/g" /etc/cobbler/settings 配置cobbler web登录认证配置文件 grep -B 1 "module = authn_configfile" /etc/cobbler/modules.conf --color#sed -i 's/module = authn_denyall/module = authn_configfile/g' /etc/cobbler/modules.conf 设置Cobbler用户名密码 htdigest /etc/cobbler/users.digest "Cobbler" cobbler 备注：”Cobbler”务必大写，否则帐号虽然创建，会无法登录 生成Cobbler安装系统root初始密码 openssl passwd -1 -salt 'random-phrase-here' 'root' $1$random-p$WbZ3JxhRzCS/1Ne4S9g4Z. 将上面的加密串加入cobbler配置文件中 配置DHCPmv /etc/cobbler/dhcp.template /etc/cobbler/dhcp.template.bakvim /etc/cobbler/dhcp.templateddns-update-style interim;allow booting;allow bootp;ignore client-updates;set vendorclass = option vendor-class-identifier;subnet 192.168.10.0 netmask 255.255.255.0 &#123;option routers 192.168.10.1;option domain-name-servers 192.168.10.1;option subnet-mask 255.255.255.0;range dynamic-bootp 192.168.10.200 192.168.10.220;filename "/pxelinux.0";default-lease-time 21600;max-lease-time 43200;next-server $next_server;&#125; 启动相关服务chkconfig httpd onchkconfig xinetd onchkconfig dhcpd onchkconfig cobblerd onservice httpd restartservice xinetd restart service dhcpd restart service cobblerd restart 检查配置，执行cobbler check 执行完后出现下面的信息The following are potential configuration items that you may want to fix: The following are potential configuration items that you may want to fix:1 : service dhcpd is not running2 : some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run 'cobbler get-loaders' to download them, or, if you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely. Files in this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The 'cobbler get-loaders' command is the easiest way to resolve these requirements.3 : file /etc/xinetd.d/rsync does not exist4 : comment out 'dists' on /etc/debmirror.conf for proper debian support5 : comment out 'arches' on /etc/debmirror.conf for proper debian support 暂时先忽略，因为/etc/dhcp/dhcpd.conf 文件没有配置，通过cobbler去同步配置 执行 cobbler get-loaders，系统将自动下载loader程序，完成提示2的修复工作。 忽略（感觉是系统误报） 修复debian/Ubuntu系统安装选项支持包 修复debian/Ubuntu系统安装选项支持包 vim /etc/debmirror.conf注释掉如下两行。 #@dists="sid"; #@arches="i386" 说明：前提是安装debmirror pykickstart这两个包! 所有提示全部修复之后，执行cobbler check 执行同步 cobbler sync 再次检查配置 重启所有服务service cobblerd restartservice xinetd restartservice httpd restartservice dhcpd restart 导入linux ISO安装镜像 挂载ISO光盘镜像mount /dev/sr0 /mnt 开始导入光盘镜像cobbler import --path=/mnt/ --arch=x86_64 --name CentOS6.7 ks装机模版#platform=x86, AMD64, or Intel EM64T# System authorization informationauth --useshadow --enablemd5# System bootloader configurationbootloader --location=mbr# Partition clearing informationclearpart --all --initlabel# Use text mode installtext# Firewall configurationfirewall --disable# Run the Setup Agent on first bootfirstboot --disable# System keyboardkeyboard us# System languagelang en_US# Use network installationurl --url=$tree# If any cobbler repo definitions were referenced in the kickstart profile, include them here.$yum_repo_stanza# Network information$SNIPPET('network_config')# Reboot after installationreboot#Root passwordrootpw --iscrypted $default_password_crypted# SELinux configurationselinux --disabled# Do not configure the X Window Systemskipx# System timezonetimezone Asia/Shanghai# Install OS instead of upgradeinstall# Clear the Master Boot Recordzerombr# Allow anaconda to partition the system as needed#autopartpart /boot --fstype="ext4" --size=500 --ondisk=sdapart pv.01 --size=1 --grow --ondisk=sdavolgroup vg pv.01logvol swap --vgname=vg --size=4096 --name=lv_swap#logvol / --vgname=vg --size=20480 --name=lv_rootlogvol / --vgname=vg --size=1 --grow --name=lv_root --fstype="ext4"#logvol /opt --vgname=vg --size=1 --grow --name=lv_opt --fstype="ext4" %pre$SNIPPET('log_ks_pre')$SNIPPET('kickstart_start')$SNIPPET('pre_install_network_config')# Enable installation monitoring$SNIPPET('pre_anamon')%end%packages#$SNIPPET('func_install_if_enabled')#$SNIPPET('puppet_install_if_enabled')@base@development%end%post$SNIPPET('log_ks_post')# Start yum configuration$yum_config_stanza# End yum configuration$SNIPPET('post_install_kernel_options')$SNIPPET('post_install_network_config')$SNIPPET('func_register_if_enabled')$SNIPPET('puppet_register_if_enabled')$SNIPPET('download_config_files')$SNIPPET('koan_environment')$SNIPPET('redhat_register')$SNIPPET('cobbler_register')#system service/sbin/chkconfig --level 345 abrt-ccpp off/sbin/chkconfig --level 345 abrtd off/sbin/chkconfig --level 345 abrt-oops off/sbin/chkconfig --level 345 acpid off/sbin/chkconfig --level 345 atd off/sbin/chkconfig --level 345 auditd off/sbin/chkconfig --level 345 avahi-daemon off/sbin/chkconfig --level 345 cpuspeed off/sbin/chkconfig --level 345 haldaemon off/sbin/chkconfig --level 345 ip6tables off/sbin/chkconfig --level 345 iptables off/sbin/chkconfig --level 345 kdump off/sbin/chkconfig --level 345 mdmonitor off/sbin/chkconfig --level 345 messagebus off/sbin/chkconfig --level 345 postfix off/sbin/chkconfig --level 345 udev-post off#limit.confcat &lt;&lt;EOF &gt;&gt; /etc/security/limits.conf* soft nofile 65535* hard nofile 65535* soft nproc 5000* hard nproc 5000* soft memlock unlimited* hard memlock unlimitedEOF#kernelcat &lt;&lt;EOF &gt;&gt; /etc/sysctl.confnet.ipv4.conf.lo.arp_ignore = 1net.ipv4.conf.lo.arp_announce = 2net.ipv4.conf.all.arp_ignore = 1net.ipv4.conf.all.arp_announce = 2net.ipv4.tcp_max_syn_backlog = 8192net.ipv4.tcp_keepalive_time = 1200net.ipv4.ip_local_port_range = 10000 65000net.ipv4.tcp_max_tw_buckets = 100000EOF#create log dir/bin/mkdir -p /opt/genewiznj/logs/&#123;apache,php,nginx&#125;/bin/mkdir -p /etc/rsyncd/#restart network/etc/init.d/network restart#install laohulab.com-repowget http://10.105.42.17/repo/genewiznj.repo -P /etc/yum.repos.d/mv /etc/yum.repos.d/CentOS*.repo /tmp/mv /etc/yum.repos.d/cobbler*.repo /tmp/mv /etc/yum.repos.d/epel* /tmp/yum clean all &amp;&amp; yum update#install zabbix agent#yum -y install zabbix-agent#install puppetyum -y install puppet #install ipmitool#yum -y install OpenIPMI-devel.x86_64 ipmitool.x86_64#/etc/init.d/ipmi start#chkconfig ipmi on #install lrzszyum -y install lrzsz# install mysql clientyum -y install mysql#install telnetyum -y install telnet#install iptrafyum -y install iptraf#install screenyum -y install screen#install ncyum -y install nc#yum install python mysql moduleyum -y install MySQL-python#install htop iftopyum -y install htop iftopyum -y install yum-plugin-prioritiesyum -y install tree$SNIPPET('post_install_network_config')# Enable post-install boot notification$SNIPPET('post_anamon')# Start final steps$SNIPPET('kickstart_done')# End final steps%end 批量新增装机信息 对文本app.txt格式做如下约定 sn ks-profile hostname mac ip 6QZKXD2 CentOS6.7-x86_64 test.com 28:F1:0E:58:53:6E 10.40.100.101 #/usr/bin/env python#encoding=utf-8import os,sysdef add_server(): f = file('/root/app.txt','rb') f_list = f.readlines() f.close() s = os.popen('cobbler system list') v = s.read() for line in f_list: l = line.split() sn = l[0] profile = l[1] hostname = l[2] mac = l[3] ip = l[4] gw = '.'.join(f_list[0].split()[4].split('.')[0:3]) + '.250' if sn in v.split(): print '\033[31;1mError,%s exist!\033[0m' % sn continue else: os.system('cobbler system add --name=%s --profile=%s --hostname=%s --name-servers=192.168.1.246 --mac=%s --ip-address=%s --gateway=%s --subnet=255.255.255.0 --static=1 --interface=eth0 --name-servers-search=laohulab.com --owners=admin --kopts=biosdevname=0,net.ifnames=0 --kopts-post=biosdevname=0,net.ifnames=0 --virt-bridge=xenbr0 --netboot-enabled=Y ' % (sn,profile,hostname,mac,ip,gw)) if sn in os.popen('cobbler system list').read().split(): print '\033[32;1madd %s succeful!\033[0m' % sn else: print '\033[31;1madd %s failer!\033[0m' % snif __name__ == '__main__': try: add_server() except TypeError: print 'Please input valid data!']]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Cobbler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx信号控制]]></title>
    <url>%2Funcategorized%2F1021054529.html</url>
    <content type="text"><![CDATA[信号控制 信号 描述 TERM，INT Quick shutdown QUIT Graceful shutdown 优雅的关闭进程,即等请求结束后再关闭 HUP Configuration reload ,Start the new worker processes with a new configuration Gracefully shutdown the old worker processes 改变配置文件,平滑的重读配置文件 USR1 Reopen the log files 重读日志,在日志按月/日分割时有用 USR2 Upgrade Executable on the fly 平滑的升级 WINCH Gracefully shutdown the worker processes 优雅关闭旧的进程(配合USR2来进行升级) 具体语法Kill -信号选项 nginx的主进程号Kill -信号控制 `cat /xxx/path/log/nginx.pid` Kill -HUP 4873Kill -USR1 `cat /xxx/path/log/nginx.pid`]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑群辉宕机恢复数据]]></title>
    <url>%2Funcategorized%2F3452057291.html</url>
    <content type="text"><![CDATA[背景黑群晖宕机后，无法通过u盘引导进入系统! 恢复数据 Centos6 U盘启动，并进入救援模式（带网络功能） mdadm -Asf &amp;&amp; vgchange -ay 通过lvscan查看，把对应的分区挂载至/tmp目录，通过网络拷贝数据]]></content>
  </entry>
  <entry>
    <title><![CDATA[Dell Racadm管理工具]]></title>
    <url>%2FDell%2F3274682442.html</url>
    <content type="text"><![CDATA[Racadmracadm是直接操作dell自带的idrac的工具，ipmitool可以实现的操作通过它都可以执行，包括idrac、bios、nic、raid等等。 安装racadm 该工具包含在Dell OMSA组件里，安装OMSA即可! #!/bin/bash #安装SNMPyum -y install net-snmpcp -p /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.bak #安装OMSA Agentyum -y install libxslt libcmpiCppImpl0 libwsman1 sblim-sfcb sblim-sfcc openwsman-client openwsman-serverping -c 4 linux.dell.com #配置DELL OMSA YUM安装源wget -q -O - http://linux.dell.com/repo/hardware/latest/bootstrap.cgi | bash #确认repo文件已生成if [ -f /etc/yum.repos.d/dell-omsa-repository.repo ];then echo -e "\033[34mdell-omsa-repository.repo ok\033[0m"else exitfi #开始安装OMSAyum -y install srvadmin-all #安装srvadmin-cm软件包（srvadmin-cm是配合戴尔OpenManage Essentials进行清册，以及更新系统的）yum -y install zlib.i686 compat-libstdc++-33.i686 libstdc++.i686 libxml2.i686yum -y install srvadmin-cm #启动OMSA进程（端口1311）/opt/dell/srvadmin/sbin/srvadmin-services.sh start #snmp配置文件修改grep -Ev "^#|^$" /etc/snmp/snmpd.conf.bak &gt; /etc/snmp/snmpd.confsed -i "s/notConfigUser/OMEUser/g" /etc/snmp/snmpd.confsed -i "s/public/OME/g" /etc/snmp/snmpd.confsed -i "s/notConfigGroup/OMEGroup/g" /etc/snmp/snmpd.confsed -i "s/notConfigUser/OMEUser/g" /etc/snmp/snmpd.confchkconfig snmpd onservice snmpd restart RPM包安装wget http://downloads.dell.com/FOLDER03574555M/1/OM-MgmtStat-Dell-Web-LX-8.3.0-1908_A00.tar.gz -P /tmp/tar zxvf OM-MgmtStat-Dell-Web-LX-8.3.0-1908_A00.tar.gz cd /tmp/linux/rac/RHEL6/x86_64/rpm -ivh srvadmin*ln -s /opt/dell/srvadmin/sbin/racadm /usr/sbin/racadm 安装racadm依赖组件yum -y install openssl-devel 使用语法racadm -r &lt;racIpAddr&gt; -u &lt;username&gt; -p &lt;password&gt; &lt;subcommand&gt; racadm -r &lt;racIpAddr&gt; -u &lt;username&gt; -p &lt;password&gt; get &lt;devicename&gt;.&lt;groupname&gt;.[&lt;index&gt;].[&lt;objectname&gt;]racadm -r &lt;racIpAddr&gt; -u &lt;username&gt; -p &lt;password&gt; set &lt;devicename&gt;.&lt;groupname&gt;.[&lt;index&gt;].&lt;objectname&gt; &lt;value&gt; 使用场景 批量重启服务器（DELL）脚本 #!/bin/bashidrac_user="XXX"idrac_password="XXX"cat /.../idrac.txt | while read ipdo/opt/dell/srvadmin/sbin/racadm -r $ip -u $idrac_user -p $idrac_password serveraction hardreset &amp;&gt; /dev/nullif [ $? -eq 0 ];thenecho -e "\033[34mServer:$ip has been reboot successful\033[0m"elseecho -e "\033[31mServer:$ip reboot failuer\033[0m"fidone 批量修改Idrac管理卡密码（DELL）脚本#!/bin/bashidrac_user="XXX"idrac_password="XXX"cat /.../idrac.txt | grep -Ev "#|$" | while read ipdo/opt/dell/srvadmin/sbin/racadm -r $ip -u $idrac_user -p $idrac_password config -g cfgUserAdmin -o cfgUserAdminPassword -i 2 "Password" &amp;&gt; /dev/nullif [ $? -eq 0 ];thenecho -e "\033[34mServer:$ip password has been modified successful\033[0m"elseecho -e "\033[31mServer:$ip password modified failuer\033[0m"fidone 通过ssh远程修改Idrac管理卡密码#前提 yum -y install OpenIPMI OpenIPMI-tools OpenIPMI-devel &amp;&amp; chkconfig ipmi on &amp;&amp; service ipmi restart #!/bin/bashfor ip in `cat /../hexi_ssh_ok.txt | grep -Ev "#|$"`doecho $ipssh -o StrictHostKeyChecking=no yongjianhu@$ip "sudo ipmitool -I open user set password 2 password"if [ $? -eq 0 ];thenecho $ip &gt;&gt; /home/yongjianhu/modify_idrac_password/modify_ok.txtelseecho $ip &gt;&gt; /home/yongjianhu/modify_idrac_password/modify_problem.txtfidone 清除iDrac日志信息 #!/bin/bashidrac_user="XXX"idrac_password="XXX"cat /.../idrac.txt | grep -Ev "#|$" | while read ipdo/opt/dell/srvadmin/sbin/racadm -r $ip -u $idrac_user -p $idrac_password clrsel &amp;&gt; /dev/nullif [ $? -eq 0 ];thenecho -e "\033[34mServer:$ip iDrac logs has been cleared successful\033[0m"elseecho -e "\033[31mServer:$ip iDrac logs has been cleared failuer\033[0m"fidone 其他更多用法，详见帮助Remote RACADM usage syntax:racadm -r &lt;RAC IP address&gt; -u &lt;username&gt; -p &lt;password&gt; &lt;subcommand&gt; &lt;options&gt;racadm -r &lt;RAC IP address&gt; -i &lt;subcommand&gt; &lt;options&gt;The "-i" option allows the username and password to be entered interactively.Examples:racadm -r 192.168.0.120 -u racuser1 -p aygqt12a getsysinforacadm -r 192.168.0.120 -u racuser2 -p gsdf12o1 getractimeracadm -r 192.168.0.120 -u racuser3 -p djh2iuha getconfig -g cfgSerialracadm -r 192.168.0.120 -u racuser5 -p dsajkhds help getsysinfoDisplay a list of available subcommands for the remote RAC:racadm -r &lt;RAC IP address&gt; -u &lt;username&gt; -p &lt;password&gt; helpDisplay more detailed help for a specific subcommand:racadm -r &lt;RAC IP address&gt; -u &lt;username&gt; -p &lt;password&gt; help &lt;subcommand&gt;]]></content>
      <categories>
        <category>Dell</category>
      </categories>
      <tags>
        <tag>racadm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django开发环境部署]]></title>
    <url>%2FDjango%2F909206773.html</url>
    <content type="text"><![CDATA[安装pipwget http://mirrors.laohulab.com:9000/Django/get-pip.py./get-pip.pyCollecting pip Downloading pip-9.0.1-py2.py3-none-any.whl (1.3MB) 100% |████████████████████████████████| 1.3MB 14kB/sCollecting setuptools Downloading setuptools-36.2.7-py2.py3-none-any.whl (477kB) 100% |████████████████████████████████| 481kB 12kB/sCollecting wheel Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB) 100% |████████████████████████████████| 71kB 12kB/sInstalling collected packages: pip, setuptools, wheelSuccessfully installed pip-9.0.1 setuptools-36.2.7 wheel-0.29.0 安装Django版本（1.10.4）pip install django==1.10.4Collecting django==1.10.4 Downloading Django-1.10.4-py2.py3-none-any.whl (6.8MB) 100% |████████████████████████████████| 6.8MB 14kB/sInstalling collected packages: djangoSuccessfully installed django-1.10.4 安装Django REST frameworkpip install djangorestframeworkpip install markdown # Markdown support for the browsable API.pip install django-filter # Filtering support Add ‘rest_framework’ to your INSTALLED_APPS setting.INSTALLED_APPS = ( … ‘rest_framework’,)If you’re intending to use the browsable API you’ll probably also want to add REST framework’s login and logout views. Add the following to your root urls.py file.urlpatterns = [ … url(r’^api-auth/‘, include(‘rest_framework.urls’, namespace=’rest_framework’))]Note that the URL path can be whatever you want, but you must include ‘rest_framework.urls’ with the ‘rest_framework’namespace. You may leave out the namespace in Django 1.9+, and REST framework will set it for you. 安装前端调试工具pip install django-debugtoolsCollecting django-debugtools Downloading django_debugtools-1.7.2-py2.py3-none-any.whlInstalling collected packages: django-debugtoolsSuccessfully installed django-debugtools-1.7.2 ConfigurationAdd the module to the installed apps:INSTALLED_APPS += ( 'debugtools',) As of Django 1.9, either use &#123;% load debugtools_tags %&#125; or add the following to the settings:TEMPLATES = [ &#123; 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': &#123; 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', # ... ], 'builtins': [ # Add this section "debugtools.templatetags.debugtools_tags", # Add this line ], &#125;, &#125;,]]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[glibc误删除修复操作]]></title>
    <url>%2FLinux%2F3959781511.html</url>
    <content type="text"><![CDATA[glibc是linux系统底层基础软件包，当误删除之后，linux系统命令均无法使用 使用光盘进入救援模式修复mkdir /tmp/testmount /dev/sr0 /tmp/testcd /tmp/test/Package/rpm -Uvh glibc-2.12-1.166.el6.x86_64.rpm glibc-common-2.12-1.166.el6.x86_64.rpm --root /mnt/sysimage]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Dell FX2S结构图]]></title>
    <url>%2FDell%2F3594346954.html</url>
    <content type="text"><![CDATA[结构图]]></content>
      <categories>
        <category>Dell</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo标签插件]]></title>
    <url>%2FHexo%2F92719890.html</url>
    <content type="text"><![CDATA[引用块 在文章中插入引言，可包含作者、来源和标题。别号： quote&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 样例-没有提供参数，则只输出普通的 blockquote&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 引用书上的句子&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用 Twitter&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125; NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 引用网络上的文章&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 代码块在文章中插入代码。 别名：code&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; 样例普通的代码块&#123;% codeblock %&#125;alert('Hello World!');&#123;% endcodeblock %&#125; alert('Hello World!'); 指定语言&#123;% codeblock lang:objc %&#125;[rectangle setX: 10 y: 10 width: 20 height: 20];&#123;% endcodeblock %&#125; [rectangle setX: 10 y: 10 width: 20 height: 20]; 附加说明&#123;% codeblock Array.map %&#125;array.map(callback[, thisArg])&#123;% endcodeblock %&#125; Array.maparray.map(callback[, thisArg]) 附加说明和网址&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3]&#123;% endcodeblock %&#125; _.compactUnderscore.js_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3] 反引号代码块另一种形式的代码块，不同的是它使用三个反引号来包裹。 `[language] [title] [url] [link text] code snippet` Pull Quote在文章中插入 Pull quote。&#123;% pullquote [class] %&#125;content&#123;% endpullquote %&#125; jsFiddle在文章中嵌入 jsFiddle。&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; Gist在文章中嵌入 Gist。&#123;% gist gist_id [filename] %&#125; iframe在文章中插入 iframe。&#123;% iframe url [width] [height] %&#125; Image在文章中插入指定大小的图片。&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125; Link在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。&#123;% link text url [external] [title] %&#125; Include Code插入 source 文件夹内的代码文件。&#123;% include_code [title] [lang:language] path/to/file %&#125; Youtube在文章中插入 Youtube 视频。&#123;% youtube video_id %&#125; Vimeo在文章中插入 Vimeo 视频。&#123;% vimeo video_id %&#125; 引用文章引用其他文章的链接。&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125; 引用资源引用文章的资源。&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; Raw如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。&#123;% raw %&#125;content&#123;% endraw %&#125;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10离线安装.NET Framework 3.5]]></title>
    <url>%2FWindows%2F2077812280.html</url>
    <content type="text"><![CDATA[在线安装 该方式存在安装失败的情况! 本地离线安装 C:\Windows\system32&gt;dism.exe /online /enable-feature /featurename:netfx3 /Source:H:\sources\sxs 请以管理员身份运行cmd或者powershell，否则将会出现如下错误! 错误: 740需要提升权限才能运行 DISM。使用提升的命令提示符完成这些任务。]]></content>
      <categories>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[favicon网站收藏]]></title>
    <url>%2Funcategorized%2F323709734.html</url>
    <content type="text"><![CDATA[https://www.easyicon.net/]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo部署]]></title>
    <url>%2FHexo%2F2726177698.html</url>
    <content type="text"><![CDATA[安装前提 Node.js https://nodejs.org/en/ wget https://nodejs.org/dist/v10.4.0/node-v10.4.0-linux-x64.tar.xztar xvf node-v10.4.0-linux-x64.tar.xz -C /opt/laohulabcd /opt/laohulabmv node-v10.4.0-linux-x64 node-10.4.0export PATH="/opt/laohulab/node-10.4.0/bin:$PATH" Git 本地部署环境为 CentOS Linux release 7.3.1611 (Core),Git已默认安装，版本为 git version 1.8.3.1,若未安装可以通过YUM安装 yum install git-core Git版本若为1.7版本，通过如下命令安装git会出现如下错误curl https://raw.github.com/creationix/nvm/master/install.sh | shPlease upgrade your git client.GitHub.com no longer supports git over dumb-http: https://github.com/blog/809-git-dumb-http-transport-to-be-turned-off-in-90-days 安装hexonpm install -g hexo-clicd /opt/laohulabhexo init blog #初始化，名字任意hexo --debug -i 192.168.10.27 s #debug模式启动 安装hexo常用插件npm install hexo-generator-index --save #索引npm install hexo-generator-archive --save #归档npm install hexo-migrator-rss --save #RSSnpm install hexo-generator-feed --save #RSSnpm install hexo-generator-searchdb --save #搜索npm install hexo-generator-search --save #搜索npm install hexo-wordcount --save #字符统计npm install hexo-admin --save #后台管理npm install hexo-generator-sitemap --save --registry https://registry.npm.taobao.org #sitemapnpm install hexo-pdf --save --registry https://registry.npm.taobao.org #pdf插件 hexo-admin配置 点击setup 配置账号相关 配置_config.yml 将自动生成配置信息插入站点配置文件_config.yml，重启hexo服务即可！ 配置主页标签 hexo new page tags #标签hexo new page categories #分类hexo new page commonweal #公益404hexo new page about #关于hexo new page schedule #日程 默认未创建相关标签主页，点击会出现404错误，创建即可! hexo主题修改 安装cd /opt/laohulab/bloggit clone https://github.com/iissnan/hexo-theme-next /themes/next 官网:http://theme-next.iissnan.com 启用next主题 Next主题个性化配置 启用Gemini 4种模式，个人倾向于Gemini模式，以下的修改均基于Gemini 启用字符统计 修改字体 启用站点统计 启用本地搜索 关闭fancybox功能 启用文章meta信息 修改文章显示时间 vim themes/next/layout/_macro/post.swig默认仅显示日期，不显示时间,进行修改！ 阅读量增加中文vim themes/next/layout/_macro/post.swig 文章统计增加中文vim themes/next/layout/_macro/post.swig 修改表格显示宽度和字体大小vim themes/next/source/css/_variables/base.styl 修改正文显示宽度vim themes/next/source/css/_variables/Gemini.styl 修改tag标签显示 vim themes/next/layout/_macro/post.swig将默认#号修改为 其他设置vim themes/next/source/css/_custom/custom.styl 新增如下配置！//表头增加背景色table th&#123; background:#f0f8ff;&#125;//水平线由默认3px变更为2pxhr&#123; height: 2px;&#125;//代码块预览显示，需要修改hexo配置文件，取消显示行号.highlight .code pre &#123; white-space: pre-wrap; word-wrap: break-word; width: auto&#125;//取消默认灰色背景，修改为绿色背景，文字白色code &#123;background: #3fb618;color: #fff;&#125;//图片默认居中，修改inline-block，靠左对齐img &#123;display: inline-block;&#125;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP源码编译安装]]></title>
    <url>%2FPHP%2F1488718542.html</url>
    <content type="text"><![CDATA[&nbsp;源码编译安装&nbsp;官网 官网：http://php.net/ 官网下载：http://php.net/downloads.php &nbsp;了解与准备&nbsp;Apache(httpd) nginx 与 php 连接方式：httpd与php php 作为 httpd 模块 fastcgi(php-fpm) cgi(此处不讲解) nginx与php fastcgi(php-fpm) &nbsp;PHP安装与依赖yum -y install gcc gcc-c++ libxml2 libxml2-devel bzip2 bzip2-devel libmcrypt libmcrypt-devel openssl openssl-devel libcurl-devel libjpeg-devel libpng-devel freetype-devel readline readline-devel libxslt-devel perl perl-devel psmisc.x86_64 recode recode-devel libtidy libtidy-devel 备注： 上面的依赖基本解决所需要的依赖。 编译安装完成后可以增减所支持的php模块，此处所编译的模块已经非常完备。 需要编译单个模块，查看php模块编译方式：php模块编译 下面编译安装的配置选项：–prefix=/usr/local/php7 主程序文件路径 –sysconfdir=/etc/php7 配置文件路径 –with-config-file-path=/etc/php7 php.ini 文件路径 –with-apxs2=/usr/local/httpd/bin/apxs 以 httpd 模块编译时需要指定 httpd 的 apxs 文件路径。 其他的配置可以按自己需求指定，这几个选项也可以使用默认配置。php7移除了 mysql 扩展，php7仅能是用 mysqli 和 pdo_mysql。php5可以使用。php5编译时加入选项：–with-mysql 。详情查看下面的 PHP与MariaDB（mysql）连接 此处以 CentOs7 编译 php7 为示例，配合讲解php5安装的要点。 php.ini 文件是在包目录下的 php.ini-development（开发）， php.ini-production（生产）编译完成后选择自己需要的 php.ini 文件 复制到 –with-config-file-path 指定的目录。 如果编译时为指定此选项，编译完成配置并启动nginx和php查看 phpinfo() 函数所指定的 php.ini 文件路径：Configuration File (php.ini) Path 默认为php目录下的 lib 目录。 PHP安装与依赖中 psmisc.x86_64 是 killall 命令的包名，以便最小化安装时终止进程。 &nbsp;php编译与配置 httpd 模块 备注：需要事先存在httpd ，编译指定 apxs 文件位置。此处以--with-apxs2=/usr/local/httpd/bin/apxs 作为演示。 php7： ./configure --prefix=/usr/local/php7 --sysconfdir=/etc/php7 --with-config-file-path=/etc/php7 --with-apxs2=/usr/local/httpd/bin/apxs --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-mhash --with-openssl --with-zlib --with-bz2 --with-curl --with-libxml-dir --with-gd --with-jpeg-dir --with-png-dir --with-zlib --enable-mbstring --with-mcrypt --enable-sockets --with-iconv-dir --with-xsl --enable-zip --with-pcre-dir --with-pear --enable-session --enable-gd-native-ttf --enable-xml --with-freetype-dir --enable-gd-jis-conv --enable-inline-optimization --enable-shared --enable-bcmath --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-mbregex --enable-pcntl --with-xmlrpc --with-gettext --enable-exif --with-readline --with-recode --with-tidy php5.6：（仅增加了选项 --with-mysql=mysqlnd） ./configure --prefix=/usr/local/php5 --sysconfdir=/etc/php5 --with-config-file-path=/etc/php5 --with-apxs2=/usr/local/httpd/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-mhash --with-openssl --with-zlib --with-bz2 --with-curl --with-libxml-dir --with-gd --with-jpeg-dir --with-png-dir --with-zlib --enable-mbstring --with-mcrypt --enable-sockets --with-iconv-dir --with-xsl --enable-zip --with-pcre-dir --with-pear --enable-session --enable-gd-native-ttf --enable-xml --with-freetype-dir --enable-gd-jis-conv --enable-inline-optimization --enable-shared --enable-bcmath --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-mbregex --enable-pcntl --with-xmlrpc --with-gettext --enable-exif --with-readline --with-recode --with-tidy 整合httpd和fastcgi php-fpm模式 --with-apxs2(需要apxs程序)yum -y install httpd-devel fastcgi php-fpm 模式 php5.6：（仅增加了选项 --with-mysql=mysqlnd） ./configure --prefix=/usr/local/php5 --sysconfdir=/etc/php5 --with-config-file-path=/etc/php5 --enable-fpm --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-mhash --with-openssl --with-zlib --with-bz2 --with-curl --with-libxml-dir --with-gd --with-jpeg-dir --with-png-dir --with-zlib --enable-mbstring --with-mcrypt --enable-sockets --with-iconv-dir --with-xsl --enable-zip --with-pcre-dir --with-pear --enable-session --enable-gd-native-ttf --enable-xml --with-freetype-dir --enable-gd-jis-conv --enable-inline-optimization --enable-shared --enable-bcmath --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-mbregex --enable-pcntl --with-xmlrpc --with-gettext --enable-exif --with-readline --with-recode --with-tidy ./configure --prefix=/opt/laohulab/php5.6.31 --sysconfdir=/opt/laohulab/php5.6.31/etc --with-config-file-path=/opt/laohulab/php5.6.31/etc --with-config-file-scan-dir=/opt/laohulab/php5.6.31/etc.d --with-apxs2 --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-mhash --with-openssl --with-zlib --with-bz2 --with-curl --with-libxml-dir --with-gd --with-jpeg-dir --with-png-dir --with-zlib --enable-mbstring --with-mcrypt --enable-sockets --with-iconv-dir --with-xsl --enable-zip --with-pcre-dir --with-pear --enable-session --enable-gd-native-ttf --enable-xml --with-freetype-dir --enable-gd-jis-conv --enable-inline-optimization --enable-shared --enable-bcmath --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-mbregex --enable-pcntl --with-xmlrpc --with-gettext --enable-exif --with-readline --with-recode --with-tidy fastcgi php-fpm cp /etc/php7/php-fpm.conf.default /etc/php7/php-fpm.conf cp /etc/php7/php-fpm.d/www.conf.default /etc/php7/php-fpm.d/www.conf # 默认即可是本机 127.0.0.1 不必修改。 vim /etc/php7/php-fpm.d/www.conf # 监听地址 listen = 127.0.0.1:9000 # 允许的客户端 listen.allowed_clients = 127.0.0.1 备注：php5 需要复制 php-fpm.conf.default 为 php-fpm.conf 即可。查看 php-fpm.conf 监听地址和允许的客户端。 &nbsp;php.ini 配置文件（在源码包目录下）[root@nginx-10-20 php-5.6.31]# pwd/root/php/php-5.6.31[root@nginx-10-20 php-5.6.31]# cp php.ini-production /opt/laohulab/php5.6.31/etc/php.ini &nbsp;php 作为 httpd 模块不需要修改 php 配置 &nbsp;启动与停止 httpd模块 重新加载 httpd 。 fastcgi vim /etc/php7/php-fpm.conf 打开注释：（不打开注释仅能使用 killall php-fpm 关闭 php） pid = run/php-fpm.pid 启动： /usr/local/php7/sbin/php-fpm 立刻终止 kill -INT `cat /usr/local/php7/var/run/php-fpm.pid` kill -TERM `cat /usr/local/php7/var/run/php-fpm.pid` killall php-fpm 平滑终止 kill -QUIT `cat /usr/local/php7/var/run/php-fpm.pid` 平滑重启 kill -USR2 `cat /usr/local/php7/var/run/php-fpm.pid` &nbsp;加入环境变量PHP=/opt/laohulab/phpexport PATH=$PATH:$PHP/bin:$PHP/sbin &nbsp;CentOS 系统服务（/etc/php7/php-fpm.conf 文件 pid = run/php-fpm.pid 注释需要打开：2.6 ） CentOS 6 vi /etc/rc.d/init.d/php-fpm chmod +x /etc/rc.d/init.d/php-fpm --------------------------file start--------------------------------- #! /bin/sh # chkconfig: - 84 16 # description: PHP FastCGI Process Manager # Source function library. . /etc/init.d/functions # Check that networking is up. . /etc/sysconfig/network # Additional environment file if [ -f /etc/sysconfig/php-fpm ]; then . /etc/sysconfig/php-fpm fi if [ "$NETWORKING" = "no" ] then exit 0 fi RETVAL=0 prog="php-fpm" # 可根据版本不同修改 phpfpm pidfile lockfile变量。其他地方不用修改。 phpfpm="/usr/local/php7/sbin/php-fpm" pidfile=$&#123;PIDFILE-/usr/local/php7/var/run/php-fpm.pid&#125; lockfile=$&#123;LOCKFILE-/usr/local/php7/var/run/php-fpm.lock&#125; start () &#123; echo -n $"Starting $prog: " dir=$(dirname $&#123;pidfile&#125;) [ -d $dir ] || mkdir $dir daemon --pidfile $&#123;pidfile&#125; $&#123;phpfpm&#125; RETVAL=$? echo [ $RETVAL -eq 0 ] &amp;&amp; touch $&#123;lockfile&#125; &#125; stop () &#123; echo -n $"Stopping $prog: " killproc -p $&#123;pidfile&#125; php-fpm RETVAL=$? echo if [ $RETVAL -eq 0 ] ; then rm -f $&#123;lockfile&#125; $&#123;pidfile&#125; fi &#125; restart () &#123; stop start &#125; reload () &#123; echo -n $"Reloading $prog: " if ! $&#123;phpfpm&#125; --test ; then RETVAL=6 echo $"not reloading due to configuration syntax error" failure $"not reloading $prog due to configuration syntax error" else killproc -p $&#123;pidfile&#125; php-fpm -USR2 RETVAL=$? fi echo &#125; # See how we were called. case "$1" in start) start ;; stop) stop ;; status) status -p $&#123;pidfile&#125; php-fpm RETVAL=$? ;; restart) restart ;; reload|force-reload) reload ;; configtest) $&#123;phpfpm&#125; --test RETVAL=$? ;; condrestart|try-restart) [ -f $&#123;lockfile&#125; ] &amp;&amp; restart || : ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|reload|force-reload|condrestart|try-restart|configtest&#125;" RETVAL=2 ;; esac exit $RETVAL --------------------------file end--------------------------------- service php-fpm &#123;start|stop|status|restart|reload|force-reload|condrestart|try-restart|configtest&#125; CentOS 7 vim /usr/lib/systemd/system/php-fpm.service --------------------------file start--------------------------------- [Unit] Description=php-fpm After=syslog.target network.target [Service] Type=forking PIDFile=/usr/local/php7/var/run/php-fpm.pid ExecStart=/usr/local/php7/sbin/php-fpm ExecReload=/bin/kill -USR2 $MAINPID PrivateTmp=true [Install] WantedBy=multi-user.target --------------------------file end--------------------------------- systemctl （start | restart | reload | stop | enable | disable | status） php-fpm.service &nbsp;系统启动服务 CentOS 6 加入 chkconfig 管理： chkconfig --add php-fpm 开机启动： chkconfig --level 345 php-fpm on 开机不启动： chkconfig php-fpm off 查看开机是否启动 chkconfig --list php-fpm CentOS 7 开机启动： systemctl enable php-fpm.service 开机不启动： systemctl disable php-fpm.service &nbsp;加入 man 文档 CentOS 6 vim /etc/man.config CentOS 7： vim /etc/man_db.conf 写入:MANPATH /usr/local/php7/php/man,然后就可以使用 man 命令查看 &nbsp;httpd nginx 与 php 连接 httpd 模块 php 要点： 1：httpd开启模块： LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so 2：php编译指定 httpd apxs 路径（成为 httpd 模块） --with-apxs2=/usr/local/httpd24/bin/apxs 连接： vim /etc/httpd/httpd.conf 添加：（编译时这个默认已经添加） LoadModule php7_module modules/libphp7.so #LoadModule php5_module modules/libphp5.so 添加 index.php： &lt;IfModule dir_module&gt; DirectoryIndex index.php index.html &lt;/IfModule&gt; 文件最后添加： &lt;FilesMatch \.php$&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt; 备注：vhost 也可以应用 httpd（fastcgi）与 php-fpm 要点： 1：httpd开启模块： LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so 2：php编译开启模块： --enable-fpm 连接方式1： vi /etc/httpd/httpd.conf 最后添加： # On：正向代理（默认） Off：反向代理（此处建议使用） ProxyRequests Off &lt;FilesMatch \.php$&gt; SetHandler proxy:fcgi://127.0.0.1:9000 &lt;/FilesMatch&gt; 连接方式2： vi /etc/httpd/httpd.conf 最后添加： # On：正向代理（默认） Off：反向代理（此处建议使用） ProxyRequests Off &lt;LocationMatch ^(.*\.php)$&gt; ProxyPass fcgi://127.0.0.1:9000/var/www/html/ &lt;/LocationMatch&gt; 连接方式3：类型2的改变 vi /etc/httpd/httpd.conf 最后添加： # On：正向代理（默认） Off：反向代理（此处建议使用） ProxyRequests Off ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/html/$1 连接方式设置完后再添加 index.php： &lt;IfModule dir_module&gt; DirectoryIndex index.php index.html &lt;/IfModule&gt; 备注：连接方式1 更方便在本地使用，2和3一般会使用远程 php 服务器上。 Nginx与php连接 要点： 1：Nginx 默认支持 fastcgi 2：php编译开启模块： --enable-fpm 连接： server &#123; listen 80; server_name localhost; root /var/www/html; index index.php index.html; ....... # nginx 连接方式 location ~ \.php$ &#123; # root /：可以在这里单独设置php的根，$document_root 变量是上面 root 定义的网站根路径。 fastcgi_pass 127.0.0.1:9000; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; &#125; &nbsp;PHP与MariaDB(mysql)连接4.1：使用 MariaDB 编译（相对于mysql安装的目录） --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-pdo-mysql=/usr/local/mysql 4.2：使用 PHP 的 mysqlnd 编译（推荐使用） --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd 4.3：php版本区别要点： 1：php7移除了 mysql 扩展，php7仅能是用 mysqli 和 pdo_mysql 2：mysqlnd 要求 php版本 &gt;= 5.3 4：mysqlnd和php内部机制结合更紧密，是优化过的mysql驱动，建议使用 &nbsp;测试添加文件与内容 vim /var/www/html/index.php &lt;?php phpinfo(); ?&gt; &nbsp;php多版本安装注意事项6.1：httpd与php httpd 模块：可以编译多个版本，但同时只能运行一个，另外一个需要注释。 LoadModule php7_module modules/libphp7.so #LoadModule php5_module modules/libphp5.so httpd fastcgi： 在 vhost 虚拟机中指定不同的监听地址。 例如： &lt;VirtualHost *:80&gt; DocumentRoot "/web/a" ServerName www.a.com &lt;FilesMatch \.php$&gt; SetHandler proxy:fcgi://127.0.0.1:9000 &lt;/FilesMatch&gt; # 或者 ProxyRequests Off ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/html/$1 &lt;/VirtualHost&gt; 6.2：nginx与php 指定不同的监听地址 location ~ \.php$ &#123; fastcgi_pass 127.0.0.1:9000; &#125; &nbsp;推荐博客 http://php.net/manual/zh/install.php(官网安装帮助文档) http://cnzhx.net/blog/apache-httpd-mod_proxy_fcgi-php-fpm/ http://blog.csdn.net/u010861514/article/details/51926575]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx编译安装]]></title>
    <url>%2FNginx%2F974856413.html</url>
    <content type="text"><![CDATA[&nbsp;Nginx编译安装wget http://nginx.org/download/nginx-1.10.2.tar.gzwget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz wget http://zlib.net/zlib-1.2.11.tar.gzwget https://www.openssl.org/source/openssl-1.0.2l.tar.gz &nbsp;编译安装./configure --prefix=/opt/laohulab/nginx --user=www --group=www --with-openssl=../openssl-1.0.2l --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.11 --with-http_realip_module --with-http_ssl_module --with-http_stub_status_modulemake &amp;&amp; make install 此处编译将openssl、pcre、zlib编译至nginx启动内核，从而不依赖系统openssl、pcre、zlib，加快nginx启动速度！ &nbsp;查看安装版本[root@dokuwiki-10-26 ~]# /opt/laohulab/nginx/sbin/nginx -Vnginx version: nginx/1.10.2built by gcc 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC) built with OpenSSL 1.0.2l 25 May 2017TLS SNI support enabledconfigure arguments: --prefix=/opt/laohulab/nginx --user=www --group=www --with-openssl=../openssl-1.0.2l --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.11 --with-http_realip_module --with-http_ssl_module --with-http_stub_status_module &nbsp;参考案例nginx version: nginx/1.10.2built by gcc 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) built with OpenSSL 1.0.2j 26 Sep 2016TLS SNI support enabledconfigure arguments: --prefix=/opt/tuniu/nginx --user=www --group=www --with-ld-opt=-Wl,-rpath,/usr/local/luajit/lib --with-openssl=../openssl-1.0.2j --with-pcre=../pcre-8.39/ --with-zlib=../zlib-1.2.8/ --with-http_realip_module --with-http_ssl_module --with-http_stub_status_module --add-module=../ngx_devel_kit-0.3.0 --add-module=../lua-nginx-module-0.10.7 --add-module=../ngx_cache_purge-2.3 --add-module=../nginx-http-concat --add-module=../ngx_http_sticky_module --add-module=../nginx-upsync-module]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取adsl公网地址]]></title>
    <url>%2FAdsl%2F3153032326.html</url>
    <content type="text"><![CDATA[&nbsp;背景 实时获取宽带ADSL公网地址 解决动态域名更新失败，无法获取公网IP 邮件通知变更 &nbsp;监控脚本#!/usr/bin/env python#coding=utf-8import urllib2,re,sysimport timeimport smtplibfrom email.mime.text import MIMETextfrom email.header import Headerfrom email.mime.multipart import MIMEMultipartdef GetWanIP(): respone = urllib2.urlopen('http://ddns.oray.com/checkip',timeout=5) r = respone.read() ip = re.search('\d+\.\d+\.\d+\.\d+',r).group() return ipdef SentMail(LastWanIP,CurrentWanIP,time): mail_host = 'mail.laohulab.com' mail_user = 'postmaster' mail_pass = 'password' sender = 'postmaster@laohulab.com' receivers = ['120731842@qq.com','yongjianhu@laohulab.com'] message = MIMEMultipart() message['From'] = Header(sender) message['To'] = Header(';'.join(receivers)) message['Subject'] = Header('Adsl IP Update For laohulab.com !','utf-8') message.attach(MIMEText('Time:%s\nLastWanIP:%s\nCurrentWanIP:%s\n' % (time,LastWanIP,CurrentWanIP), 'plain', 'utf-8')) att1 = MIMEText(open('adsl.txt','rb').read(), 'base64', 'utf-8') att1["Content-Type"] = 'application/octet-stream' att1["Content-Disposition"] = 'attachment; filename=adsl.txt' message.attach(att1) try: smtpObj = smtplib.SMTP() smtpObj.connect(mail_host, 25) smtpObj.login(mail_user,mail_pass) smtpObj.sendmail(sender, receivers, message.as_string()) print '\033[31;1mSuccess Sent Mail To %s\033[0m' % receivers except: print '\033[31;1mFailer Sent Mail To %s\033[0m' % receiversif __name__ == '__main__': f = file('adsl.txt','r') LastWanIP = re.search('\d+\.\d+\.\d+\.\d+',f.read().strip().split()[-1]).group() f.close() print LastWanIP CurrentIP = GetWanIP() print CurrentIP if CurrentIP == LastWanIP: sys.exit('\033[34;1m Current Adsl IP Not Changed For laohulab.com !\033[0m') else: t = time.asctime(time.localtime(time.time())) f = file('adsl.txt','ab') f.write('%s %s\n' % (t,CurrentIP)) f.flush() f.close() SentMail(LastWanIP,CurrentIP,t)]]></content>
      <categories>
        <category>Adsl</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Adsl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[定制登录shell提示信息]]></title>
    <url>%2Funcategorized%2F445565787.html</url>
    <content type="text"><![CDATA[&nbsp;定制提示信息 &nbsp;脚本文件#!/bin/bash#Get Local IP LISTIP_LIST=`ifconfig |grep -v 'inet6' |grep 'inet'|grep -v '127.0.0.1'|awk '&#123;print $2&#125;'|awk -F: '&#123;print $2&#125;'`IP_ARRY=($IP_LIST)IP="|"for v in $&#123;IP_ARRY[@]&#125;do IP="$IP $v |"doneecho -e "\033[32;1m---------------------------------------------------------------------- Hi\033[0m \033[31;1m`whoami`\033[0m \033[32;1mWelcome to login Nanjing JumpBox. -----------------------\033[0m\033[31;1m NanJing JumpBox Info \033[0m\033[32;1m------------------------- HomeDir = $HOME HostName = $HOSTNAME OS = `cat /etc/centos-release` Kernel = `uname -r` CPU = `lscpu |grep Socket|awk '&#123;print $2&#125;'` *`cat /proc/cpuinfo | grep "model name"|uniq|awk -F: '&#123;print $2&#125;'` MEM = `free -h|grep Mem|awk '&#123;print $2&#125;'` DISK = `lsblk |grep sda |awk '&#123;print $4&#125;' | head -n 1` IP = $IP Note:\033[31;1m Do not upload large files to JumpBox\033[32;1m -----------------------\033[0m\033[31;1m YZKC Cluster 1 Phase \033[0m\033[32;1m------------------------- 1.Login Host: 20.0.0.10 2.Directory Capacity: 40TB [/YZGROUP/genewiz] 3.Public Soft: /YZGROUP/genewiz/public/app 4.SuZhou Directory: /YZGROUP/genewiz/genewizsz 5.NanJing Directory: /YZGROUP/genewiz/genewiznj \033[0m\033[31;1m 6.Do not upload large files to the SubNode OF YZKC by JumpBox\033[0m \033[32;1m Note: 1.Please SSH \$&#123;hpcusername&#125;@20.0.0.10 -----------------------\033[0m\033[31;1m YZKC Cluster 2 Phase \033[0m\033[32;1m------------------------- 1.Login Host: njmgt02-04 njmgt02-05 njmgt02-07 2.Directory Capacity: 100TB [/YZGROUP4/STORAGE/genewiz] 3.Public Soft: /YZGROUP4/STORAGE/genewiz/public 4.SuZhou Directory: /YZGROUP4/STORAGE/genewiz/genewizsz 5.NanJing Directory: /YZGROUP4/STORAGE/genewiz/genewiznj \033[0m\033[31;1m 6.Do not upload large files to the SubNode OF YZKC by JumpBox\033[0m \033[32;1m Note: 1.Please first SSH \$&#123;hpcusername&#125;@20.0.0.10 2.SSH \$&#123;hpcusername&#125;@&#123;njmgt02-04|njmgt02-05|njmgt02-07&#125;----------------------------------------------------------------------\033[0m"]]></content>
      <tags>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix安装指南]]></title>
    <url>%2Funcategorized%2F1129683265.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[zabbix告警邮件]]></title>
    <url>%2FZabbix%2F2948901815.html</url>
    <content type="text"><![CDATA[&nbsp;新增功能 对邮件内容进行了重新定制 增加了监控告警图表展示 #!/usr/bin/env python#coding=utf-8import jsonimport requestsimport datetimeimport osimport smtplibimport sysimport timefrom email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom email.mime.application import MIMEApplicationfrom email.mime.image import MIMEImage #zabbix接口地址、登录地址、图片地址zabbix_url = 'http://njzabbix.local.genewiz.com/api_jsonrpc.php'login_url = 'http://njzabbix.local.genewiz.com/index.php'zabbix_header = &#123; "Content-Type":"application/json-rpc"&#125; #获取tokendef GetToken(): data = &#123; "jsonrpc": "2.0", "method": "user.login", "params": &#123; "user": "xxxxxxxx", "password": "xxxxxxxx" &#125;, "id": 1, "auth": None &#125; request = requests.post(url=zabbix_url, headers=zabbix_header, data=json.dumps(data)) token = json.loads(request.content)["result"] return token #获取graphitem iddef GetGraphID(itemids): data = &#123; "jsonrpc": "2.0", "method": "graphitem.get", "params": &#123; "output": "extend", "itemids": itemids &#125;, "auth": GetToken(), "id": 1 &#125; request = requests.post(url=zabbix_url, headers=zabbix_header, data=json.dumps(data)) if json.loads(request.content)['result']: return json.loads(request.content)['result'][0]['graphid'] else: return False def PicSave(ip,graphid): #新建以当天日期为名的文件夹保存图片 today = datetime.datetime.now().date().strftime('%Y%m%d') pic_save_path_dir= os.path.join('/opt/genewiznj/zabbix/img/',today ) if not os.path.exists(pic_save_path_dir): os.makedirs(pic_save_path_dir) pic_name = ip + '-' + graphid +'.png' pic_save_path = os.path.join(pic_save_path_dir,pic_name) #定义graph的starttime参数，从前一天的9:00开始 yesterday = (datetime.datetime.now()-datetime.timedelta(days=1)) yesterday9 = datetime.datetime(yesterday.year,yesterday.month,yesterday.day,9).strftime('%Y%m%d%H%M%S') graph_args = &#123; "graphid":graphid, "width":800, "stime":yesterday9, "isNow": 1, "period":7200 #定义时长，取1天的数据,单位s &#125; print graph_args graph_url = 'http://njzabbix.local.genewiz.com/chart2.php' client = requests.session() data = &#123; "name": 'jianhu.yong', "password": 'Welcome2017', "autologin": 1, "enter": "Sign in" &#125; time.sleep(10) r=client.post(url=login_url,data=data) r=client.get(url=graph_url,params=graph_args) with open(pic_save_path,'wb') as f: f.write(r.content) #f.flush() f.close() return pic_save_path def SendMail(username, password, from_addr, to_addrs, message): try: server = smtplib.SMTP('smtp.partner.outlook.cn', '587') server.ehlo() server.starttls() server.ehlo() server.login(username, password) server.sendmail(from_addr,to_addrs,message.as_string()) server.quit() return True except Exception as e: print e return False if __name__ == '__main__': if len(sys.argv) != 4: sys.exit('Usage:%s test@examplie.com mail_subject mail_content' % sys.argv[0]) else: username = 'jianhu.yong@genewiz.com.cn' password = 'Welcome2017' from_addr = 'jianhu.yong@genewiz.com.cn' mail_msg = sys.argv[3].strip().split('\r\n') mail_dic = &#123;&#125; for i in mail_msg: temp = i.split(':') if len(temp)==2: mail_dic[temp[0]] = temp[-1] else: mail_dic[temp[0]] = ':'.join(temp[1:]) print mail_dic if mail_dic.has_key('Problem Time'): key = 'Problem Time' else: key = 'Recovery Time' graphitem_id = GetGraphID('&#123;0&#125;'.format(mail_dic['Problem Item ID'])) if graphitem_id: pic_save_path = PicSave(mail_dic['Problem Host IP'],graphitem_id) mail_msg = ''' &lt;html lang="en"&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type="text/css"&gt; .bg &#123; /*width: 600px;*/ &#125; .bg table &#123; /*width: 600px;*/ font: 12px microsoft yahei; border-collapse: collapse; border: 1px solid #B9B4B1; text-align: left; &#125; .bg table td &#123; border: 1px solid #B9B4B1; text-align: left; height: 28px; padding-left: 10px; padding-right: 10px; &#125; .bg .r1 &#123; background: #4285F4; color: #F8FBFD; &#125; ul&#123; padding:0; margin:0; &#125; ul li&#123; list-style: none; &#125; ul li a&#123; text-decoration: none; display: inline-block; width: 400px; height: 20px; color: #4285F4; font:12px/20px microsoft yahei; &#125; p&#123; color: red; font:12px/20px microsoft yahei; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h4 style="border-bottom:1px solid black;padding-bottom: 10px"&gt;1.告警详情&lt;/h4&gt; &lt;div class="bg"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="r1"&gt;%s&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Host&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Host IP&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Item ID&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Name&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Key&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Value&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Level&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Trigger Name&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Trigger Rule&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Latest Collection Value&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;td class="r1"&gt;Original Problem ID&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;h4 style="border-bottom:1px solid black;padding-bottom: 10px"&gt;2.监控图表&lt;/h4&gt; &lt;img src="cid:image1"&gt; &lt;/body&gt; &lt;/html&gt; ''' % ( key, mail_dic[key], mail_dic['Problem Host'], mail_dic['Problem Host IP'], mail_dic['Problem Item ID'], mail_dic['Problem Name'], mail_dic['Problem Key'], mail_dic['Problem Value'], mail_dic['Problem Level'], mail_dic['Problem Trigger Name'], mail_dic['Problem Trigger Rule'], mail_dic['Latest Collection Value'], mail_dic['Original Problem ID'] ) message = MIMEText(mail_msg, 'html', 'utf-8') msg=MIMEMultipart('related') to_addrs = [] for i in sys.argv[1].split(','): to_addrs.append(i) msg['From'] = from_addr if len(to_addrs) == 1: msg['To'] = to_addrs[0] else: msg['To'] = ','.join(to_addrs) subject = sys.argv[2] msg['Subject'] = subject msgAlternative = MIMEMultipart('alternative') msg.attach(msgAlternative) msgAlternative.attach(message) fp=open(pic_save_path,'rb') image=MIMEImage(fp.read()) fp.close() image.add_header('Content-ID','&lt;image1&gt;') msg.attach(image) if SendMail(username, password, from_addr, to_addrs, msg) == True: print "Email successfully sent to", to_addrs else: print "Email not sent to", to_addrs else: mail_msg = ''' &lt;html lang="en"&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type="text/css"&gt; .bg &#123; /*width: 600px;*/ &#125; .bg table &#123; /*width: 600px;*/ font: 12px microsoft yahei; border-collapse: collapse; border: 1px solid #B9B4B1; text-align: left; &#125; .bg table td &#123; border: 1px solid #B9B4B1; text-align: left; height: 28px; padding-left: 10px; padding-right: 10px; &#125; .bg .r1 &#123; background: #4285F4; color: #F8FBFD; &#125; ul&#123; padding:0; margin:0; &#125; ul li&#123; list-style: none; &#125; ul li a&#123; text-decoration: none; display: inline-block; width: 400px; height: 20px; color: #4285F4; font:12px/20px microsoft yahei; &#125; p&#123; color: red; font:12px/20px microsoft yahei; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h4 style="border-bottom:1px solid black;padding-bottom: 10px"&gt;1.告警详情&lt;/h4&gt; &lt;div class="bg"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="r1"&gt;%s&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Host&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Host IP&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Item ID&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Name&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Key&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Value&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Level&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Trigger Name&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Problem Trigger Rule&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="r1"&gt;Latest Collection Value&lt;/td&gt; &lt;td style="color: red"&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;td class="r1"&gt;Original Problem ID&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; ''' % ( key, mail_dic[key], mail_dic['Problem Host'], mail_dic['Problem Host IP'], mail_dic['Problem Item ID'], mail_dic['Problem Name'], mail_dic['Problem Key'], mail_dic['Problem Value'], mail_dic['Problem Level'], mail_dic['Problem Trigger Name'], mail_dic['Problem Trigger Rule'], mail_dic['Latest Collection Value'], mail_dic['Original Problem ID'] ) message = MIMEText(mail_msg, 'html', 'utf-8') to_addrs = [] for i in sys.argv[1].split(','): to_addrs.append(i) message['From'] = from_addr if len(to_addrs) == 1: message['To'] = to_addrs[0] else: message['To'] = ','.join(to_addrs) subject = sys.argv[2] message['Subject'] = subject if SendMail(username, password, from_addr, to_addrs, message) == True: print "Email successfully sent to", to_addrs else: print "Email not sent to", to_addr]]></content>
      <categories>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wise-installation]]></title>
    <url>%2FBioinformatics-Software%2F3851490840.html</url>
    <content type="text"><![CDATA[&nbsp;软件相关 软件下载地址：http://www.ebi.ac.uk/~birney/wise2/wise2.4.1.tar.gz 软件介绍：http://www.ebi.ac.uk/~birney/wise2/ 软件help页面：http://www.ebi.ac.uk/Tools/psa/genewise/help &nbsp;安装路径安装路径：/share/home/pengyang.xu/softwarebin目录：/share/home/pengyang.xu/software/wise2.4.1/src/bin &nbsp;安装指南&nbsp;安装glib2-devel依赖包（YUM或者源码编译安装,编译安装涉及相关头文件）yum -y install glib2-devel &nbsp;下载并加压安装包wget http://www.ebi.ac.uk/~birney/wise2/wise2.4.1.tar.gz -P /tmptar zxvf /tmp/wise2.4.1.tar.gz -C /share/home/pengyang.xu/software/ &nbsp;配置Maekefilesed -i 's#CFLAGS = -c -O3 `glib-config --cflags`#CFLAGS = -c -O3 `glib-config --cflags` -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include#g' /share/home/pengyang.xu/software/wise2.4.1/src/makefilefind /share/home/pengyang.xu/software/wise2.4.1/src -name "makefile" |xargs sed -i 's/glib-config/pkg-config --libs glib-2.0/g'sed -i 's/getline/getline_new/g' /share/home/pengyang.xu/software/wise2.4.1/src/HMMer2/sqio.csed -i 's/isnumber/isdigit/g' /share/home/pengyang.xu/software/wise2.4.1/src/models/phasemodel.c &nbsp;安装/share/home/pengyang.xu/software/wise2.4.1/src &amp;&amp; make all &nbsp;配置WISECONFIGDIR路径（请写入.bashrc或者.bash_profile） export WISECONFIGDIR=/share/home/pengyang.xu/software/wise2.4.1/wisecfg &nbsp;验证安装是否成功cd /share/home/pengyang.xu/software/wise2.4.1/src &amp;&amp; make test 验证前请先配置环境变量（exportWISECONFIGDIR=/share/home/pengyang.xu/software/wise2.4.1/wisecfg） &nbsp;常见问题&nbsp;getline冲突解决方案：sed -i 's/getline/getline_new/g' /share/home/pengyang.xu/software/wise2.4.1/src/HMMer2/sqio.c &nbsp;安装过程中无法找到相关的头文件解决方案：sed -i 's#CFLAGS = -c -O3 `glib-config --cflags`#CFLAGS = -c -O3 `glib-config --cflags` -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include#g' /share/home/pengyang.xu/software/wise2.4.1/src/makefile &nbsp;glib-config: command not found解决方案：find /share/home/pengyang.xu/software/wise2.4.1/src -name "makefile" |xargs sed -i 's/glib-config/pkg-config --libs glib-2.0/g' 备注：该软件版本较老，使用的glib库是glib1的库，现在较新的系统都用的glib2的库，所以没有glib1，按照软件默认的makefile文件来编译就会报glib-config command not found这种错误。 &nbsp;undefined reference to isnumber解决方案：sed -i 's/isnumber/isdigit/g' /share/home/pengyang.xu/software/wise2.4.1/src/models/phasemodel.c]]></content>
      <categories>
        <category>Bioinformatics Software</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[rtg-tool-installation]]></title>
    <url>%2FBioinformatics-Software%2F13202640.html</url>
    <content type="text"><![CDATA[&nbsp;软件介绍&nbsp;https://github.com/RealTimeGenomics/rtg-tools &nbsp;安装依赖 java 1.8 or later [已安装] graphviz [已安装] apache ant 1.9 or later [待安装] &nbsp;安装apache ant wget http://mirrors.tuna.tsinghua.edu.cn/apache//ant/binaries/apache-ant-1.9.11-bin.tar.gztar zxvf apache-ant-1.9.11-bin.tar.gzmv apache-ant-1.9.11 /YZGROUP/genewiz/public/app/ &nbsp;配置环境变量 export JAVA_HOME="/YZGROUP/genewiz/public/app/jdk18"export JRE_HOME="/YZGROUP/genewiz/public/app/jdk18/jre"export ANT_HOME="/YZGROUP/genewiz/public/app/apache-ant-1.9.11"export PATH="$JAVA_HOME/bin:$JRE_HOME/bin:$ANT_HOME/bin:$PATH" &nbsp;安装rtg-toolsgit clone https://github.com/RealTimeGenomics/rtg-tools.gitcd rtg-tools/ant runalltestsant zip-nojrecd /YZGROUP/genewiz/public/download/rtg-tools/distunzip rtg-tools-3.9-eda9a71-nojre.zipmv rtg-tools-3.9-eda9a71 /YZGROUP/genewiz/public/app/rtg-tools-3.9cd /YZGROUP/genewiz/public/app/rtg-tools-3.9./scripts/demo-tools.sh $PWD/rtg #生成demo数据 &nbsp;配置rtg PATHexport PATH="/YZGROUP/genewiz/public/app/rtg-tools-3.9:$PATH"]]></content>
      <categories>
        <category>Bioinformatics Software</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[sjm-installation]]></title>
    <url>%2FBioinformatics-Software%2F2537426028.html</url>
    <content type="text"><![CDATA[&nbsp;安装依赖 tclap boost [/YZGROUP4/STORAGE/genewiz/public/app/boost-1.64.0/] lsf [/YZGROUP4/ibm/lsf2.0/lsf/10.1/include] tar zxvf tclap-1.2.1.tar.gz cd tclap-1.2.1/./configure --prefix="/YZGROUP4/STORAGE/genewiz/public/app/tclap-1.2.1"makemake install &nbsp;安装sjmexport CXXFLAGS="-I/YZGROUP4/STORAGE/genewiz/public/app/tclap-1.2.1/include -I/YZGROUP4/STORAGE/genewiz/public/app/boost-1.64.0/include -I/YZGROUP4/ibm/lsf2.0/lsf/10.1/include"export LDFLAGS="-L/YZGROUP4/STORAGE/genewiz/public/app/tclap-1.2.1/lib -L/YZGROUP4/STORAGE/genewiz/public/app/boost-1.64.0/lib"./configure --prefix="/YZGROUP4/STORAGE/genewiz/public/app/sjm-1.3.0"make &amp;&amp; make install]]></content>
      <categories>
        <category>Bioinformatics Software</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[allpathslg-installation]]></title>
    <url>%2FBioinformatics-Software%2F2990336266.html</url>
    <content type="text"><![CDATA[&nbsp;官网&nbsp;http://software.broadinstitute.org/allpaths-lg/blog/?page_id=12 &nbsp;官方文档&nbsp; &nbsp;安装条件检查 The g++ compiler from GCC, version 4.7.0 or higher. The GMP library compiled with the C++ interface. Your GCC installation may already include GMP. The Picard set of Java‐based command‐line utilities for SAM file manipulation available at http://picard.sourceforge.net The graph command dot from the graphviz package. &nbsp;安装export PATH="/YZGROUP4/STORAGE/genewiz/public/app/graphviz-2.40.1/bin:$PATH" ./configure --prefix="/YZGROUP4/STORAGE/genewiz/public/app/allpathslg-52488"make &amp;&amp; make install]]></content>
      <categories>
        <category>Bioinformatics Software</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[bamtools-installation]]></title>
    <url>%2FBioinformatics-Software%2F316235107.html</url>
    <content type="text"><![CDATA[&nbsp;官方文档&nbsp;https://github.com/pezmaster31/bamtools/wiki/ &nbsp;安装jsoncppwget https://github.com/open-source-parsers/jsoncpp/archive/1.8.4.tar.gzexport PATH="/YZGROUP4/STORAGE/genewiz/public/app/cmake-3.10.3/bin:$PATH"mv 1.8.4.tar.gz jsoncpp-1.8.4.tar.gzcd jsoncpp-1.8.4/mkdir -p build/debugcmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="/YZGROUP4/STORAGE/genewiz/public/app/jsoncpp-1.8.4/" -G "Unix Makefiles" ../..makemake install &nbsp;安装bantools &nbsp;安装文档中建议使用jsoncpp,若不指定jsoncpp路径，会出现如下错误 tar zxvf bamtools.tgz cd bamtools/export LIBRARY_PATH="/YZGROUP4/STORAGE/genewiz/public/app/jsoncpp-1.8.4/lib64/:$LIBRARY_PATH"export CPLUS_INCLUDE_PATH=/YZGROUP4/STORAGE/genewiz/public/app/jsoncpp-1.8.4/include:$CPLUS_INCLUDE_PATHexport PKG_CONFIG_PATH="/YZGROUP4/STORAGE/genewiz/public/app/jsoncpp-1.8.4/lib64/pkgconfig:$PKG_CONFIG_PATH"cmake -DCMAKE_INSTALL_PREFIX="/YZGROUP4/STORAGE/genewiz/public/app/bamtools-2.5.1" ..make &amp;&amp; make install &nbsp;注意事项 使用bamtools需要配置LD_LIBRARY_PATH export LD_LIBRARY_PATH="/YZGROUP4/STORAGE/genewiz/public/app/jsoncpp-1.8.4/lib64/:$LD_LIBRARY_PATH"]]></content>
      <categories>
        <category>Bioinformatics Software</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[wan-ip-api]]></title>
    <url>%2FOther%2F20529414.html</url>
    <content type="text"><![CDATA[http://ip.360.cn/IPShare/info http://myip.com.tw http://ip.xianhua.com.cn http://www.ip.cn http://www.123cha.com/ip http://www.ip38.com http://ip.chinaz.com http://www.taobao.com/help/getip.php]]></content>
      <categories>
        <category>Other</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[django-ldap-windows]]></title>
    <url>%2FDjango%2F2821565288.html</url>
    <content type="text"><![CDATA[&nbsp;安装依赖包pip install django==1.11.2pip install django-auth-ldap==1.3.0pip install python-ldap==2.5.2 &gt;###### &nbsp;配置ldap认证import ldapfrom django_auth_ldap.config import LDAPSearch, GroupOfNamesType #配置ldap调试日志import logginglogger = logging.getLogger('django_auth_ldap')logger.addHandler(logging.StreamHandler())logger.setLevel(logging.DEBUG) AUTH_LDAP_SERVER_URI = "ldap://xx.xx.xx.xx"AUTH_LDAP_BIND_DN = "CN=Search User,OU=Special Accounts,OU=Users,OU=NJ115,DC=local,DC=genewiz,DC=com"AUTH_LDAP_BIND_PASSWORD = "xxxxxxxx"AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=Accounts,ou=users,ou=SZ,dc=local,dc=genewiz,dc=com", ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)") AUTH_LDAP_GROUP_SEARCH = LDAPSearch("CN=CN Infrastructure Team,OU=Distribution Lists,OU=Users,OU=SZ,DC=local,DC=genewiz,DC=com", ldap.SCOPE_SUBTREE, "(objectClass=group)") AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn") AUTH_LDAP_USER_FLAGS_BY_GROUP = &#123; #"is_active": "cn=active,ou=django,ou=groups,dc=example,dc=com", "is_staff": "CN=CN Infrastructure Team,OU=Distribution Lists,OU=Users,OU=SZ,DC=local,DC=genewiz,DC=com", "is_superuser": "CN=CN Infrastructure Team,OU=Distribution Lists,OU=Users,OU=SZ,DC=local,DC=genewiz,DC=com"&#125; AUTH_LDAP_USER_ATTR_MAP = &#123; "first_name": "givenName", "last_name": "sn", "email": "mail"&#125; AUTH_LDAP_ALWAYS_UPDATE_USER = True AUTHENTICATION_BACKENDS = ( 'django_auth_ldap.backend.LDAPBackend', 'django.contrib.auth.backends.ModelBackend',) &nbsp;登录测试 &nbsp;参考资料&nbsp;https://www.cnblogs.com/dreamer-fish/p/5474289.html&nbsp;https://django-auth-ldap.readthedocs.io/en/latest/example.html]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
